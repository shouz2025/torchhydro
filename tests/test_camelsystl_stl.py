
import pandas as pd
from hydrodataset import CamelsYstl
from torchhydro.datasets.mi_stl import STL


def test_dataset():
    camelsystl = CamelsYstl()
    basin = camelsystl.gage
    print(basin)

class ystl():
    def __init__(self):
        self.datasource = CamelsYstl()
        self.basin = ["1000",]
        self.time_range = ["1990-01-01","1994-01-01"]
        self.var_list = ["streamflow", "discharge_vol1", "discharge_vol2", "discharge_vol3",]
        self.pet_list = ["pet"]
        self.prcp_list = ["prcp"]
        self.streamflow = None
        self.prcp = None
        self.pet = None
        # self.read_streamflow()
        self.read_prcp()
        # self.read_pet()

    def read_streamflow(self):
        data = self.datasource.read_ts_xrdataset(
            self.basin,
            self.time_range,
            self.var_list,
        )
        data1 = data.streamflow.to_dataframe()
        data2 = data.discharge_vol1.to_dataframe()
        data3 = data.discharge_vol2.to_dataframe()
        data4 = data.discharge_vol3.to_dataframe()
        data1.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data2.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data3.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data4.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data1 = data1.values[:, 0]
        data2 = data2.values[:, 0]
        data3 = data3.values[:, 0]
        data4 = data4.values[:, 0]
        data_ = data1.tolist() + data2.tolist() + data3.tolist() + data4.tolist()
        self.streamflow = data_ + data_
        # print(self.data)

    def read_pet(self):
        data = self.datasource.read_ts_xrdataset(
            self.basin,
            self.time_range,
            self.pet_list
        )
        data = data.pet.to_dataframe()
        data.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data = data.values[:, 0]
        pet = data.tolist() + data.tolist() + data.tolist() + data.tolist()
        self.pet = pet + pet

    def read_prcp(self):
        data = self.datasource.read_ts_xrdataset(
            self.basin,
            self.time_range,
            self.prcp_list
        )
        data = data.prcp.to_dataframe()
        data.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data = data.values[:, 0]
        prcp = data.tolist() + data.tolist() + data.tolist() + data.tolist()
        self.prcp = prcp + prcp

def test_read_data():
    x = ystl().data
    print(x)
# [165.8 164.1 158.8 ...  73.2  71.1  71.3]

def test_cycle_subseries():
    x = ystl().pet
    stl = STL(x)
    stl._cycle_subseries(x)
    print(stl.cycle_subseries)
# PASSED                      [100%]365

def test_weight_function():
    u = [1, 0.5, 0, 0.5, 1]
    n = 5
    w = []
    stl = STL()
    for i in range(n):
        w_i = stl.weight_function(u[i], 3)
        w.append(w_i)
    print(w)
# [0, 0.5625, 1, 0.5625, 0]
# [0, 0.669921875, 1, 0.669921875, 0]

def test_extend_subseries():
    x = ystl().data
    stl = STL(x)
    subseries = stl._cycle_subseries(x)
    extend_subseries = stl._extend_subseries(subseries)
    print(len(extend_subseries))
    print(len(extend_subseries[0]))
# 365
# 18

def test_de_extend_subseries():
    x = ystl().data
    stl = STL(x)
    subseries = stl._cycle_subseries(x)
    extend_subseries = stl._extend_subseries(subseries)
    de_extend_subseries = stl._de_extend_subseries(extend_subseries)
    print(len(de_extend_subseries))
    print(len(de_extend_subseries[0]))
# 365
# 16

def test_recover_series():
    x = ystl().data
    stl = STL(x)
    stl._cycle_subseries(x)
    print(len(stl.cycle_subseries))
    series = stl._recover_series(stl.cycle_subseries)
    print(series[:10])
# 365
# [165.8, 164.1, 158.8, 158.0, 156.2, 144.8, 137.6, 134.6, 130.3, 128.2]

def test_neighborhood_weight():
    x = ystl().pet
    stl = STL(x)
    i_focal = 3
    weight = stl._neighborhood_weight(13, i_focal=i_focal)
    print("i_focal = {}".format(i_focal))
    print(weight)
# i_focal = 0    PASSED                  [100%]
# [1.0, 0.9982648933890121, 0.9861753122936036, 0.9538536071777344, 0.8929533099629123, 0.7983059250581059, 0.669921875,
# 0.5148943256800089, 0.34847330183407005, 0.19322586059570312, 0.07477611946222622, 0.01212663499827988, 0]
# PASSED                  [100%]
# i_focal = 1
# [0.9977477485949877, 1.0, 0.9977477485949877, 0.9820766066349517, 0.9403696580985775, 0.8625726392333274,
# 0.7438883494722954, 0.5878823691852629, 0.40901258144152797, 0.23297940878706283, 0.09252419331977448,
# 0.01537976908411411, 0]
# PASSED                  [100%]
# i_focal = 2
# [0.976191488, 0.997002999, 1.0, 0.997002999, 0.976191488, 0.921167317, 0.8200258559999999, 0.669921875,
# 0.48189030400000005, 0.283593393, 0.11621427199999991, 0.01990251099999998, 0]
# PASSED                  [100%]i_focal = 3
# [0.8929533099629123, 0.9674381496121647, 0.9958904161106462, 1.0, 0.9958904161106462, 0.9674381496121647,
# 0.8929533099629123, 0.7590709148064702, 0.5687589331394396, 0.34847330183407005, 0.1484497016367144,
# 0.0263752519294353, 0]
# PASSED                  [100%]
# i_focal = 12
# [0, 0.01212663499827988, 0.07477611946222622, 0.19322586059570312, 0.34847330183407005, 0.5148943256800089,
# 0.669921875, 0.7983059250581059, 0.8929533099629123, 0.9538536071777344, 0.9861753122936036, 0.9982648933890121, 1.0]
# PASSED                  [100%]
# i_focal = 11
# [0, 0.01537976908411411, 0.09252419331977448, 0.23297940878706283, 0.40901258144152797, 0.5878823691852629,
# 0.7438883494722954, 0.8625726392333274, 0.9403696580985775, 0.9820766066349517, 0.9977477485949877,
# 1.0, 0.9977477485949877]
# PASSED                  [100%]
# i_focal = 10
# [0, 0.01990251099999998, 0.11621427199999991, 0.283593393, 0.48189030400000005, 0.669921875, 0.8200258559999999,
# 0.921167317, 0.976191488, 0.997002999, 1.0, 0.997002999, 0.976191488]

def test_moving_average_smoothing():
    x = ystl().pet
    stl = STL(x)
    xx = [1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31]  # 17
    result = stl.moving_average_smoothing(7, xx)
    print(xx)
    print(result)
# PASSED             [100%]
# [1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31]
# [5.0, 5.857142857142857, 7.285714285714286, 7.0, 9.285714285714286, 10.714285714285714, 13.285714285714286,
#  14.714285714285714, 17.285714285714285, 18.714285714285715, 21.285714285714285, 22.714285714285715, 25.571428571428573,
#  27.0, 27.571428571428573, 28.142857142857142, 30.428571428571427]

def test_repetitious_moving_average_smoothing():
    x = ystl().pet
    stl = STL(x)
    result1 = stl.moving_average_smoothing(41, x)
    result2 = stl.moving_average_smoothing(51, result1)
    result3 = stl.moving_average_smoothing(61, result2)
    pet_mas = pd.DataFrame({"pet": x, "result1": result1, "result2": result2, "result3": result3})
    pet_mas.index.name = "time"
    file_name = r"D:\minio\waterism\datasets-origin\camels\camels_ystl\pet_moving_average_smoothing.csv"
    pet_mas.to_csv(file_name, sep=" ")
    print(pet_mas)
# PASSED [100%]
# time  pet   result1   result2   result3
# 0     1.20  0.936585  0.978288  0.956109
# 1     1.30  0.939024  0.976997  0.955493
# 2     0.90  0.965854  0.972238  0.955219
# 3     0.55  1.006098  0.966308  0.955174
# 4     0.85  1.056098  0.961549  0.955298
# ...    ...       ...       ...       ...
# 5835  0.65  0.746341  0.757604  0.828124
# 5836  0.55  0.750000  0.751961  0.823865
# 5837  0.55  0.762195  0.747035  0.819445
# 5838  0.50  0.774390  0.743424  0.814950
# 5839  0.60  0.790244  0.740555  0.810459
#
# [5840 rows x 4 columns]

def test_weight_least_squares():
    x = ystl().pet
    stl = STL(x)
    xx = [1, 2, 3, 4, 5]
    y = x[:5]
    y_ = stl.weight_least_squares_fit(xx, y, degree=2)
    print(y_)
    # PASSED[100 %]
    # 0.7283553118882566

def test_sample_loess():
    x = ystl().pet
    stl = STL(x)
    y = [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]  # 18
    result = stl.loess(7, y)
    print(y)
    print(result)
# PASSED                         [100%]
# [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]
# [1.360129590021107, 3.2375224121135506, 5.201212543814867, 6.999999999999991, 8.861362741236697, 11.13863725876328,
# 12.999999999999984, 14.86136274123669, 17.138637258763275, 18.999999999999982, 20.861362741236686, 23.138637258763268,
# 24.999999999999975, 26.861362741236682, 29.138637258763257, 30.97743212943223, 32.65893534046176, 34.41033858673253]

def test_loess_subseries():
    x = ystl().pet
    stl = STL(x)
    y = [1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55]  # 18
    width = 15
    result = stl.loess(width, y)
    print("width = {}".format(width))
    print(y)
    print(result)
# width = 7
# PASSED                      [100%]
# [1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55]
# [1.1171822571654677, 1.0022386742789637, 0.9092975581073439, 0.8339015068633021, 0.8932738173384088,
# 0.8904599361078279, 0.8323647396904573, 0.8339015068633021, 0.8932738173384088, 0.8904599361078279,
# 0.8323647396904573, 0.8339015068633021, 0.8932738173384088, 0.816049551484761, 0.7307655094915988, 0.6073610180542387]
# width = 13
# PASSED                      [100%]
# [1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55]
# [0.9989823558152048, 0.9821281673224069, 0.9620592946659765, 0.9666575766223443, 0.9552633730078289,
# 0.8689770915187841, 0.8669454934464629, 0.8667012266500779, 0.8579785244574571, 0.8583747554460013,
# 0.8555111385537292, 0.8321474407007147, 0.8061637120257298, 0.7808825674768443, 0.755341587764194, 0.7269348455122501]
# PASSED                      [100%]
# width = 15
# [1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55, 1.2, 1.2, 0.5, 0.55]
# [0.9864734751599387, 0.9754733442651808, 0.9607055611880029, 0.9699433193146715, 0.9630583361957221,
# 0.9359962557994859, 0.8620713293075262, 0.8579959965523511, 0.8673482403600385, 0.8626995180300019,
# 0.8449054684661481, 0.8240669246878335, 0.802758564984388, 0.7820964437960396, 0.7614263384564299, 0.7391728782521003]

def test_loess():
    x = ystl().pet
    stl = STL(x)
    xx = x[:200]
    result = stl.loess(37, xx)
    print(xx)
    print(result)
# PASSED                                [100%]
# [1.2, 1.3, 0.9, 0.55, 0.85, 1.15, 0.9, 0.85, 0.7, 0.7, 0.8, 0.95, 1.05, 0.75, 0.6, 0.55, 1.1, 1.75, 1.3, 0.8, 1.05,
# 1.15, 1.25, 1.85, 1.8, 1.0, 0.75, 0.45, 0.35, 0.95, 1.05, 0.8, 1.1, 1.0, 0.7, 0.9, 0.9, 1.15, 1.0, 0.5, 0.65, 0.75,
# 0.95, 1.25, 0.85, 0.4, 0.35, 0.5, 0.9, 0.75, 0.35, 0.9, 0.9, 0.75, 1.3, 1.55, 1.55, 1.25, 1.0, 1.15, 0.9, 0.7, 1.15,
# 1.4, 1.35, 1.3, 1.75, 1.55, 1.15, 1.7, 1.2, 0.4, 0.5, 0.45, 1.05, 1.95, 2.1, 1.4, 1.0, 1.9, 2.2, 1.55, 1.4, 1.75,
# 1.65, 0.8, 0.75, 0.8, 0.9, 1.65, 1.2, 0.7, 1.7, 1.85, 1.4, 1.55, 1.45, 1.15, 0.9, 0.7, 1.25, 2.05, 1.9, 1.45, 0.95,
# 0.85, 1.5, 1.95, 1.55, 1.2, 1.6, 1.55, 1.25, 2.1, 2.65, 2.7, 1.55, 0.25, 0.8, 1.6, 1.0, 0.6, 2.2, 3.45, 3.65, 3.2,
# 2.85, 3.85, 2.65, 2.35, 4.15, 3.85, 3.75, 2.75, 1.9, 2.7, 3.65, 3.55, 2.35, 1.55, 1.3, 1.15, 1.3, 2.1, 3.05, 3.85,
# 3.1, 2.2, 2.4, 2.45, 3.3, 2.9, 2.25, 3.5, 4.0, 2.55, 1.05, 2.2, 3.95, 4.35, 3.8, 2.55, 1.8, 2.45, 3.55, 2.85, 2.2,
# 2.1, 1.75, 1.05, 1.05, 2.95, 3.85, 2.1, 1.25, 2.05, 3.15, 4.1, 3.05, 1.85, 1.8, 2.9, 4.35, 3.9, 3.25, 3.4, 2.55, 3.15,
# 4.55, 4.45, 3.4, 3.0, 3.5, 3.9, 4.35, 3.85, 2.3, 1.55, 1.5, 1.35]
# [0.8836166759929116, 0.8988489236971938, 0.9189820995426331, 0.9249137979022809, 0.9463732694446015,
# 0.9525613710182382, 0.9597237012511306, 0.9650465758349704, 0.9708773940823634, 0.9797656312934588,
# 0.9880120493184822, 0.9933506974391096, 0.9965707473103793, 0.9993763606267778, 1.0043367058024049,
# 1.0135921222858808, 1.025909550667806, 1.0005120910470313, 1.0102767400947137, 1.013231636389492, 1.0153745488731836,
# 1.0170514070985852, 1.0185928091929584, 1.0195970071570797, 1.0192688060276465, 1.0169016103145576,
# 1.0120973437215615, 1.0049153601179979, 0.9953737859335088, 0.98317866796033, 0.9680001504528399, 0.949927667627106,
# 0.9298706445051529, 0.9090720806296936, 0.8884357219629571, 0.868538489065472, 0.8498422752159247, 0.8332043185601815,
# 0.8200004726495321, 0.8114438813782006, 0.8081392923164837, 0.8097294384774981, 0.8149101798006924, 0.822360042095421,
# 0.8311699387061647, 0.8406764393007089, 0.8507767071751887, 0.8617693338418533, 0.8738516626572187,
# 0.8872958960253667, 0.9026748347149438, 0.9203845762593619, 0.940679671868085, 0.9638985958386638, 0.9897363738935011,
# 1.0169476420539696, 1.0437806379050223, 1.0686646124070514, 1.090936304461421, 1.1108873654908105, 1.1291487114724716,
# 1.145764455293569, 1.1603860024850023, 1.1735521461013678, 1.1865408876827996, 1.2002699100276961, 1.2150664822542312,
# 1.2310611306370296, 1.2482850019599223, 1.2661976257865606, 1.283603505288831, 1.2991338099807372, 1.3116801135071898,
# 1.3206353234861776, 1.3256010290381077, 1.3265386925724458, 1.324532507415039, 1.32129721209194, 1.3183991593378208,
# 1.317408834016908, 1.3195503509583477, 1.3249080813143874, 1.332419927845955, 1.3404317616497743, 1.3474145632548964,
# 1.3523005396340484, 1.3544674760521327, 1.3534248679003085, 1.3485348103100472, 1.3399848412930953,
# 1.3294305548804057, 1.3192292193728314, 1.3114298271806857, 1.3070643946661964, 1.3063247404312965,
# 1.3091586958645751, 1.3157012978211589, 1.3263374408866024, 1.3412067265911776, 1.3601921205155647,
# 1.3823842561091977, 1.4055227152708596, 1.4270481400796142, 1.4453255828547893, 1.4595365456794092,
# 1.4693765053794516, 1.4761055494241986, 1.4826444956924494, 1.4924128779007333, 1.5085370245381702,
# 1.5332291078061198, 1.5675245836621836, 1.6109259248063765, 1.6622653474966596, 1.7210240866523367,
# 1.7869953081030219, 1.8597433681375077, 1.9377082128875958, 2.018155077028241, 2.098292238827944, 2.176218483362371,
# 2.251073661072284, 2.322412279125092, 2.389774058213847, 2.4521807604035137, 2.507899164807532, 2.5553370326515616,
# 2.5944052216026137, 2.6267224159961415, 2.654596524577535, 2.679789368321287, 2.7024914355038576, 2.720917986464658,
# 2.7324236888719735, 2.7353385622478754, 2.7297061358048573, 2.7169233921354774, 2.6993556906198375, 2.679844510411762,
# 2.6606377976664213, 2.6423468628100464, 2.624643458171697, 2.608102527064267, 2.5948173638658862, 2.5874675909470057,
# 2.587609023376111, 2.5951000737375063, 2.6097385907036363, 2.6312564808825223, 2.6579663950699937, 2.6874834663401286,
# 2.7174058853378593, 2.745433866643021, 2.768731405230047, 2.783836742296007, 2.788370147947318, 2.782030411051785,
# 2.7658267728615327, 2.741620670180623, 2.7123118128049635, 2.681738262157799, 2.653677784600306, 2.6298131425457503,
# 2.609228487060304, 2.5900891658265293, 2.5720455096453945, 2.5566177428466594, 2.5454490497758995, 2.5393454078448703,
# 2.53822142288482, 2.5416118820322118, 2.549591283694188, 2.5629768307256473, 2.5831741492395017, 2.6119228465643385,
# 2.6505873855165847, 2.698987229176006, 2.755490504760722, 2.8182130559793337, 2.885216922870092, 2.9539842191349415,
# 3.021049441277575, 3.058765721380218, 3.0740997018059337, 3.0787114115571805, 3.0786186884900957, 3.0761627422833473,
# 3.0723110669419165, 3.067558055487822, 3.06213900410063, 3.0560538105872608, 3.0491483001293838, 3.0412196910423126,
# 3.03205602161861, 3.0214126348802948, 3.0089840335051856, 2.9943879057703007, 2.977219460035125, 2.9571692540911165,
# 2.9340911022088374]

def test_inner_loop():
    x = ystl().data
    stl = STL(x)
    trend = [0]*stl.length
    ni = 2
    trend_i, season_i = stl.inner_loop(x, trend)
    print(trend_i)
    print(season_i)
# [103.76759812692383, 102.20164037269491, 99.738328772511, 99.62958843004897, 98.2223414270767, 96.79183156477477, 96.53564693981045, 97.75621973426932,
# 99.36651326823953, 99.76874293165153, 98.26840677853927, 95.5474021764428, 92.89262740821509, 90.76571673210684, 88.66649746752341, 86.13674183015392,
# 83.2122625967781, 80.24603476363518, 77.55473379197005, 75.16664415298915, 72.9937418115444, 71.4692646445855, 71.16668204417813, 71.94585155934128,
# 73.23464587263436, 74.33493364446744, 74.97696990580846, 77.69157673072425, 85.67355032146186, 97.9056209327276, 109.50081442747407, 115.65118651916113,
# 114.92302464599325, 110.21141633508216, 105.57688065472742, 102.973535785042, 103.73671137632715, 109.04560034616493]

def test_outer_loop():
    x = ystl().pet
    stl = STL(x)
    trend, season, residuals = stl.outer_loop()
    pet_stl = pd.DataFrame({"pet": x, "trend": trend, "season": season, "residuals": residuals})
    pet_stl.index.name = "time"
    file_name = r"D:\minio\waterism\datasets-origin\camels\camels_ystl\pet_stl.csv"
    pet_stl.to_csv(file_name, sep=" ")
    print(pet_stl)
# PASSED                           [100%]
# time  pet     trend    season  residuals
# 0     1.20  1.733627 -0.533627        0.0
# 1     1.30  1.728555 -0.428555        0.0
# 2     0.90  1.723637 -0.823637        0.0
# 3     0.55  1.718873 -1.168873        0.0
# 4     0.85  1.714265 -0.864265        0.0
# ...    ...       ...       ...        ...
# 5835  0.65  1.354457 -0.704457        0.0
# 5836  0.55  1.354057 -0.804057        0.0
# 5837  0.55  1.353730 -0.803730        0.0
# 5838  0.50  1.353479 -0.853479        0.0
# 5839  0.60  1.353301 -0.753301        0.0
#
# [5840 rows x 4 columns]


def test_season_post_smoothing():
    x = ystl().pet
    stl = STL(x)
    trend, season, residuals = stl.outer_loop()
    post_season = stl.season_post_smoothing(season)
    pet_post_season = pd.DataFrame({"pet": x, "trend": trend, "season": season, "residuals": residuals, "post_season": post_season})
    pet_post_season.index.name = "time"
    file_name = r"D:\minio\waterism\datasets-origin\camels\camels_ystl\pet_post_season.csv"
    pet_post_season.to_csv(file_name, sep=" ")
    print(pet_post_season)
# PASSED                [100%]
# time  pet     trend    season  residuals  post_season
# 0     1.20  1.733627 -0.533627        0.0    -0.533627
# 1     1.30  1.728555 -0.428555        0.0    -0.428555
# 2     0.90  1.723637 -0.823637        0.0    -0.982103
# 3     0.55  1.718873 -1.168873        0.0    -0.905982
# 4     0.85  1.714265 -0.864265        0.0    -0.733111
# ...    ...       ...       ...        ...          ...
# 5835  0.65  1.354457 -0.704457        0.0    -0.767987
# 5836  0.55  1.354057 -0.804057        0.0    -0.822173
# 5837  0.55  1.353730 -0.803730        0.0    -0.818743
# 5838  0.50  1.353479 -0.853479        0.0    -0.853479
# 5839  0.60  1.353301 -0.753301        0.0    -0.753301
#
# [5840 rows x 5 columns]


def test_decomposition():
    x = ystl().pet
    stl = STL(x)
    decomposition = stl.decomposition()
    print(decomposition)
# PASSED                        [100%]
# time   pet     trend    season  residuals  post_season  post_residuals
# 0      1.20  2.068379 -0.936312   0.067933    -0.942225        0.073846
# 1      1.30  2.069912 -0.935473   0.165561    -1.037623        0.267711
# 2      0.90  2.072459 -1.073452  -0.099007    -1.095608       -0.076851
# 3      0.55  2.075081 -1.211102  -0.313978    -1.113028       -0.412053
# 4      0.85  2.077760 -1.171382  -0.056378    -1.064984       -0.162776
# ...     ...       ...       ...        ...          ...             ...
# 11675  0.65  1.359806 -1.294569   0.584763    -1.223364        0.513557
# 11676  0.55  1.360058 -1.292879   0.482821    -1.315679        0.505621
# 11677  0.55  1.361060 -1.312365   0.501305    -1.336875        0.525815
# 11678  0.50  1.362803 -1.346961   0.484158    -1.307117        0.444314
# 11679  0.60  1.364383 -1.219888   0.455505    -1.303893        0.539510
#
# [11680 rows x 6 columns]

# PASSED                        [100%]
# time   pet     trend    season  residuals  post_season  post_residuals
# 0      1.20  2.100204 -1.085143   0.184939    -1.189222        0.289018
# 1      1.25  2.098870 -1.078370   0.229499    -1.162464        0.313594
# 2      0.85  2.097530 -1.220867  -0.026664    -1.209329       -0.038201
# 3      0.30  2.096184 -1.345620  -0.450564    -1.246498       -0.549686
# 4      0.25  2.094830 -1.301346  -0.543484    -1.209900       -0.634930
# ...     ...       ...       ...        ...          ...             ...
# 10945  0.30  2.004662 -1.400534  -0.304128    -1.331369       -0.373293
# 10946  0.25  2.002688 -1.410136  -0.342552    -1.437330       -0.315358
# 10947  0.35  2.000708 -1.455743  -0.194965    -1.473970       -0.176738
# 10948  0.65  1.998721 -1.501794   0.153073    -1.422504        0.073783
# 10949  0.65  1.996728 -1.363286   0.016558    -1.326743       -0.019986
#
# [10950 rows x 6 columns]

def test_moving_average_smoothing_start_end():
    x = ystl().pet
    stl = STL(x)
    xi = ["x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16",
          "x17"]
    y = [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]  # 18
    result = stl.moving_average_smoothing(7, xi, y)
    print(xi)
    print(y)
    print(result)
# PASSED   [100%]
# ['x3', 'x2', 'x1', 'x0', 'x1', 'x2', 'x3']
# ['x4', 'x3', 'x0', 'x1', 'x2', 'x3', 'x4']
# ['x5', 'x0', 'x1', 'x2', 'x3', 'x4', 'x5']
# ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6']
# ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7']
# ['x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8']
# ['x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9']
# ['x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10']
# ['x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11']
# ['x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12']
# ['x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13']
# ['x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14']
# ['x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15']
# ['x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16']
# ['x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17']
# ['x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x12']
# ['x13', 'x14', 'x15', 'x16', 'x17', 'x14', 'x13']
# ['x14', 'x15', 'x16', 'x17', 'x16', 'x15', 'x14']
# ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17']
# [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]
# [4.428571428571429, 6.428571428571429, 6.428571428571429, 7.0, 9.285714285714286, 10.714285714285714, 13.0,
# 15.285714285714286, 16.714285714285715, 19.0, 21.285714285714285, 22.714285714285715, 25.0, 27.285714285714285,
# 28.714285714285715, 29.285714285714285, 30.142857142857142, 31.285714285714285]

def test_sample_loess():
    x = ystl().pet
    stl = STL(x)
    xx = ["x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16",
          "x17"]
    y = [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]  # 18
    result = stl.loess(7, xx, y)
    print(xx)
    print(y)
    print(result)
# PASSED                         [100%]
# ['x3', 'x2', 'x1', 'x0', 'x1', 'x2', 'x3']
# ['x4', 'x3', 'x0', 'x1', 'x2', 'x3', 'x4']
# ['x5', 'x0', 'x1', 'x2', 'x3', 'x4', 'x5']
# ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6']
# ['x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7']
# ['x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8']
# ['x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9']
# ['x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10']
# ['x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11']
# ['x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12']
# ['x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13']
# ['x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14']
# ['x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15']
# ['x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16']
# ['x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17']
# ['x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x12']
# ['x13', 'x14', 'x15', 'x16', 'x17', 'x14', 'x13']
# ['x14', 'x15', 'x16', 'x17', 'x16', 'x15', 'x14']
# ['x0', 'x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17']
# [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]
# [3.4513004536635856, 3.8619024696220405, 5.138637258763287, 6.999999999999991, 8.861362741236697, 11.13863725876328,
# 12.999999999999984, 14.86136274123669, 17.138637258763275, 18.999999999999982, 20.861362741236686, 23.138637258763268,
# 24.999999999999975, 26.861362741236682, 29.138637258763257, 30.99999999999997, 31.86082301285134, 33.625326389800556]


def test_negative():
    x = ystl().pet
    stl = STL(x)
    xx = [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]
    result = stl._negative(xx)
    print(xx)
    print(result)
# PASSED                             [100%]
# [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]
# [-1, -5, -3, -7, -11, -9, -13, -17, -15, -19, -23, -21, -25, -29, -27, -31, -35, -33]

def test_decomposition_streamflow():
    x = ystl().streamflow
    stl = STL(x)
    decomposition = stl.decomposition()
    print(decomposition)
# PASSED                   [100%]
# time   pet       trend      season  residuals  post_season  post_residuals
# 0      48.5  322.745005 -238.268504 -35.976502  -248.082386      -26.162619
# 1      47.4  322.809063 -238.870528 -36.538534  -241.358789      -34.050274
# 2      50.2  322.872273 -239.819103 -32.853171  -237.357680      -35.314593
# 3      50.0  322.934648 -240.002989 -32.931659  -236.624741      -36.309908
# 4      50.8  322.996200 -233.410477 -38.785723  -236.708079      -35.488121
# ...     ...         ...         ...        ...          ...             ...
# 10945  13.6  225.195807 -255.380137  43.784330  -256.012730       44.416923
# 10946  19.5  226.128116 -253.914401  47.286285  -255.734034       49.105918
# 10947  22.0  227.066557 -254.376233  49.309676  -255.913882       50.847325
# 10948  20.3  228.011035 -256.332345  48.621310  -254.327869       46.616834
# 10949  19.9  228.961454 -256.947772  47.886318  -250.364312       41.302858
#
# [10950 rows x 6 columns]

def test_decomposition_prcp():
    x = ystl().prcp
    stl = STL(x)
    decomposition = stl.decomposition()
    print(decomposition)
# PASSED                   [100%]
# time   pet     trend    season  residuals  post_season  post_residuals
# 0      0.19  3.384192 -3.311447   0.117256    -3.169286       -0.024905
# 1      0.26  3.385565 -3.293507   0.167942    -3.068149       -0.057416
# 2      0.07  3.386934 -2.538321  -0.778613    -2.926613       -0.390321
# 3      1.15  3.388300 -2.885097   0.646797    -2.902918        0.664619
# 4      0.48  3.389662 -2.905025  -0.004637    -2.962489        0.052827
# ...     ...       ...       ...        ...          ...             ...
# 10945  0.63  3.008984 -2.718110   0.339127    -2.790925        0.411942
# 10946  0.26  3.014923 -3.168953   0.414030    -2.898406        0.143483
# 10947  0.11  3.020894 -3.294478   0.383583    -3.058642        0.147748
# 10948  2.04  3.026898 -2.692003   1.705105    -3.188161        2.201263
# 10949  0.00  3.032933 -3.360406   0.327473    -3.211105        0.178172
#
# [10950 rows x 6 columns]
