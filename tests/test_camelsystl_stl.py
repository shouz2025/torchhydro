
import pandas as pd
from hydrodataset import CamelsYstl
from torchhydro.datasets.mi_stl import STL


def test_dataset():
    camelsystl = CamelsYstl()
    basin = camelsystl.gage
    print(basin)

class ystl():
    def __init__(self):
        self.datasource = CamelsYstl()
        self.basin = ["1000",]
        self.time_range = ["1990-01-01","1994-01-01"]
        self.var_list = ["streamflow", "discharge_vol1", "discharge_vol2", "discharge_vol3",]
        self.data = None
        # self.read_data()
        self.pet = None
        self.pet_list = ["pet"]
        self.read_pet()

    def read_data(self):
        data = self.datasource.read_ts_xrdataset(
            self.basin,
            self.time_range,
            self.var_list,
        )
        data1 = data.streamflow.to_dataframe()
        data2 = data.discharge_vol1.to_dataframe()
        data3 = data.discharge_vol2.to_dataframe()
        data4 = data.discharge_vol3.to_dataframe()
        data1.drop(axis=0, index=("1000","1992-02-29"), inplace=True)
        data2.drop(axis=0, index=("1000","1992-02-29"), inplace=True)
        data3.drop(axis=0, index=("1000","1992-02-29"), inplace=True)
        data4.drop(axis=0, index=("1000","1992-02-29"), inplace=True)
        data1 = data1.values[:, 0]
        data2 = data2.values[:, 0]
        data3 = data3.values[:, 0]
        data4 = data4.values[:, 0]
        self.data = data1.tolist() + data2.tolist() + data3.tolist() + data4.tolist()
        # print(self.data)

    def read_pet(self):
        data = self.datasource.read_ts_xrdataset(
            self.basin,
            self.time_range,
            self.pet_list
        )
        data = data.pet.to_dataframe()
        data.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data = data.values[:, 0]
        self.pet = data.tolist() + data.tolist() + data.tolist() + data.tolist()

def test_read_data():
    x = ystl().data
    print(x)
# [165.8 164.1 158.8 ...  73.2  71.1  71.3]

def test_cycle_subseries():
    x = ystl().pet
    stl = STL(x)
    stl._cycle_subseries(x)
    print(stl.cycle_subseries)
# PASSED                      [100%]365

def test_weight_function():
    u = [1, 0.5, 0, 0.5, 1]
    n = 5
    w = []
    stl = STL()
    for i in range(n):
        w_i = stl.weight_function(u[i], 3)
        w.append(w_i)
    print(w)
# [0, 0.5625, 1, 0.5625, 0]
# [0, 0.669921875, 1, 0.669921875, 0]

def test_extend_subseries():
    x = ystl().data
    stl = STL(x)
    subseries = stl._cycle_subseries(x)
    extend_subseries = stl._extend_subseries(subseries)
    print(len(extend_subseries))
    print(len(extend_subseries[0]))
# 365
# 18

def test_de_extend_subseries():
    x = ystl().data
    stl = STL(x)
    subseries = stl._cycle_subseries(x)
    extend_subseries = stl._extend_subseries(subseries)
    de_extend_subseries = stl._de_extend_subseries(extend_subseries)
    print(len(de_extend_subseries))
    print(len(de_extend_subseries[0]))
# 365
# 16

def test_recover_series():
    x = ystl().data
    stl = STL(x)
    stl._cycle_subseries(x)
    print(len(stl.cycle_subseries))
    series = stl._recover_series(stl.cycle_subseries)
    print(series[:10])
# 365
# [165.8, 164.1, 158.8, 158.0, 156.2, 144.8, 137.6, 134.6, 130.3, 128.2]

def test_neighborhood_weight():
    x = ystl().pet
    stl = STL(x)
    i_focal = 3
    weight = stl._neighborhood_weight(13, i_focal=i_focal)
    print("i_focal = {}".format(i_focal))
    print(weight)
# i_focal = 0    PASSED                  [100%]
# [1.0, 0.9982648933890121, 0.9861753122936036, 0.9538536071777344, 0.8929533099629123, 0.7983059250581059, 0.669921875,
# 0.5148943256800089, 0.34847330183407005, 0.19322586059570312, 0.07477611946222622, 0.01212663499827988, 0]
# PASSED                  [100%]
# i_focal = 1
# [0.9977477485949877, 1.0, 0.9977477485949877, 0.9820766066349517, 0.9403696580985775, 0.8625726392333274,
# 0.7438883494722954, 0.5878823691852629, 0.40901258144152797, 0.23297940878706283, 0.09252419331977448,
# 0.01537976908411411, 0]
# PASSED                  [100%]
# i_focal = 2
# [0.976191488, 0.997002999, 1.0, 0.997002999, 0.976191488, 0.921167317, 0.8200258559999999, 0.669921875,
# 0.48189030400000005, 0.283593393, 0.11621427199999991, 0.01990251099999998, 0]
# PASSED                  [100%]i_focal = 3
# [0.8929533099629123, 0.9674381496121647, 0.9958904161106462, 1.0, 0.9958904161106462, 0.9674381496121647,
# 0.8929533099629123, 0.7590709148064702, 0.5687589331394396, 0.34847330183407005, 0.1484497016367144,
# 0.0263752519294353, 0]
# PASSED                  [100%]
# i_focal = 12
# [0, 0.01212663499827988, 0.07477611946222622, 0.19322586059570312, 0.34847330183407005, 0.5148943256800089,
# 0.669921875, 0.7983059250581059, 0.8929533099629123, 0.9538536071777344, 0.9861753122936036, 0.9982648933890121, 1.0]
# PASSED                  [100%]
# i_focal = 11
# [0, 0.01537976908411411, 0.09252419331977448, 0.23297940878706283, 0.40901258144152797, 0.5878823691852629,
# 0.7438883494722954, 0.8625726392333274, 0.9403696580985775, 0.9820766066349517, 0.9977477485949877,
# 1.0, 0.9977477485949877]
# PASSED                  [100%]
# i_focal = 10
# [0, 0.01990251099999998, 0.11621427199999991, 0.283593393, 0.48189030400000005, 0.669921875, 0.8200258559999999,
# 0.921167317, 0.976191488, 0.997002999, 1.0, 0.997002999, 0.976191488]

def test_moving_average_smoothing():
    x = ystl().pet
    stl = STL(x)
    xx = [1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31]  # 17
    result = stl.moving_average_smoothing(7, xx)
    print(xx)
    print(result)
# PASSED             [100%]
# [1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31]
# [5.0, 5.857142857142857, 7.285714285714286, 7.0, 9.285714285714286, 10.714285714285714, 13.285714285714286,
#  14.714285714285714, 17.285714285714285, 18.714285714285715, 21.285714285714285, 22.714285714285715, 25.571428571428573,
#  27.0, 27.571428571428573, 28.142857142857142, 30.428571428571427]

def test_repetitious_moving_average_smoothing():
    x = ystl().pet
    stl = STL(x)
    result1 = stl.moving_average_smoothing(41, x)
    result2 = stl.moving_average_smoothing(51, result1)
    result3 = stl.moving_average_smoothing(61, result2)
    pet_mas = pd.DataFrame({"pet": x, "result1": result1, "result2": result2, "result3": result3})
    pet_mas.index.name = "time"
    file_name = r"D:\minio\waterism\datasets-origin\camels\camels_ystl\pet_moving_average_smoothing.csv"
    pet_mas.to_csv(file_name, sep=" ")
    print(pet_mas)
# PASSED [100%]
# time  pet   result1   result2   result3
# 0     1.20  0.936585  0.978288  0.956109
# 1     1.30  0.939024  0.976997  0.955493
# 2     0.90  0.965854  0.972238  0.955219
# 3     0.55  1.006098  0.966308  0.955174
# 4     0.85  1.056098  0.961549  0.955298
# ...    ...       ...       ...       ...
# 5835  0.65  0.746341  0.757604  0.828124
# 5836  0.55  0.750000  0.751961  0.823865
# 5837  0.55  0.762195  0.747035  0.819445
# 5838  0.50  0.774390  0.743424  0.814950
# 5839  0.60  0.790244  0.740555  0.810459
#
# [5840 rows x 4 columns]

def test_weight_least_squares():
    x = ystl().pet
    stl = STL(x)
    xx = [1, 2, 3, 4, 5]
    y = x[:5]
    y_ = stl.weight_least_squares_fit(xx, y, degree=2)
    print(y_)
    # PASSED[100 %]
    # 0.7283553118882566

def test_sample_loess():
    x = ystl().pet
    stl = STL(x)
    y = [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]  # 18
    result = stl.loess(7, y)
    print(y)
    print(result)
# PASSED                         [100%]
# [1, 5, 3, 7, 11, 9, 13, 17, 15, 19, 23, 21, 25, 29, 27, 31, 35, 33]
# [1.360129590021107, 3.2375224121135506, 5.201212543814867, 6.999999999999991, 8.861362741236697, 11.13863725876328,
# 12.999999999999984, 14.86136274123669, 17.138637258763275, 18.999999999999982, 20.861362741236686, 23.138637258763268,
# 24.999999999999975, 26.861362741236682, 29.138637258763257, 30.97743212943223, 32.65893534046176, 34.41033858673253]

def test_loess():
    x = ystl().pet
    stl = STL(x)
    xx = x[:200]
    result = stl.loess(7, xx)
    print(xx)
    print(result)
# PASSED                                [100%]
# [1.2, 1.3, 0.9, 0.55, 0.85, 1.15, 0.9, 0.85, 0.7, 0.7, 0.8, 0.95, 1.05, 0.75, 0.6, 0.55, 1.1, 1.75, 1.3, 0.8, 1.05,
# 1.15, 1.25, 1.85, 1.8, 1.0, 0.75, 0.45, 0.35, 0.95, 1.05, 0.8, 1.1, 1.0, 0.7, 0.9, 0.9, 1.15, 1.0, 0.5, 0.65, 0.75,
# 0.95, 1.25, 0.85, 0.4, 0.35, 0.5, 0.9, 0.75, 0.35, 0.9, 0.9, 0.75, 1.3, 1.55, 1.55, 1.25, 1.0, 1.15, 0.9, 0.7, 1.15,
# 1.4, 1.35, 1.3, 1.75, 1.55, 1.15, 1.7, 1.2, 0.4, 0.5, 0.45, 1.05, 1.95, 2.1, 1.4, 1.0, 1.9, 2.2, 1.55, 1.4, 1.75,
# 1.65, 0.8, 0.75, 0.8, 0.9, 1.65, 1.2, 0.7, 1.7, 1.85, 1.4, 1.55, 1.45, 1.15, 0.9, 0.7, 1.25, 2.05, 1.9, 1.45, 0.95,
# 0.85, 1.5, 1.95, 1.55, 1.2, 1.6, 1.55, 1.25, 2.1, 2.65, 2.7, 1.55, 0.25, 0.8, 1.6, 1.0, 0.6, 2.2, 3.45, 3.65, 3.2,
# 2.85, 3.85, 2.65, 2.35, 4.15, 3.85, 3.75, 2.75, 1.9, 2.7, 3.65, 3.55, 2.35, 1.55, 1.3, 1.15, 1.3, 2.1, 3.05, 3.85,
# 3.1, 2.2, 2.4, 2.45, 3.3, 2.9, 2.25, 3.5, 4.0, 2.55, 1.05, 2.2, 3.95, 4.35, 3.8, 2.55, 1.8, 2.45, 3.55, 2.85, 2.2,
# 2.1, 1.75, 1.05, 1.05, 2.95, 3.85, 2.1, 1.25, 2.05, 3.15, 4.1, 3.05, 1.85, 1.8, 2.9, 4.35, 3.9, 3.25, 3.4, 2.55, 3.15,
# 4.55, 4.45, 3.4, 3.0, 3.5, 3.9, 4.35, 3.85, 2.3, 1.55, 1.5, 1.35]
# [1.2544991479640668, 1.1012191640967264, 0.9750276080301783, 0.8517234840196627, 0.8600053972838524,
# 0.9189393607865435, 0.9262636208481021, 0.839369538896911, 0.7684740273948616, 0.7656601461642808,
# 0.8278273744402134, 0.8921564337082248, 0.877407990897553, 0.7884578355433011, 0.7206898312254743,
# 0.8439069041471554, 1.095622365177307, 1.252859831079601, 1.2421564337082245, 1.122359342406604, 1.0565664522340366,
# 1.1850188904934855, 1.4132116756378263, 1.528265721412628, 1.4476244657418333, 1.171028255510334, 0.8022158038306119,
# 0.6063337855381962, 0.6395292693244637, 0.7567721325106115, 0.8952299680539135, 0.9760309541522607,
# 0.9524214841071861, 0.9187066940907026, 0.8882251688474603, 0.8837417764357498, 0.9540909952883162,
# 0.9573971963298462, 0.8652407626216203, 0.7566991962423227, 0.7022158038306121, 0.8006520502385008,
# 0.9356169678934536, 0.9354572374659011, 0.7971591323501516, 0.597605502312079, 0.5063337855381964, 0.5791044884979498,
# 0.6489285662188373, 0.6758982101439754, 0.7036256618966339, 0.7289717444896644, 0.8465340685309167,
# 1.0245211733986832, 1.2080762329876142, 1.3758442373054414, 1.3930411506425677, 1.28283007308214, 1.1475785158928118,
# 1.0124268813910393, 0.9478381690079201, 0.9817126894519559, 1.093720187300336, 1.2430411506425671, 1.3700107945677056,
# 1.4632116756378262, 1.4832954064738215, 1.4887174886584087, 1.4586013741192936, 1.2857168905810088,
# 1.0480438492844941, 0.7658198765918333, 0.5866096305048644, 0.761728881303516, 1.17694265750587, 1.552600177964493,
# 1.6669562236517714, 1.5819723425670635, 1.5634253789039119, 1.6611227809140354, 1.7563257625486828,
# 1.7332224702055328, 1.6332494566247995, 1.5195644246057776, 1.3426487535191733, 1.1001597304275512,
# 0.8806952285093277, 0.8978651554271868, 1.0816587166134224, 1.16224016454422, 1.2071915160532714, 1.294691698393942,
# 1.4020290869837924, 1.5510903972109156, 1.5888502326666945, 1.4758982101439753, 1.338690502239142, 1.1578165798725062,
# 1.0028678540691134, 1.0723863288258706, 1.3441125844237294, 1.6113284611906096, 1.6629979723717399,
# 1.4371807214855645, 1.202635187373272, 1.2123809315420173, 1.3986958995229952, 1.5469724155033318, 1.5628192785144321,
# 1.502348547838897, 1.444604904234678, 1.5059144019955348, 1.7199378582994167, 2.0280870275553196, 2.2716722827593223,
# 2.087172698496052, 1.5465610549501827, 1.1045184018204885, 0.9591476667687764, 1.0059333654252902, 1.151331086896269,
# 1.4979789360057165, 2.135278543608592, 2.8706278353974275, 3.258227940425652, 3.3156871325835455, 3.256152903592837,
# 3.07083570376205, 3.0508387670853176, 3.1885716161218287, 3.42148775400055, 3.6411367846775455, 3.37417472612431,
# 2.89351450702376, 2.6832304931950435, 2.8285064110979796, 3.0756305340393535, 2.982822050092626, 2.477567721325104,
# 1.8510984202004275, 1.430695228509327, 1.3619885344186238, 1.6417450731550756, 2.218501013814127, 2.841450410631187,
# 3.1124188584015258, 2.9865016848277954, 2.6721266757107616, 2.521628520998348, 2.675119250798649, 2.784412790104004,
# 2.8509117033536056, 3.017283707496386, 3.152627164383758, 3.0297944655959586, 2.597213105188683, 2.314737502370426,
# 2.60396627426954, 3.2987148629527483, 3.7112205155135403, 3.435430251046632, 2.8482845389698443, 2.534142196548653,
# 2.6154004930491705, 2.778338657680916, 2.7477572097501173, 2.4310606392134524, 2.005887415576267, 1.6352515571893262,
# 1.5246291190757502, 1.8873214884833613, 2.4184660044053485, 2.6302867854069083, 2.410790191530639, 2.1232790687497247,
# 2.337029014047523, 2.911434218779627, 3.156996776216938, 2.896480095692382, 2.4750215161991433, 2.4750485026184093,
# 2.9847322509591088, 3.4976704155908527, 3.6986419266844592, 3.495130045366355, 3.1686279229209484, 3.1919048035826263,
# 3.5101921141306685, 3.850251630125592, 3.9312852829197817, 3.691718086735806, 3.4658738494303636, 3.549401922600028,
# 3.8177680043178235, 3.8162771869939998, 3.35567371231018, 2.6301759222791095, 2.0601396156705087, 1.5265576006864854,
# 1.0414684499031166]

def test_inner_loop():
    x = ystl().data
    stl = STL(x)
    trend = [0]*stl.length
    ni = 2
    trend_i, season_i = stl.inner_loop(x, trend)
    print(trend_i)
    print(season_i)
# [103.76759812692383, 102.20164037269491, 99.738328772511, 99.62958843004897, 98.2223414270767, 96.79183156477477, 96.53564693981045, 97.75621973426932,
# 99.36651326823953, 99.76874293165153, 98.26840677853927, 95.5474021764428, 92.89262740821509, 90.76571673210684, 88.66649746752341, 86.13674183015392,
# 83.2122625967781, 80.24603476363518, 77.55473379197005, 75.16664415298915, 72.9937418115444, 71.4692646445855, 71.16668204417813, 71.94585155934128,
# 73.23464587263436, 74.33493364446744, 74.97696990580846, 77.69157673072425, 85.67355032146186, 97.9056209327276, 109.50081442747407, 115.65118651916113,
# 114.92302464599325, 110.21141633508216, 105.57688065472742, 102.973535785042, 103.73671137632715, 109.04560034616493]

def test_outer_loop():
    x = ystl().pet
    stl = STL(x)
    trend, season, residuals = stl.outer_loop()
    pet_stl = pd.DataFrame({"pet": x, "trend": trend, "season": season, "residuals": residuals})
    pet_stl.index.name = "time"
    file_name = r"D:\minio\waterism\datasets-origin\camels\camels_ystl\pet_stl.csv"
    pet_stl.to_csv(file_name, sep=" ")
    print(pet_stl)
# PASSED                           [100%]
# time  pet     trend    season  residuals
# 0     1.20  1.733627 -0.533627        0.0
# 1     1.30  1.728555 -0.428555        0.0
# 2     0.90  1.723637 -0.823637        0.0
# 3     0.55  1.718873 -1.168873        0.0
# 4     0.85  1.714265 -0.864265        0.0
# ...    ...       ...       ...        ...
# 5835  0.65  1.354457 -0.704457        0.0
# 5836  0.55  1.354057 -0.804057        0.0
# 5837  0.55  1.353730 -0.803730        0.0
# 5838  0.50  1.353479 -0.853479        0.0
# 5839  0.60  1.353301 -0.753301        0.0
#
# [5840 rows x 4 columns]


def test_season_post_smoothing():
    x = ystl().pet
    stl = STL(x)
    trend, season, residuals = stl.outer_loop()
    post_season = stl.season_post_smoothing(season)
    pet_post_season = pd.DataFrame({"pet": x, "trend": trend, "season": season, "residuals": residuals, "post_season": post_season})
    pet_post_season.index.name = "time"
    file_name = r"D:\minio\waterism\datasets-origin\camels\camels_ystl\pet_post_season.csv"
    pet_post_season.to_csv(file_name, sep=" ")
    print(pet_post_season)
# PASSED                [100%]
# time  pet     trend    season  residuals  post_season
# 0     1.20  1.733627 -0.533627        0.0    -0.533627
# 1     1.30  1.728555 -0.428555        0.0    -0.428555
# 2     0.90  1.723637 -0.823637        0.0    -0.982103
# 3     0.55  1.718873 -1.168873        0.0    -0.905982
# 4     0.85  1.714265 -0.864265        0.0    -0.733111
# ...    ...       ...       ...        ...          ...
# 5835  0.65  1.354457 -0.704457        0.0    -0.767987
# 5836  0.55  1.354057 -0.804057        0.0    -0.822173
# 5837  0.55  1.353730 -0.803730        0.0    -0.818743
# 5838  0.50  1.353479 -0.853479        0.0    -0.853479
# 5839  0.60  1.353301 -0.753301        0.0    -0.753301
#
# [5840 rows x 5 columns]


def test_decomposition():
    x = ystl().pet
    stl = STL(x)
    decomposition = stl.decomposition()
    print(decomposition)
# PASSED                        [100%]
# time  pet     trend    season  residuals  post_season  post_residuals
# 0     1.20  2.167342 -1.171280   0.203939    -1.155550        0.188209
# 1     1.30  2.171939 -1.144032   0.272093    -1.282339        0.410401
# 2     0.90  2.177711 -1.373502   0.095791    -1.330884        0.053174
# 3     0.55  2.180348 -1.623300  -0.007047    -1.342820       -0.287528
# 4     0.85  2.181532 -1.519833   0.188301    -1.374542        0.043010
# ...    ...       ...       ...        ...          ...             ...
# 5835  0.65  1.590599 -1.547294   0.606695    -1.490113        0.549514
# 5836  0.55  1.590505 -1.566559   0.526054    -1.523982        0.483477
# 5837  0.55  1.590418 -1.538035   0.497617    -1.532992        0.492574
# 5838  0.50  1.590336 -1.536042   0.445705    -1.516057        0.425721
# 5839  0.60  1.590261 -1.443966   0.453706    -1.471082        0.480822
#
# [5840 rows x 6 columns]
