import numpy as np
from hydrodataset import CamelsYstl
from torchhydro.datasets.arch import Arch


class Ystl(object):
    def __init__(self):
        self.datasource = CamelsYstl()
        self.basin = ["1000",]
        self.time_range = ["1990-01-01","1994-01-01"]
        self.var_list = ["streamflow", "discharge_vol1", "discharge_vol2", "discharge_vol3",]
        self.pet_list = ["pet"]
        self.prcp_list = ["prcp"]
        self.streamflow = None
        self.prcp = None
        self.pet = None
        self.read_streamflow()
        # self.read_prcp()
        # self.read_pet()

    def read_streamflow(self):
        data = self.datasource.read_ts_xrdataset(
            self.basin,
            self.time_range,
            self.var_list,
        )
        data1 = data.streamflow.to_dataframe()
        # data2 = data.discharge_vol1.to_dataframe()
        # data3 = data.discharge_vol2.to_dataframe()
        # data4 = data.discharge_vol3.to_dataframe()
        # data1.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data2.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data3.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data4.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data1 = data1.values[:, 0]
        # data2 = data2.values[:, 0]
        # data3 = data3.values[:, 0]
        # data4 = data4.values[:, 0]
        data_ = data1.tolist()  # + data2.tolist() + data3.tolist() + data4.tolist()
        self.streamflow = data_  # + data_

def test_cov():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    cov_xy = arch.cov(x, y)
    print(cov_xy)
# 112.0

def test_correlation_coefficient():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    cf_xy = arch.correlation_coefficient(x, y)
    print(cf_xy)
# 1.0

def test_autocorrelation_coefficient():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    acf_x = arch.autocorrelation_coefficient(x, 0)
    acf_y = arch.autocorrelation_coefficient(y, 0)
    print("acf_x")
    print(acf_x)
    print("acf_y")
    print(acf_y)
# acf_x  p=0
# 1.0
# acf_y
# 1.0
# acf_x  p=1
# 0.7692307692307692
# acf_y
# 0.7692307692307692
# acf_x  p=2
# 0.543956043956044
# acf_y
# 0.543956043956044

def test_autocorrelation_function():
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]  # 13
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(y)
    acf_y = arch.autocorrelation_function(y_non_stationary)
    print("acf_y")
    print(acf_y)
# acf_y
# [1.0, 0.7692307692307692, 0.543956043956044, 0.32967032967032966, 0.13186813186813184, -0.04395604395604396,
#  -0.1923076923076923, -0.30769230769230776, -0.38461538461538464, -0.4175824175824176]
# acf_dy2_c
# [1.0, -0.5960416098150293, 0.111698496707662, -0.06880685254392677, 0.17321804418548292, -0.19516009029761072,
#  0.16037091521814686, -0.14717151108798507, 0.09148199497371326, -0.05718529339282361, 0.11915136062625384,
#  -0.12521906029953708, 0.05384138032584958, -0.018906656246106136, -0.08831738709647677, 0.13045032705299528,
#  -0.010225831557118223, -0.020405294917159873, -0.023623189255426877, -0.011514105157009678, 0.07120768963528913,
#  -0.06528399580755191, 0.01237775499521506, -0.003962009808961563, -0.08447905915868731, 0.2038958395839591,
#  -0.10257220420968689, -0.09154028145732214, 0.07001320217740707, 0.06760588026342865]
# acf_y_non_stationary
# [1.0, 0.9093852426253098, 0.8585818210888161, 0.7690862578943162, 0.7184427212407067, 0.6307058917579343,
#  0.5808617795187465, 0.4955232232792389, 0.4471180749860101, 0.3648173315213047, 0.31849068670557196,
#  0.23986729554720607, 0.19625869374050686, 0.1219521944200176, 0.0817011751538892, 0.012351107202813977,
#  -0.023902789991206336, -0.08765688704133025, -0.11927412263170517, -0.1767927092493405, -0.20313374370453277,
#  -0.2537772803581421, -0.2742025741466144, -0.3173315213046607, -0.3312015348948757, -0.36617635302582147,
#  -0.3728515468862419, -0.39903269645854983, -0.3978735310576385, -0.4146214725397714, -0.4049884083459909,
#  -0.41166360220641146]

def test_partial_autocorrelation_function():
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]  # 13
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(y)
    pacf_y, R = arch.partial_autocorrelation_function(y_non_stationary)
    print("pacf_y")
    print(pacf_y)
# pacf_y
# [-1.41589952 -0.97179202 -0.82417482 -0.57949954 -0.72589031 -0.64360314
#  -0.75171309 -0.75216587 -0.70296291 -0.61033239 -0.67967445 -0.74347656
#  -0.69230843 -0.91568265 -0.64414081 -0.50915886 -0.54006344 -0.56863674
#  -0.75968942 -0.51872959 -0.62413371 -0.64885544 -0.59477203 -0.88639147
#  -0.38186774 -0.23524706 -0.58127981 -0.4632288  -0.00676259]
# pacf_dy2_c
# [-0.8084327  -0.36499808 -0.21490139  0.01069482 -0.0839855  -0.02873561
#  -0.10368651 -0.10658352 -0.07620049 -0.01468218 -0.05208026 -0.09165646
#  -0.06608699 -0.1878643  -0.05111093  0.01391817 -0.0087577  -0.02521697
#  -0.10898492 -0.01654379 -0.05496828 -0.06328793 -0.04220062 -0.13819865
#   0.03570853  0.02533475 -0.10350736 -0.05818321  0.03272906]
# pacf_y_non_stationary
# [ 8.17385665e-01  2.56732820e-01 -1.74700260e-01  8.54056480e-02
#  -8.70211536e-02  4.24896373e-02 -5.68942780e-02  2.44981178e-02
#  -4.21706272e-02  1.50644555e-02 -3.35595443e-02  9.46875623e-03
#  -2.79290119e-02  5.89181477e-03 -2.39478959e-02  3.49876563e-03
#  -2.09590426e-02  1.85944361e-03 -1.86011352e-02  7.33904076e-04
#  -1.66578562e-02 -1.87265419e-05 -1.49895922e-02 -4.82962959e-04
#  -1.34991536e-02 -7.08255747e-04 -1.21127765e-02 -7.19714774e-04
#  -1.07682331e-02 -5.22846455e-04 -9.40592578e-03]

def test_autocorrelation_function_streamflow():
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(y)
    acf_y = arch.autocorrelation_function(y)
    print("acf_y")
    print(acf_y)
# acf_y_60
# [1.0, 0.8587438388522092, 0.6416783213389374, 0.5101205712766372, 0.45446785417267394, 0.430136263420801,
#  0.40207725891080465, 0.3553080988720061, 0.29041602390598137, 0.2233874067489399, 0.1651394837984072,
#  0.11652331741896974, 0.08489477047685076, 0.04841780532413019, 0.04439226046375843, 0.05716602994126686,
#  0.06483641215798262, 0.03676010713699499, -0.05285223387201344, -0.16489815537171662, -0.24111416440613276,
#  -0.29087634911272925, -0.3306303690042141, -0.36718441828290577, -0.4036542738362469, -0.4393005539852559,
#  -0.47170272478876923, -0.4989340667328899, -0.5202596908149623, -0.534099030073374, -0.5427060986296321,
#  -0.5540356636611177, -0.5631954697088963, -0.5764546808338563, -0.5923837065483771, -0.6019117691033438,
#  -0.6099829841667701, -0.6260829563514713, -0.6471880429275858, -0.669294567128286, -0.6871166446146172,
#  -0.6971315510286307, -0.6927374725950876, -0.6705063891033126, -0.6431867233068411, -0.6335700068917359]

def test_partial_autocorrelation_function_streamflow():
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(y)
    pacf_y, R = arch.partial_autocorrelation_function(y)
    print("pacf_y")
    print(pacf_y)
# R
# 1	0.85874384	0.64167832	0.51012057	0.45446785	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.85874384	1	0.64167832	0.51012057	0.45446785	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.64167832	0.85874384	1	0.51012057	0.45446785	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.51012057	0.64167832	0.85874384	1	0.45446785	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.45446785	0.51012057	0.64167832	0.85874384	1	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.47170272	-0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.49893407	-0.52025969	-0.53409903
# -0.49893407	-0.47170272	-0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.52025969	-0.53409903
# -0.52025969	-0.49893407	-0.47170272	-0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.53409903
# -0.53409903	-0.52025969	-0.49893407	-0.47170272	-0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1
# pacf_y
# [ 1.00000000e+00 -2.25785102e-17 -1.33194237e-16 -7.77101907e-17
#   2.00333456e-16 -4.95480393e-17  6.47810798e-18  3.38271078e-17
#  -8.67361738e-18 -7.72765098e-17 -4.99275100e-17 -7.74662452e-17
#   3.36102673e-17 -2.19550940e-17 -1.61112443e-16  4.73254248e-17
#   4.72170046e-17  2.00387667e-16 -4.97919848e-17  6.12845278e-17
#   3.36644775e-17 -2.15485182e-17 -7.76830857e-17  1.99926881e-16
#   1.95427442e-17 -1.32191350e-16 -4.93854090e-17  8.99616753e-17
#  -2.16569384e-17  3.27700107e-17  9.00158854e-17  2.14129929e-16
#   7.51081055e-17 -8.29414662e-18  5.48064198e-17  8.91214186e-17
#   8.90943135e-17  3.70526092e-17 -8.05020113e-18  6.53502859e-17
#  -7.84149221e-17  4.71085844e-17 -2.54787511e-17  1.98137947e-17
#  -2.21719344e-17  5.10388173e-17  9.57350518e-17 -1.47993597e-17
#  -4.11996826e-18  3.31765865e-17  6.15826834e-17  5.85469173e-18
#  -3.54805161e-17  1.24683250e-17  4.09557371e-17  3.27971157e-17
#   3.40439482e-17 -2.53974359e-17 -2.89481980e-17  4.04949511e-17
#  -2.86500424e-17 -4.94125140e-17 -8.59230222e-18 -8.21283146e-18
#   7.13947131e-17 -5.64056180e-17  6.17995238e-18 -3.26615904e-17
#  -2.88668828e-17  3.67544536e-17  1.13841228e-17  1.98951099e-17
#   6.09863722e-18 -5.65411433e-17 -2.22532496e-17  7.51623156e-17
#  -1.78893358e-18  5.69748242e-17 -1.32814766e-18  6.34800372e-17
#  -7.18554990e-17 -5.70019292e-17 -8.29414662e-18 -7.05544564e-17
#   3.93565389e-17 -1.00288701e-18  7.55688914e-17 -5.71103494e-17
#   5.43727390e-17  2.66713734e-17 -4.24465151e-17  1.98951099e-17
#  -5.00630353e-17  7.56231015e-17 -9.13169280e-17 -7.76288755e-17
#   5.33969570e-18 -4.95480393e-17 -2.48282297e-17 -1.87973552e-16
#   6.06340065e-17  3.37457926e-17 -4.97919848e-17  3.36102673e-17
#  -9.13982431e-17 -3.52907807e-17 -7.69783542e-18 -1.33302657e-16
#  -4.98732999e-17  1.44686780e-16 -6.35884574e-17 -3.56431464e-17
#   6.04442711e-18  8.22638398e-17 -2.20364092e-17  4.72712147e-17
#   1.96240593e-17  1.16768574e-16 -1.04408669e-16  1.92445886e-17
#   1.99764250e-17  5.58364119e-18  6.15826834e-17 -2.89753031e-17
#  -3.49384150e-17 -2.22532496e-17 -4.98732999e-17 -1.51517254e-17
#  -4.26091454e-17  4.75964754e-17  3.39355280e-17 -4.95751443e-17
#   1.98680048e-17 -7.73849301e-17  1.97324795e-17  1.92987987e-17
#  -6.33174069e-17  3.36644775e-17  6.39679282e-18 -2.22261445e-17
#  -3.61581425e-17 -7.77915059e-17  6.08237419e-17  1.44903620e-16
#  -1.04842350e-16 -6.34529321e-17 -7.75475604e-17  1.04164724e-16
#   8.90129984e-17 -2.03152382e-16  6.07153217e-18  1.44903620e-16
#   7.45660044e-17  1.25496401e-17  1.32001615e-16 -1.46773869e-16
#   1.02511315e-16 -1.88624073e-16  7.93635990e-17 -1.06604179e-16
#   3.32687437e-16 -1.31351093e-16 -2.68936349e-16  1.41515489e-16
#   3.55699628e-16 -3.95516953e-16  3.35560572e-17 -4.83418644e-16
#   1.97785581e-16  9.52200558e-17 -1.80194401e-16  1.15548847e-16
#   2.78531538e-16 -1.29155584e-16 -6.42660838e-17  2.52754631e-16
#  -3.76489204e-17  9.02056208e-17 -1.30863202e-16 -1.06089183e-16
#   9.00972005e-17  1.17337780e-16 -2.82353351e-16  1.01643954e-16
#  -4.67047191e-16  1.95969543e-17  3.64590086e-16  1.74908915e-16
#  -2.12639151e-16  1.82633856e-16  1.92716936e-17 -1.78486783e-16
#   2.45869948e-16  1.35606587e-16 -2.57877487e-16  2.17572271e-16
#  -1.48698328e-16 -1.07498645e-16 -2.72161850e-16  1.93611403e-16
#  -1.11157828e-16 -7.88486030e-17 -2.44623115e-16  1.93231932e-16
#   4.83852325e-16 -1.73553663e-16 -1.68213967e-16  1.96240593e-16
#   2.34296089e-16 -4.92715677e-16  6.19350491e-17  9.83642421e-17
#   1.88271707e-16 -2.51778850e-16  1.96864009e-16 -2.68123197e-16
#  -8.11254276e-17  2.49502025e-16  6.85215773e-17  3.29326410e-17
#  -2.26896410e-16  1.22514845e-17 -8.18843691e-17  8.76577456e-17
#   1.86536984e-16 -3.22821197e-17 -3.21194894e-17 -2.92273801e-16
#   4.61870125e-17  6.76542156e-17  1.45364406e-16 -5.53485209e-17
#   3.92074611e-16 -9.26721807e-17 -4.44441576e-16  1.68186862e-16
#  -1.31730564e-16  1.82145965e-16  6.15555783e-17 -5.27193306e-17
#  -1.38777878e-17 -1.73472348e-17 -7.97972799e-17]

# pacf_y_60
# [ 1.00000000e+00  1.31838984e-16  4.37150316e-16  1.04083409e-16
#  -5.13478149e-16  2.35922393e-16  1.59594560e-16  4.16333634e-17
#   7.63278329e-17  3.46944695e-17  4.16333634e-17 -7.63278329e-17
#   2.08166817e-17  0.00000000e+00  6.93889390e-18 -3.46944695e-17
#  -2.77555756e-17  2.08166817e-17  6.24500451e-17 -6.93889390e-17
#   9.02056208e-17  6.93889390e-18  7.63278329e-17 -1.17961196e-16
#  -1.31838984e-16  2.98372438e-16 -6.93889390e-17 -3.46944695e-17
#   1.52655666e-16 -1.38777878e-17  3.12250226e-16 -1.52655666e-16
#   1.94289029e-16 -2.08166817e-16  1.17961196e-16 -2.15105711e-16
#  -9.71445147e-17  8.32667268e-17  1.38777878e-16  3.46944695e-17
#  -1.24900090e-16  6.93889390e-18 -9.71445147e-17  4.16333634e-17
#   1.11022302e-16  1.60461922e-17]

def test_ar_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 17
    y_42 = [1, 1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881, 2.357947691, 2.59374246,
            2.853116706, 3.138428377, 3.452271214, 3.797498336, 4.177248169, 4.594972986, 5.054470285, 5.559917313,
            6.115909045, 6.727499949, 7.400249944, 8.140274939, 8.954302433, 9.849732676, 10.83470594, 11.91817654,
            13.10999419, 14.42099361, 15.86309297, 17.44940227, 19.1943425, 21.11377675, 23.22515442, 25.54766986,
            28.10243685, 30.91268053, 34.00394859, 37.40434344, 41.14477779, 45.25925557, 49.78518112]
    arch = Arch(x)
    phi = arch.ar_least_squares_estimation(y_42, 1)
    print("phi")
    print(phi)
# phi
# (array([1.1]), 1.0000000000000004)

def test_adf_least_squares():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 17
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    arch = Arch(x)
    rho, s_rho = arch.adf_least_squares_estimation(dy2_c, 3)
    print("rho")
    print(rho)
    print("s_rho")
    print(s_rho)
# rho
# -3.1784358068686576
# s_rho
# 0.40833351710609556

def test_tau_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 19
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    arch = Arch(x)
    t_y = arch.tau_statistic(dy2_c, 3)
    print("t_y")
    print(t_y)
# t_y
# -7.7839209217861445

def test_get_tau_critical():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    case = "case 1"
    p = 0.05
    n_sample = 42
    t_critical = arch.get_tau_critical(case, n_sample, p)
    print("t_critical")
    print(t_critical)
# t_critical
# -1.95

def test_adf_test():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    arch = Arch(x)
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(dy2_c, 3, case, significance_level)
    print("b_stability")
    print(b_stability)
# b_stability
# True

def test_integrated_one_degree():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(x)
    y_integrated, y_trend = arch.integrate_one_degree(y_non_stationary)
    p = 4
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(y_integrated, p, case, significance_level)
    print("y_integrated")
    print(y_integrated)
    print("y_trend")
    print(y_trend)
    print("b_stability")
    print(b_stability)
# y_integrated
# [-1.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6.
#  -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6.
#  -2.  6. -2.  6. -2.  6.]
# y_trend
# [ 0. -1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31.
#  37. 35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67.
#  73. 71. 77. 75. 81. 79.]
# b_stability
# False
# y_integrated
# [ 6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.
#   6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.
#   6. -2.  6. -2.  6.]
# y_trend
# [-1. -1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31.
#  37. 35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67.
#  73. 71. 77. 75. 81. 79.]
# b_stability
# False

def test_integrate_d_degree():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_non_stationary_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(x)
    y_integrated, y_trend = arch.integrate_d_degree(y_non_stationary_42, 2)
    p = 1
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(y_integrated, p, case, significance_level)
    print("y_integrated")
    print(y_integrated)
    print("y_trend")
    print(y_trend)
    print("b_stability")
    print(b_stability)
# y_non_stationary_42 p=1
# y_integrated
# [-8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8.
#  -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8.
#  -8.  8. -8.  8.]
# y_trend
# [-1.  5. 11.  1. 15.  5. 19.  9. 23. 13. 27. 17. 31. 21. 35. 25. 39. 29.
#  43. 33. 47. 37. 51. 41. 55. 45. 59. 49. 63. 53. 67. 57. 71. 61. 75. 65.
#  79. 69. 83. 73. 87. 77.]
# b_stability
# False

def test_ar_one_step():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    x = [-1, 5, 3]
    phi = [1,  1, -1]
    y_ar = arch.ar_one_step(x, phi)
    print("y_ar")
    print(y_ar)
# y_ar
# 1.0

def test_ma_one_step():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    theta = [0.5, 0.5]
    e_ = [0.2, -0.6, 0.4]
    y_ma = arch.ma_one_step(e_, theta)
    print("y_ma")
    print(y_ma)
# y_ma
# 0.20000000000000004

def test_arma():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_ar = [1, 1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881, 2.357947691, 2.59374246,
            2.853116706, 3.138428377, 3.452271214, 3.797498336, 4.177248169, 4.594972986, 5.054470285, 5.559917313,
            6.115909045, 6.727499949, 7.400249944, 8.140274939, 8.954302433, 9.849732676, 10.83470594, 11.91817654,
            13.10999419, 14.42099361, 15.86309297, 17.44940227, 19.1943425, 21.11377675, 23.22515442, 25.54766986,
            28.10243685, 30.91268053, 34.00394859, 37.40434344, 41.14477779, 45.25925557, 49.78518112]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_ma = [1.7353783, -1.36841262, -0.166777075, -0.753366275, 1.45740841, -2.678726045, 2.95109758, -1.57809631,
            0.75515902, -0.35337346, 1.6423096, -2.73567821, 0.763169625, -0.16732928, 1.381313085, -1.61125952,
            0.433033895, -0.736127845, 0.53665943, 0.617224805, -1.336510315, 1.75054977, 0.384745335, 0.10721545,
            0.70512525, -1.078639365, 0.27449017, -0.818807845, 0.255513105, 0.71981598, -0.901322015, 0.004593315,
            -0.433279465, -0.44610282, -0.19312684, 0.378474935, -1.05546158, 0.848587345, 1.5981108, -0.03234046,
            -0.50734116, -0.736194715]
    y_ma_3 = [1.7353783, -0.50072347, -0.41713881, -0.910187173, 1.398521383, -2.249336914, 2.413901882,
              -0.866470275, 0.473005864, -0.32290873, 1.5936451, -2.43638975, 0.072553639, 0.022901334,
              1.563896432, -1.286556336, 0.013603894, -0.675115471, 0.494459221, 0.807378766, -1.151707475,
              1.398538223, 0.764429098, 0.157547476, 0.499730309, -1.100229409, -0.10377932, -0.807829208,
              0.150206757, 0.854577979, -0.659199656, -0.224124415, -0.438436862, -0.446123873, -0.196161369,
              0.470880813, -0.850328004, 0.683679514, 1.858619176, 0.353364577, -0.725437628, -1.100054169]
    y_arma_ = [1, -0.26841262, -0.462030957, -1.261600327, 0.06964805, -2.60211319, 0.088773071, -1.480445931,
              -0.873331504, -1.314038115, 0.196867674, -2.519123769, -2.00786652, -2.375982452, -1.232267612,
              -2.966753893, -2.830395388, -3.849562771, -3.697859618, -3.450420775, -5.131973167, -3.894620714,
              -3.89933745, -4.182055745, -3.89513607, -5.363289042, -5.625127776, -7.006448398, -7.451580133,
              -7.476922166, -9.125936397, -10.03393672, -11.47060986, -13.06377366, -14.56327787, -15.64113072,
              -18.26070538, -19.23818857, -19.56389662, -21.55262675, -24.21523058, -27.37294835]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    y_arma_3 = [1.7353783, -0.50072347, -0.41713881, -0.92181951, 0.36780299, -1.743817484, 0.237778149, -0.182590216,
                -0.1241625, -0.375413807, 1.169004369, -1.100234682, -1.446588147, -1.114497817, 0.407219526,
                -0.905032923, -1.28627579, -1.82756835, -1.43961739, -0.667941851, -1.964033703, -0.916233958,
                0.015790115, -0.034643347, 0.275217813, -0.787403122, -1.031894986, -1.730389506, -1.704323326,
                -0.880478776, -1.632939545, -2.185126825, -2.691584215, -3.296429054, -3.72094185, -3.501186254,
                -4.616730324, -4.438674962, -2.800814468, -2.76314241, -4.092466378, -5.609301596]
    arch = Arch(x)
    phi = [1.1, -0.2, 0.2]
    theta = [0.3, 0.2, 0.1]
    # phi = [1.1]
    # theta = [0.5]
    p = 3
    q = 3
    y_arma = arch.arma(x=y_arma_3, e=e, phi=phi, theta=theta, p=p, q=q)
    error = np.array(y_arma_3) - y_arma
    print("y_arma")
    print(y_arma)
    print("error")
    print(error)
# y_ar
# [ 1.          1.1         1.21        1.331       1.4641      1.61051
#   1.771561    1.9487171   2.14358881  2.35794769  2.59374246  2.85311671
#   3.13842838  3.45227121  3.79749834  4.17724817  4.59497299  5.05447028
#   5.55991731  6.11590904  6.72749995  7.40024994  8.14027494  8.95430243
#   9.84973268 10.83470594 11.91817653 13.10999419 14.42099361 15.86309297
#  17.44940227 19.1943425  21.11377675 23.22515443 25.54766986 28.10243685
#  30.91268054 34.00394858 37.40434345 41.14477778 45.25925557 49.78518113]
# error
# [ 0.00000000e+00  0.00000000e+00 -2.22044605e-16  0.00000000e+00
#  -2.22044605e-16  0.00000000e+00 -2.22044605e-16  0.00000000e+00
#  -4.44089210e-16  0.00000000e+00 -1.00000452e-10 -4.44089210e-16
#   4.00000033e-10 -7.00000058e-10  5.99999606e-10 -6.00000050e-10
#   9.99991201e-11  3.99999145e-10 -5.00000930e-10  7.00000058e-10
#  -5.00000930e-10  9.99991201e-11  5.99998273e-10  1.00000008e-10
#  -3.00001801e-10 -3.60000207e-09  5.99999872e-09 -4.00000033e-09
#   9.99998306e-10 -1.00000186e-09  3.00000025e-09  3.00000025e-09
#  -3.55271368e-15 -5.00000397e-09 -2.00000017e-09  4.00000033e-09
#  -5.00000397e-09  6.99999703e-09 -9.00000430e-09  6.00000050e-09
#   9.99996530e-10 -7.00000413e-09]
# y_ma  p=0,q=1
# [ 1.7353783  -1.36841262 -0.16677708 -0.75336627  1.45740841 -2.67872605
#   2.95109758 -1.57809631  0.75515902 -0.35337346  1.6423096  -2.73567821
#   0.76316962 -0.16732928  1.38131309 -1.61125952  0.4330339  -0.73612784
#   0.53665943  0.6172248  -1.33651031  1.75054977  0.38474534  0.10721545
#   0.70512525 -1.07863936  0.27449017 -0.81880785  0.25551311  0.71981598
#  -0.90132201  0.00459331 -0.43327947 -0.44610282 -0.19312684  0.37847494
#  -1.05546158  0.84858734  1.5981108  -0.03234046 -0.50734116 -0.73619472]
# error
# [ 0.00000000e+00  0.00000000e+00  5.55111512e-17  0.00000000e+00
#   0.00000000e+00  4.44089210e-16  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  5.55111512e-17  0.00000000e+00 -4.44089210e-16
#   0.00000000e+00  2.77555756e-17 -2.22044605e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  1.11022302e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00 -5.55111512e-17  1.38777878e-17
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  1.30104261e-17
#   5.55111512e-17  0.00000000e+00  2.77555756e-17  0.00000000e+00
#   0.00000000e+00  0.00000000e+00 -2.22044605e-16  1.38777878e-17
#   0.00000000e+00  1.11022302e-16]
# y_arma  p=1,q=1
# [  1.          -0.26841262  -0.46203096  -1.26160033   0.06964805
#   -2.60211319   0.08877307  -1.48044593  -0.8733315   -1.31403811
#    0.19686767  -2.51912377  -2.00786652  -2.37598245  -1.23226761
#   -2.96675389  -2.83039539  -3.84956277  -3.69785962  -3.45042077
#   -5.13197317  -3.89462071  -3.89933745  -4.18205575  -3.89513607
#   -5.36328904  -5.62512778  -7.0064484   -7.45158013  -7.47692217
#   -9.1259364  -10.03393672 -11.47060986 -13.06377367 -14.56327787
#  -15.64113072 -18.26070537 -19.23818857 -19.56389663 -21.55262674
#  -24.21523059 -27.37294835]
# error
# [ 0.00000000e+00 -1.11022302e-16  5.55111512e-17  7.00000058e-10
#  -2.99999872e-10  4.44089210e-16  1.24900090e-16  9.00000074e-10
#   1.00000008e-10 -5.99999828e-10  5.00000097e-10 -4.00000477e-10
#   9.00000519e-10  0.00000000e+00  2.00000017e-10  2.00000017e-10
#  -6.99999614e-10  8.00000066e-10  1.00000452e-10 -2.00000461e-10
#   5.00000041e-10 -3.00000025e-10  4.00000921e-10  0.00000000e+00
#  -4.99998709e-10  0.00000000e+00  2.00000017e-10  6.00000938e-10
#  -2.00000017e-10  3.00001801e-10  6.00000050e-10  1.70000192e-09
#  -2.99999847e-09  6.00000050e-09 -3.99999855e-09  2.00000372e-09
#  -8.00000066e-09  3.00000735e-09  6.99999703e-09 -7.99999711e-09
#   5.00000397e-09  3.00000025e-09]
# y_42 p=3,q=0
# [-1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31. 37.
#  35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67. 73.
#  71. 77. 75. 81. 79. 85.]
# error
# [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
#  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
# y_ma_3  p=0,q=3
# [ 1.7353783  -0.50072347 -0.41713881 -0.91018717  1.39852138 -2.24933691
#   2.41390188 -0.86647027  0.47300586 -0.32290873  1.5936451  -2.43638975
#   0.07255364  0.02290133  1.56389643 -1.28655634  0.01360389 -0.67511547
#   0.49445922  0.80737877 -1.15170747  1.39853822  0.7644291   0.15754748
#   0.49973031 -1.10022941 -0.10377932 -0.80782921  0.15020676  0.85457798
#  -0.65919966 -0.22412442 -0.43843686 -0.44612387 -0.19616137  0.47088081
#  -0.850328    0.68367951  1.85861918  0.35336458 -0.72543763 -1.10005417]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   5.55111512e-17  5.89805982e-17 -2.22044605e-16  0.00000000e+00
#   5.03069808e-17  0.00000000e+00  5.55111512e-17  0.00000000e+00
#  -2.22044605e-16  2.22044605e-16 -1.11022302e-16  2.77555756e-17
#  -5.55111512e-17  0.00000000e+00  1.38777878e-17  0.00000000e+00
#   2.77555756e-17 -1.11022302e-16  0.00000000e+00  2.77555756e-17
#   0.00000000e+00  0.00000000e+00  2.77555756e-17 -5.55111512e-17
#   1.11022302e-16  0.00000000e+00 -2.22044605e-16  5.55111512e-17
#   1.11022302e-16  0.00000000e+00]
# y_arma  p=3,q=3
# [ 1.7353783  -0.50072347 -0.41713881 -0.92181951  0.36780299 -1.74381749
#   0.23777815 -0.18259022 -0.1241625  -0.37541381  1.16900437 -1.10023468
#  -1.44658815 -1.11449782  0.40721953 -0.90503292 -1.28627579 -1.82756835
#  -1.43961739 -0.66794185 -1.9640337  -0.91623396  0.01579011 -0.03464335
#   0.27521781 -0.78740312 -1.03189499 -1.73038951 -1.70432333 -0.88047878
#  -1.63293955 -2.18512682 -2.69158422 -3.29642905 -3.72094185 -3.50118625
#  -4.61673032 -4.43867496 -2.80081447 -2.76314241 -4.09246638 -5.6093016 ]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.11022302e-16
#   2.77555756e-16  1.00000008e-09 -5.99999994e-10  2.99999942e-10
#   2.00000086e-10  0.00000000e+00 -1.00000008e-10  6.99999836e-10
#  -5.99999828e-10  5.00000041e-10 -3.00000025e-10  4.00000033e-10
#  -1.00000008e-10  2.00000239e-10  6.00000050e-10 -1.11022302e-16
#   1.00000008e-10  1.00000563e-10  3.99999874e-10 -4.99999993e-10
#   2.99999969e-10  3.00000025e-10  2.00000239e-10 -3.99999811e-10
#   8.00000066e-10 -3.99999922e-10  6.00000272e-10 -5.00000041e-10
#   7.00000502e-10 -5.00000041e-10  4.00000033e-10  2.00000017e-10
#   2.00000905e-10 -4.00000033e-10  2.00000461e-10  2.00000461e-10
#  -2.00000017e-10  4.00000921e-10]

def test_integration():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_42_e = [2.62434536, 1.30041627, 0.375950045, -0.006054495, 1.79302332, -0.258324885, 2.36560341, 2.05991608,
              2.08202446, 2.268096861, 3.93116521, 1.524029966, 1.785940822, 2.907008264, 4.739240601, 3.644241619,
              3.872599141, 4.09039776, 5.163201853, 6.71983113, 5.918288374, 7.994664064, 9.614227514, 9.907592133,
              11.0018358, 10.60140606, 11.45342238, 12.11277965, 13.68522082, 16.2595044, 17.02291925, 18.45175859,
              20.22822728, 22.03636243, 24.45382091, 27.75414918, 29.78903788, 33.67970911, 39.18135347, 42.71672304,
              45.4384421, 48.80163439]
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    dy2_center = 0.117178035
    ty2 = [2.62434536, 1.30041627, -0.02351282, -0.54851618, -0.388059035, 3.592101135, -2.30967309, 4.989531705,
           1.75422875, 2.10413284, 2.454169262, 5.594233559, -0.883105278, 2.047851677, 4.028075707, 6.571472937,
           2.549242638, 4.100956663, 4.308196379, 6.236005947, 8.276460406, 5.116745619, 10.07103975, 11.23379096,
           10.20095675, 12.09607946, 10.20097632, 12.3054387, 12.77213692, 15.25766198, 18.83378799, 17.78633411,
           19.88059793, 22.00469597, 23.84449758, 26.87127939, 31.05447745, 31.82392658, 37.57038034, 44.68299784,
           46.2520926, 48.16016116]
    arch = Arch(x)
    d = 2
    dx_c, mean_dx, tx = arch.integration(x=y_42_e, d=d)
    error_dx_c = np.array(dy2_c) - dx_c
    error_tx = np.array(ty2) - tx
    print("dx_c")
    print(dx_c)
    print("error_dx_c")
    print(error_dx_c)
    print("tx")
    print(tx)
    print("error_tx")
    print(error_tx)
    print("mean_dx")
    print(mean_dx)
# dx_c
# [0.28228483050000025, 0.4252836505000001, 2.0639043205000003, -3.9676040545, 4.5580984655, -3.0467936594999996,
#  0.21061767550000038, 0.04678598650000014, 1.3598179135000001, -4.187381627500001, 2.5518680655000003,
#  0.7419785515000002, 0.5939868604999999, -3.044409353499999, 1.2061784694999993, -0.1277369374999991,
#  0.7378274395000001, 0.3666471494999998, -2.4753500674999995, 2.7607404115, -0.5739902745000004, -1.443376865499999,
#  0.6837010135000007, -1.6118514415000003, 1.135268025499999, -0.30983708449999764, 0.7959058654999985,
#  0.884664375500002, -1.9280467645000008, 0.5482464554999996, 0.23045131549999848, -0.08551157449999598,
#  0.4921452954999989, 0.7656917554999975, -1.3826176044999978, 1.7386044954999993, 1.4937950955000017,
#  -2.0834528244999997, -0.930828544499995, 0.5242951954999885]
# error_dx_c
# [-5.00000263e-10 -5.00000097e-10 -5.00000485e-10 -4.99999597e-10
#  -5.00000041e-10 -5.00000485e-10 -5.00000374e-10 -5.00000139e-10
#   4.99999819e-10 -4.99999153e-10 -5.00000485e-10  1.49999979e-09
#  -1.49999990e-09  1.49999879e-09 -4.99999375e-10 -5.00000902e-10
#   4.99999930e-10 -1.49999985e-09  1.49999968e-09 -5.00000041e-10
#  -4.99999597e-10  4.99998931e-10 -3.50000062e-09  6.50000032e-09
#  -3.49999896e-09 -5.00002373e-10  5.00001485e-10  6.49999798e-09
#  -3.49999918e-09 -5.49999957e-09  2.50000151e-09 -5.00004024e-10
#   2.50000110e-09 -4.99997488e-10 -1.50000212e-09 -1.49999924e-09
#   5.49999823e-09 -9.50000034e-09  4.49999493e-09  2.50001153e-09]
# tx
# [ 2.62434536e+00  1.30041627e+00 -2.35128200e-02 -5.48516180e-01
#  -3.88059035e-01  3.59210114e+00 -2.30967309e+00  4.98953170e+00
#   1.75422875e+00  2.10413284e+00  2.45416926e+00  5.59423356e+00
#  -8.83105278e-01  2.04785168e+00  4.02807571e+00  6.57147294e+00
#   2.54924264e+00  4.10095666e+00  4.30819638e+00  6.23600595e+00
#   8.27646041e+00  5.11674562e+00  1.00710398e+01  1.12337910e+01
#   1.02009568e+01  1.20960795e+01  1.02009763e+01  1.23054387e+01
#   1.27721369e+01  1.52576620e+01  1.88337880e+01  1.77863341e+01
#   1.98805979e+01  2.20046960e+01  2.38444976e+01  2.68712794e+01
#   3.10544774e+01  3.18239266e+01  3.75703803e+01  4.46829978e+01
#   4.62520926e+01  4.81601612e+01]
# error_tx
# [ 0.00000000e+00  0.00000000e+00  1.00613962e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  8.88178420e-16
#   2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00
#  -1.11022302e-16 -9.99999639e-10  1.00000008e-09 -9.99999195e-10
#   9.99999195e-10  0.00000000e+00  0.00000000e+00  9.99999195e-10
#  -1.00000008e-09  9.99999195e-10 -4.00000033e-09 -3.99999855e-09
#  -2.00000017e-09 -7.00000058e-09  0.00000000e+00  1.77635684e-15
#  -1.77635684e-15 -9.99999905e-09  9.99999727e-09  9.99999727e-09
#   0.00000000e+00  3.55271368e-15 -3.55271368e-15  0.00000000e+00
#   3.55271368e-15  0.00000000e+00  0.00000000e+00  1.00000008e-08
#  -1.00000008e-08 -7.10542736e-15]
# mean_dx
# 0.11717803449999982

def test_arima():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_ar = [1, 1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881, 2.357947691, 2.59374246,
              2.853116706, 3.138428377, 3.452271214, 3.797498336, 4.177248169, 4.594972986, 5.054470285,
              5.559917313, 6.115909045, 6.727499949, 7.400249944, 8.140274939, 8.954302433, 9.849732676,
              10.83470594, 11.91817654, 13.10999419, 14.42099361, 15.86309297, 17.44940227, 19.1943425,
              21.11377675, 23.22515442, 25.54766986, 28.10243685, 30.91268053, 34.00394859, 37.40434344,
              41.14477779, 45.25925557, 49.78518112]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_ma = [1.7353783, -1.36841262, -0.166777075, -0.753366275, 1.45740841, -2.678726045, 2.95109758, -1.57809631,
            0.75515902, -0.35337346, 1.6423096, -2.73567821, 0.763169625, -0.16732928, 1.381313085, -1.61125952,
            0.433033895, -0.736127845, 0.53665943, 0.617224805, -1.336510315, 1.75054977, 0.384745335, 0.10721545,
            0.70512525, -1.078639365, 0.27449017, -0.818807845, 0.255513105, 0.71981598, -0.901322015, 0.004593315,
            -0.433279465, -0.44610282, -0.19312684, 0.378474935, -1.05546158, 0.848587345, 1.5981108, -0.03234046,
            -0.50734116, -0.736194715]
    y_ma_3 = [1.7353783, -0.50072347, -0.41713881, -0.910187173, 1.398521383, -2.249336914, 2.413901882,
              -0.866470275, 0.473005864, -0.32290873, 1.5936451, -2.43638975, 0.072553639, 0.022901334,
              1.563896432, -1.286556336, 0.013603894, -0.675115471, 0.494459221, 0.807378766, -1.151707475,
              1.398538223, 0.764429098, 0.157547476, 0.499730309, -1.100229409, -0.10377932, -0.807829208,
              0.150206757, 0.854577979, -0.659199656, -0.224124415, -0.438436862, -0.446123873, -0.196161369,
              0.470880813, -0.850328004, 0.683679514, 1.858619176, 0.353364577, -0.725437628, -1.100054169]
    y_arma = [1, -0.26841262, -0.462030957, -1.261600327, 0.06964805, -2.60211319, 0.088773071, -1.480445931,
              -0.873331504, -1.314038115, 0.196867674, -2.519123769, -2.00786652, -2.375982452, -1.232267612,
              -2.966753893, -2.830395388, -3.849562771, -3.697859618, -3.450420775, -5.131973167, -3.894620714,
              -3.89933745, -4.182055745, -3.89513607, -5.363289042, -5.625127776, -7.006448398, -7.451580133,
              -7.476922166, -9.125936397, -10.03393672, -11.47060986, -13.06377366, -14.56327787, -15.64113072,
              -18.26070538, -19.23818857, -19.56389662, -21.55262675, -24.21523058, -27.37294835]
    y_arma_3 = [1.7353783, -0.50072347, -0.41713881, -0.92181951, 0.36780299, -1.743817484, 0.237778149, -0.182590216,
                -0.1241625, -0.375413807, 1.169004369, -1.100234682, -1.446588147, -1.114497817, 0.407219526,
                -0.905032923, -1.28627579, -1.82756835, -1.43961739, -0.667941851, -1.964033703, -0.916233958,
                0.015790115, -0.034643347, 0.275217813, -0.787403122, -1.031894986, -1.730389506, -1.704323326,
                -0.880478776, -1.632939545, -2.185126825, -2.691584215, -3.296429054, -3.72094185, -3.501186254,
                -4.616730324, -4.438674962, -2.800814468, -2.76314241, -4.092466378, -5.609301596]
    # i
    y_42_e = [2.62434536, 1.30041627, 0.375950045, -0.006054495, 1.79302332, -0.258324885, 2.36560341, 2.05991608,
              2.08202446, 2.268096861, 3.93116521, 1.524029966, 1.785940822, 2.907008264, 4.739240601, 3.644241619,
              3.872599141, 4.09039776, 5.163201853, 6.71983113, 5.918288374, 7.994664064, 9.614227514, 9.907592133,
              11.0018358, 10.60140606, 11.45342238, 12.11277965, 13.68522082, 16.2595044, 17.02291925, 18.45175859,
              20.22822728, 22.03636243, 24.45382091, 27.75414918, 29.78903788, 33.67970911, 39.18135347, 42.71672304,
              45.4384421, 48.80163439]
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    dy2_center = 0.117178035
    ty2 = [2.62434536, 1.30041627, -0.02351282, -0.54851618, -0.388059035, 3.592101135, -2.30967309, 4.989531705,
           1.75422875, 2.10413284, 2.454169262, 5.594233559, -0.883105278, 2.047851677, 4.028075707, 6.571472937,
           2.549242638, 4.100956663, 4.308196379, 6.236005947, 8.276460406, 5.116745619, 10.07103975, 11.23379096,
           10.20095675, 12.09607946, 10.20097632, 12.3054387, 12.77213692, 15.25766198, 18.83378799, 17.78633411,
           19.88059793, 22.00469597, 23.84449758, 26.87127939, 31.05447745, 31.82392658, 37.57038034, 44.68299784,
           46.2520926, 48.16016116]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(x)
    phi = [1.1,  -0.2, 0.2]
    # theta = [0.5]
    theta = [0.3, 0.2, 0.1]
    p = 3
    d = 0
    q = 3
    y_arima = arch.arima(x=y_arma_3, e=e, phi=phi, theta=theta, p=p, d=d, q=q)
    error = np.array(y_arma_3) - y_arima
    print("y_arima")
    print(y_arima)
    print("error")
    print(error)
    # dx_c, mean_dx, tx = arch.arima(x=y_42_e, e=None, phi=None, theta=None, p=p, d=d, q=q)
    # error_dx_c = np.array(dy2_c) - dx_c
    # error_tx = np.array(ty2) - tx
    # print("dx_c")
    # print(dx_c)
    # print("error_dx_c")
    # print(error_dx_c)
    # print("tx")
    # print(tx)
    # print("error_tx")
    # print(error_tx)
    # print("mean_dx")
    # print(mean_dx)
# y_ar
# [ 1.          1.1         1.21        1.331       1.4641      1.61051
#   1.771561    1.9487171   2.14358881  2.35794769  2.59374246  2.85311671
#   3.13842838  3.45227121  3.79749834  4.17724817  4.59497299  5.05447028
#   5.55991731  6.11590904  6.72749995  7.40024994  8.14027494  8.95430243
#   9.84973268 10.83470594 11.91817653 13.10999419 14.42099361 15.86309297
#  17.44940227 19.1943425  21.11377675 23.22515443 25.54766986 28.10243685
#  30.91268054 34.00394858 37.40434345 41.14477778 45.25925557 49.78518113]
# error
# [ 0.00000000e+00  0.00000000e+00 -2.22044605e-16  0.00000000e+00
#  -2.22044605e-16  0.00000000e+00 -2.22044605e-16  0.00000000e+00
#  -4.44089210e-16  0.00000000e+00 -1.00000452e-10 -4.44089210e-16
#   4.00000033e-10 -7.00000058e-10  5.99999606e-10 -6.00000050e-10
#   9.99991201e-11  3.99999145e-10 -5.00000930e-10  7.00000058e-10
#  -5.00000930e-10  9.99991201e-11  5.99998273e-10  1.00000008e-10
#  -3.00001801e-10 -3.60000207e-09  5.99999872e-09 -4.00000033e-09
#   9.99998306e-10 -1.00000186e-09  3.00000025e-09  3.00000025e-09
#  -3.55271368e-15 -5.00000397e-09 -2.00000017e-09  4.00000033e-09
#  -5.00000397e-09  6.99999703e-09 -9.00000430e-09  6.00000050e-09
#   9.99996530e-10 -7.00000413e-09]
# y_ma
# [ 1.7353783  -1.36841262 -0.16677708 -0.75336627  1.45740841 -2.67872605
#   2.95109758 -1.57809631  0.75515902 -0.35337346  1.6423096  -2.73567821
#   0.76316962 -0.16732928  1.38131309 -1.61125952  0.4330339  -0.73612784
#   0.53665943  0.6172248  -1.33651031  1.75054977  0.38474534  0.10721545
#   0.70512525 -1.07863936  0.27449017 -0.81880785  0.25551311  0.71981598
#  -0.90132201  0.00459331 -0.43327947 -0.44610282 -0.19312684  0.37847494
#  -1.05546158  0.84858734  1.5981108  -0.03234046 -0.50734116 -0.73619472]
# error
# [ 0.00000000e+00  0.00000000e+00  5.55111512e-17  0.00000000e+00
#   0.00000000e+00  4.44089210e-16  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  5.55111512e-17  0.00000000e+00 -4.44089210e-16
#   0.00000000e+00  2.77555756e-17 -2.22044605e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  1.11022302e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00 -5.55111512e-17  1.38777878e-17
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  1.30104261e-17
#   5.55111512e-17  0.00000000e+00  2.77555756e-17  0.00000000e+00
#   0.00000000e+00  0.00000000e+00 -2.22044605e-16  1.38777878e-17
#   0.00000000e+00  1.11022302e-16]
# dx_c  p=0,d=2,q=0
# [0.28228483050000025, 0.4252836505000001, 2.0639043205000003, -3.9676040545, 4.5580984655, -3.0467936594999996,
#  0.21061767550000038, 0.04678598650000014, 1.3598179135000001, -4.187381627500001, 2.5518680655000003,
#  0.7419785515000002, 0.5939868604999999, -3.044409353499999, 1.2061784694999993, -0.1277369374999991,
#  0.7378274395000001, 0.3666471494999998, -2.4753500674999995, 2.7607404115, -0.5739902745000004, -1.443376865499999,
#  0.6837010135000007, -1.6118514415000003, 1.135268025499999, -0.30983708449999764, 0.7959058654999985,
#  0.884664375500002, -1.9280467645000008, 0.5482464554999996, 0.23045131549999848, -0.08551157449999598,
#  0.4921452954999989, 0.7656917554999975, -1.3826176044999978, 1.7386044954999993, 1.4937950955000017,
#  -2.0834528244999997, -0.930828544499995, 0.5242951954999885]
# error_dx_c
# [-5.00000263e-10 -5.00000097e-10 -5.00000485e-10 -4.99999597e-10
#  -5.00000041e-10 -5.00000485e-10 -5.00000374e-10 -5.00000139e-10
#   4.99999819e-10 -4.99999153e-10 -5.00000485e-10  1.49999979e-09
#  -1.49999990e-09  1.49999879e-09 -4.99999375e-10 -5.00000902e-10
#   4.99999930e-10 -1.49999985e-09  1.49999968e-09 -5.00000041e-10
#  -4.99999597e-10  4.99998931e-10 -3.50000062e-09  6.50000032e-09
#  -3.49999896e-09 -5.00002373e-10  5.00001485e-10  6.49999798e-09
#  -3.49999918e-09 -5.49999957e-09  2.50000151e-09 -5.00004024e-10
#   2.50000110e-09 -4.99997488e-10 -1.50000212e-09 -1.49999924e-09
#   5.49999823e-09 -9.50000034e-09  4.49999493e-09  2.50001153e-09]
# tx
# [ 2.62434536e+00  1.30041627e+00 -2.35128200e-02 -5.48516180e-01
#  -3.88059035e-01  3.59210114e+00 -2.30967309e+00  4.98953170e+00
#   1.75422875e+00  2.10413284e+00  2.45416926e+00  5.59423356e+00
#  -8.83105278e-01  2.04785168e+00  4.02807571e+00  6.57147294e+00
#   2.54924264e+00  4.10095666e+00  4.30819638e+00  6.23600595e+00
#   8.27646041e+00  5.11674562e+00  1.00710398e+01  1.12337910e+01
#   1.02009568e+01  1.20960795e+01  1.02009763e+01  1.23054387e+01
#   1.27721369e+01  1.52576620e+01  1.88337880e+01  1.77863341e+01
#   1.98805979e+01  2.20046960e+01  2.38444976e+01  2.68712794e+01
#   3.10544774e+01  3.18239266e+01  3.75703803e+01  4.46829978e+01
#   4.62520926e+01  4.81601612e+01]
# error_tx
# [ 0.00000000e+00  0.00000000e+00  1.00613962e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  8.88178420e-16
#   2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00
#  -1.11022302e-16 -9.99999639e-10  1.00000008e-09 -9.99999195e-10
#   9.99999195e-10  0.00000000e+00  0.00000000e+00  9.99999195e-10
#  -1.00000008e-09  9.99999195e-10 -4.00000033e-09 -3.99999855e-09
#  -2.00000017e-09 -7.00000058e-09  0.00000000e+00  1.77635684e-15
#  -1.77635684e-15 -9.99999905e-09  9.99999727e-09  9.99999727e-09
#   0.00000000e+00  3.55271368e-15 -3.55271368e-15  0.00000000e+00
#   3.55271368e-15  0.00000000e+00  0.00000000e+00  1.00000008e-08
#  -1.00000008e-08 -7.10542736e-15]
# mean_dx
# 0.11717803449999982
# y_arima
# [  1.          -0.26841262  -0.46203096  -0.22201859  -1.26558416
#    1.07079317  -6.72136417   7.10519854  -6.97589844   1.7790995
#   -1.260315     1.12359216  -9.11680928   1.89075827  -2.32537254
#   -0.03207518  -7.42950425  -1.3675122   -5.59842594  -1.63625081
#   -4.42945973  -7.18014288   0.94299567  -5.15839158  -4.06072724
#   -4.05553073  -8.48280849  -5.37410543  -9.35896273  -6.14236485
#   -7.93709428 -12.55167347 -10.55537795 -13.93020266 -15.01748076
#  -15.57655833 -17.30590539 -21.72286342 -16.80653708 -19.20026921
#  -25.87329907 -28.35056693]
# error
# [ 0.00000000e+00 -1.11022302e-16 -1.66533454e-16 -1.03958173e+00
#   1.33523221e+00 -3.67290636e+00  6.81013724e+00 -8.58564447e+00
#   6.10256694e+00 -3.09313761e+00  1.45718268e+00 -3.64271592e+00
#   7.10894276e+00 -4.26674073e+00  1.09310492e+00 -2.93467871e+00
#   4.59910886e+00 -2.48205057e+00  1.90056632e+00 -1.81416997e+00
#  -7.02513442e-01  3.28552217e+00 -4.84233312e+00  9.76335836e-01
#   1.65591172e-01 -1.30775831e+00  2.85768072e+00 -1.63234297e+00
#   1.90738260e+00 -1.33455732e+00 -1.18884212e+00  2.51773675e+00
#  -9.15231914e-01  8.66428996e-01  4.54202893e-01 -6.45723869e-02
#  -9.54799989e-01  2.48467485e+00 -2.75735954e+00 -2.35235754e+00
#   1.65806849e+00  9.77618582e-01]
# y_arima p=3 q=0
# [-1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31. 37.
#  35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67. 73.
#  71. 77. 75. 81. 79. 85.]
# error
# [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
#  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
# y_ma_3  p=0,q=3
# [ 1.7353783  -0.50072347 -0.41713881 -0.91018717  1.39852138 -2.24933691
#   2.41390188 -0.86647027  0.47300586 -0.32290873  1.5936451  -2.43638975
#   0.07255364  0.02290133  1.56389643 -1.28655634  0.01360389 -0.67511547
#   0.49445922  0.80737877 -1.15170747  1.39853822  0.7644291   0.15754748
#   0.49973031 -1.10022941 -0.10377932 -0.80782921  0.15020676  0.85457798
#  -0.65919966 -0.22412442 -0.43843686 -0.44612387 -0.19616137  0.47088081
#  -0.850328    0.68367951  1.85861918  0.35336458 -0.72543763 -1.10005417]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   5.55111512e-17  5.89805982e-17 -2.22044605e-16  0.00000000e+00
#   5.03069808e-17  0.00000000e+00  5.55111512e-17  0.00000000e+00
#  -2.22044605e-16  2.22044605e-16 -1.11022302e-16  2.77555756e-17
#  -5.55111512e-17  0.00000000e+00  1.38777878e-17  0.00000000e+00
#   2.77555756e-17 -1.11022302e-16  0.00000000e+00  2.77555756e-17
#   0.00000000e+00  0.00000000e+00  2.77555756e-17 -5.55111512e-17
#   1.11022302e-16  0.00000000e+00 -2.22044605e-16  5.55111512e-17
#   1.11022302e-16  0.00000000e+00]
# y_arima  p=3,q=3
# [ 1.7353783  -0.50072347 -0.41713881 -0.92181951  0.36780299 -1.74381749
#   0.23777815 -0.18259022 -0.1241625  -0.37541381  1.16900437 -1.10023468
#  -1.44658815 -1.11449782  0.40721953 -0.90503292 -1.28627579 -1.82756835
#  -1.43961739 -0.66794185 -1.9640337  -0.91623396  0.01579011 -0.03464335
#   0.27521781 -0.78740312 -1.03189499 -1.73038951 -1.70432333 -0.88047878
#  -1.63293955 -2.18512682 -2.69158422 -3.29642905 -3.72094185 -3.50118625
#  -4.61673032 -4.43867496 -2.80081447 -2.76314241 -4.09246638 -5.6093016 ]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.11022302e-16
#   2.77555756e-16  1.00000008e-09 -5.99999994e-10  2.99999942e-10
#   2.00000086e-10  0.00000000e+00 -1.00000008e-10  6.99999836e-10
#  -5.99999828e-10  5.00000041e-10 -3.00000025e-10  4.00000033e-10
#  -1.00000008e-10  2.00000239e-10  6.00000050e-10 -1.11022302e-16
#   1.00000008e-10  1.00000563e-10  3.99999874e-10 -4.99999993e-10
#   2.99999969e-10  3.00000025e-10  2.00000239e-10 -3.99999811e-10
#   8.00000066e-10 -3.99999922e-10  6.00000272e-10 -5.00000041e-10
#   7.00000502e-10 -5.00000041e-10  4.00000033e-10  2.00000017e-10
#   2.00000905e-10 -4.00000033e-10  2.00000461e-10  2.00000461e-10
#  -2.00000017e-10  4.00000921e-10]

def test_arma_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    y_ar = [1, 1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881, 2.357947691, 2.59374246,
              2.853116706, 3.138428377, 3.452271214, 3.797498336, 4.177248169, 4.594972986, 5.054470285,
              5.559917313, 6.115909045, 6.727499949, 7.400249944, 8.140274939, 8.954302433, 9.849732676,
              10.83470594, 11.91817654, 13.10999419, 14.42099361, 15.86309297, 17.44940227, 19.1943425,
              21.11377675, 23.22515442, 25.54766986, 28.10243685, 30.91268053, 34.00394859, 37.40434344,
              41.14477779, 45.25925557, 49.78518112]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_ma = [1.7353783, -1.36841262, -0.166777075, -0.753366275, 1.45740841, -2.678726045, 2.95109758, -1.57809631,
            0.75515902, -0.35337346, 1.6423096, -2.73567821, 0.763169625, -0.16732928, 1.381313085, -1.61125952,
            0.433033895, -0.736127845, 0.53665943, 0.617224805, -1.336510315, 1.75054977, 0.384745335, 0.10721545,
            0.70512525, -1.078639365, 0.27449017, -0.818807845, 0.255513105, 0.71981598, -0.901322015, 0.004593315,
            -0.433279465, -0.44610282, -0.19312684, 0.378474935, -1.05546158, 0.848587345, 1.5981108, -0.03234046,
            -0.50734116, -0.736194715]
    y_arma = [1, -0.26841262, -0.462030957, -1.261600327, 0.06964805, -2.60211319, 0.088773071, -1.480445931,
              -0.873331504, -1.314038115, 0.196867674, -2.519123769, -2.00786652, -2.375982452, -1.232267612,
              -2.966753893, -2.830395388, -3.849562771, -3.697859618, -3.450420775, -5.131973167, -3.894620714,
              -3.89933745, -4.182055745, -3.89513607, -5.363289042, -5.625127776, -7.006448398, -7.451580133,
              -7.476922166, -9.125936397, -10.03393672, -11.47060986, -13.06377366, -14.56327787, -15.64113072,
              -18.26070538, -19.23818857, -19.56389662, -21.55262675, -24.21523058, -27.37294835]
    y_arma_3 = [1.7353783, -0.50072347, -0.41713881, -0.92181951, 0.36780299, -1.743817484, 0.237778149, -0.182590216,
                -0.1241625, -0.375413807, 1.169004369, -1.100234682, -1.446588147, -1.114497817, 0.407219526,
                -0.905032923, -1.28627579, -1.82756835, -1.43961739, -0.667941851, -1.964033703, -0.916233958,
                0.015790115, -0.034643347, 0.275217813, -0.787403122, -1.031894986, -1.730389506, -1.704323326,
                -0.880478776, -1.632939545, -2.185126825, -2.691584215, -3.296429054, -3.72094185, -3.501186254,
                -4.616730324, -4.438674962, -2.800814468, -2.76314241, -4.092466378, -5.609301596]
    arch = Arch(x)
    p = 3
    q = 3
    phi, theat, R_2, B_1 = arch.arma_least_squares_estimation(y_arma_3, e=e, p=p, q=q)
    print("phi")
    print(phi)
    print("theat")
    print(theat)
    print("R_2")
    print(R_2)
# phi
# [1.1]
# theat
# []
# R_2
# 1.0000000000000004
# phi
# []
# theat
# [0.5]
# R_2
# 1.0000000000000004
# phi
# [1.1]
# theat
# [0.5]
# R_2
# 0.9999999999999996

# y_42
# phi
# [ 1.  1. -1.]
# theat
# []
# R_2
# 1.0000000000000004

# y_arma_3
# phi
# [ 1.1 -0.2  0.2]
# theat
# [0.3 0.2 0.1]
# R_2
# 1.0000000000000004

def test_x_residual():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_arma = [1, -0.26841262, -0.462030957, -1.261600327, 0.06964805, -2.60211319, 0.088773071, -1.480445931,
              -0.873331504, -1.314038115, 0.196867674, -2.519123769, -2.00786652, -2.375982452, -1.232267612,
              -2.966753893, -2.830395388, -3.849562771, -3.697859618, -3.450420775, -5.131973167, -3.894620714,
              -3.89933745, -4.182055745, -3.89513607, -5.363289042, -5.625127776, -7.006448398, -7.451580133,
              -7.476922166, -9.125936397, -10.03393672, -11.47060986, -13.06377366, -14.56327787, -15.64113072,
              -18.26070538, -19.23818857, -19.56389662, -21.55262675, -24.21523058, -27.37294835]
    y_arma_3 = [1.7353783, -0.50072347, -0.41713881, -0.92181951, 0.36780299, -1.743817484, 0.237778149, -0.182590216,
                -0.1241625, -0.375413807, 1.169004369, -1.100234682, -1.446588147, -1.114497817, 0.407219526,
                -0.905032923, -1.28627579, -1.82756835, -1.43961739, -0.667941851, -1.964033703, -0.916233958,
                0.015790115, -0.034643347, 0.275217813, -0.787403122, -1.031894986, -1.730389506, -1.704323326,
                -0.880478776, -1.632939545, -2.185126825, -2.691584215, -3.296429054, -3.72094185, -3.501186254,
                -4.616730324, -4.438674962, -2.800814468, -2.76314241, -4.092466378, -5.609301596]
    arch = Arch(x)
    p = 3
    d = 0
    q = 3
    x_residual, y_t, R_2, B_1 = arch.x_residual(y_arma_3, e, p, d, q)
    print("x_residual")
    print(x_residual)
    print("y_t")
    print(y_t)
    print("R_2")
    print(R_2)
# x_residual
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  4.13844514e-11
#   1.56662294e-10  7.87194754e-10 -1.77807047e-10 -2.26987956e-10
#   5.21301516e-10 -1.11195664e-10 -1.12275078e-10  4.90903318e-10
#  -1.61525904e-10  2.20385710e-10 -3.22448512e-10  2.88028601e-10
#   1.70512715e-10  4.63185046e-12  6.24862828e-10 -1.06068154e-10
#   8.88311646e-12  2.75892309e-10  1.98695019e-11 -5.22870115e-10
#   3.20349025e-10  1.27309052e-10  3.13661319e-10 -5.37479616e-10
#   8.55849835e-10 -4.94138064e-10  4.74455808e-10 -3.66128017e-10
#   5.77501602e-10 -5.54486235e-10  3.70079523e-10  1.00500497e-10
#   3.07363024e-11 -3.61678687e-10 -1.22156951e-10 -1.31422873e-10
#  -2.18366658e-10  2.72983414e-10]
# y_arma_3
# [ 1.7353783  -0.50072347 -0.41713881 -0.92181951  0.36780299 -1.74381748
#   0.23777815 -0.18259022 -0.1241625  -0.37541381  1.16900437 -1.10023468
#  -1.44658815 -1.11449782  0.40721953 -0.90503292 -1.28627579 -1.82756835
#  -1.43961739 -0.66794185 -1.9640337  -0.91623396  0.01579011 -0.03464335
#   0.27521781 -0.78740312 -1.03189499 -1.73038951 -1.70432333 -0.88047878
#  -1.63293955 -2.18512682 -2.69158422 -3.29642905 -3.72094185 -3.50118625
#  -4.61673032 -4.43867496 -2.80081447 -2.76314241 -4.09246638 -5.6093016 ]
# R_2
# 1.0000000000000004

def test_LB_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0, 0, -0.65798056, 1.20741142, -0.99820696, 2.40876836, -1.85362018, 0.85126399, -0.45792635,
                  0.36726925, -1.61099009, 2.1557183, 0.20889489, 0.51447928, -1.28002155, 1.20188049, 0.04015461,
                  1.00535443, -0.17882309, -0.45951062, 0.93548651, -0.99910244, -1.07769606, -0.39597124, -1.06442015]
    y_residual_42 = [0, 0, 0, 1.07296862, -0.86540763, 2.3015387, -1.74481176, 0.7612069, -0.3190391, 0.24937038,
                     -1.46210794, 2.06014071, 0.3224172, 0.38405435, -1.13376944, 1.09989127, 0.17242821, 0.87785842,
                     -0.04221375, -0.58281521, 1.10061918, -1.14472371, -0.90159072, -0.50249434, -0.90085595,
                     0.68372786, 0.12289023, 0.93576943, 0.26788808, -0.53035547, 0.69166075, 0.39675353, 0.6871727,
                     0.84520564, 0.67124613, 0.0126646, 1.11731035, -0.2344157, -1.65980218, -0.74204416, 0.19183555,
                     0.88762896]
    e_42 = [1.62434536, -0.61175641, -0.52817175, -1.07296862, 0.86540763, -2.3015387, 1.74481176, -0.7612069,
            0.3190391, -0.24937038, 1.46210794, -2.06014071, -0.3224172, -0.38405435, 1.13376944, -1.09989127,
            -0.17242821, -0.87785842, 0.04221375, 0.58281521, -1.10061918, 1.14472371, 0.90159072, 0.50249434,
            0.90085595, -0.68372786, -0.12289023, -0.93576943, -0.26788808, 0.53035547, -0.69166075, -0.39675353,
            -0.6871727, -0.84520564, -0.67124613, -0.0126646, -1.11731035, 0.2344157, 1.65980218, 0.74204416,
            -0.19183555, -0.88762896]
    y_arma_3_residual = [0.00E+00, 0.00E+00, 0.00E+00, 4.14E-11, 1.57E-10, 7.87E-10, -1.78E-10, -2.27E-10, 5.21E-10,
                         -1.11E-10, -1.12E-10, 4.91E-10, -1.62E-10, 2.20E-10, -3.22E-10, 2.88E-10, 1.71E-10, 4.63E-12,
                         6.25E-10, -1.06E-10, 8.88E-12, 2.76E-10, 1.99E-11, -5.23E-10, 3.20E-10, 1.27E-10, 3.14E-10,
                         -5.37E-10, 8.56E-10, -4.94E-10, 4.74E-10, -3.66E-10, 5.78E-10, -5.54E-10, 3.70E-10, 1.01E-10,
                         3.07E-11, -3.62E-10, -1.22E-10, -1.31E-10, -2.18E-10, 2.73E-10]
    arch = Arch(x)
    m = 18
    LB, acf = arch.LB_statistic(y_arma_3_residual, m)
    print("LB")
    print(LB)
    print("acf")
    print(acf)
# LB
# 45.698897122566954
# acf
# [-0.2992664489731346, 0.19442603273861006, -0.29213168721973637, 0.22185125264134162, -0.3615422643819549,
#  0.20227770247515964, -0.27312692087434653, 0.15779626005694747, -0.13366381954323564, 0.1885712614193569,
#  -0.3735933696022176, -0.0805222145687274, -0.09400385361466511, 0.1456177022814934, 0.2225045070230728,
#  0.16878371854618657, -0.026701681727187822, -0.06787605795292917]
# LB
# 52.01404083089311
# acf
# [-0.2754828025343142, 0.21653015285774102, -0.23627368772319454, 0.1693248057552083, -0.1946839295444669,
#  0.09554964455523754, -0.4091328870324509, 0.37213765318354536, -0.04603561622816688, 0.08638403879174505,
#  -0.37401417169677587, 0.1512948488259873, -0.04342223357215569, 0.15341452025970437, 0.12339985445661049,
#  -0.08258504117317106, 0.25096697443426663, -0.26739888663621436]
# LB
# 34.62190583480639
# acf
# [-0.3148842175737829, 0.24853171409447203, -0.24915014159992518, 0.17794363105617755, -0.266305402972565,
#  0.08942484535253623, -0.2384613500848858, 0.14615188451661, -0.15358127903411925, 0.03992742911183589,
#  -0.2781458142262949, -0.031305539096506324, -0.07680796237423126, -0.0013771161243967057, 0.2907396421720818,
#  0.13468097998841483, 0.10223606930417625, -0.07144223130471786]
# LB
# 34.890194651911656
# acf
# [-0.31050373292107725, 0.22391037802908986, -0.2774186125925376, 0.17217553417323256, -0.24337243918978474,
#  0.10130950732314888, -0.24264427618035228, 0.16854069963589516, -0.13557461796044687, 0.04911327824550419,
#  -0.27684875568955747, -0.046179002157211886, -0.06744665381794837, 0.03177836166774282, 0.29453025719963566,
#  0.16581192469252298, 0.06066005157489968, -0.08922141252008557]
# LB
# 80.37521979917801
# acf
# [-0.5641033695514338, 0.2701691732356613, -0.19127844733689, 0.2899817689132931, -0.4069044365119065,
#  0.2595038960336038, -0.042929719946451415, 0.07880115734517379, -0.25659056558631127, 0.30756277851163266,
#  -0.10011194875739186, -0.20151607822414916, 0.3017301976546014, -0.05698306424244423, -0.049300882809559354,
#  -0.06556270041891844, 0.3816528185500686, -0.44389300250689423]

def test_get_chi_critical():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    m = 18
    p = 0.05
    chi_critical = arch.get_chi_critical(m, p)  # todo: p
    print("chi_critical")
    print(chi_critical)
# chi_critical
# 45.0
# chi_critical
# 27.6

def test_test_arima():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual_42 = [0, 0, 0, 1.07296862, -0.86540763, 2.3015387, -1.74481176, 0.7612069, -0.3190391, 0.24937038,
                     -1.46210794, 2.06014071, 0.3224172, 0.38405435, -1.13376944, 1.09989127, 0.17242821, 0.87785842,
                     -0.04221375, -0.58281521, 1.10061918, -1.14472371, -0.90159072, -0.50249434, -0.90085595,
                     0.68372786, 0.12289023, 0.93576943, 0.26788808, -0.53035547, 0.69166075, 0.39675353, 0.6871727,
                     0.84520564, 0.67124613, 0.0126646, 1.11731035, -0.2344157, -1.65980218, -0.74204416, 0.19183555,
                     0.88762896]
    arch = Arch(x)
    m = 17
    p = 0.05
    b_significant = arch.test_arima(y_residual_42, m, p)
    print("b_significant")
    print(b_significant)
# b_significant
# False

def test_t_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0,  0,  -7.00148942,  2.81307703,  -0.86616938,  2.35613508,  -1.19714684,  0.4232423,  -0.4589695,
                  0.54786256,  -1.83051924,  1.84837348,  0.76232344,  0.96888897,  -1.44205859,  1.03469247,
                  0.18368458,  1.3957388,  -0.13007158]
    arch = Arch(x)
    phi = 0
    theta = 0
    a = 0
    b_ = arch.t_statistic(y_residual, phi, theta, a)
    print("b_")
    print(b_)

def test_get_t_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    m = 18 - 1
    p = 0.05
    t_critical = arch.get_t_statistic(m, p)
    print("t_critical")
    print(t_critical)

def test_LM_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    q = 3
    y_residual_2 = np.power(y_residual, 2)
    a, R_2 = arch.ar_least_squares_estimation(y_residual_2, q)
    residual_2_fit = arch.arma(y_residual_2, e=None, phi=a, theta=None, p=q, q=0)  # ar model
    e = y_residual_2 - residual_2_fit
    e_2 = np.power(e, 2)
    lm = arch.LM_statistic(y_residual_2, q, e_2)
    print("lm")
    print(lm)

def test_arch_test():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    q = 3
    y_residual_2 = np.power(y_residual, 2)
    significance_level = 0.05
    b_significance = arch.arch_test(y_residual_2, q, significance_level)
    print("b_significance")
    print(b_significance)

def test_arch_one_step():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    q = 3
    y_residual_2 = np.power(y_residual, 2)
    significance_level = 0.05
    epsilon_t = arch.arch_one_step(y_residual_2, q, significance_level)
    print("epsilon_t")
    print(epsilon_t)

def test_arch():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    y_residual_2 = np.power(y_residual, 2)
    alpha = [0.5, 0.5, 0.5]
    q = 3
    epsilon = arch.arch(y_residual_2, e, alpha, q)
    print("epsilon")
    print(epsilon)
