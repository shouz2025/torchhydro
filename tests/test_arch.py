import numpy as np
from hydrodataset import CamelsYstl
from torchhydro.datasets.arch import Arch
from tests.test_arch_data import (
    e_42, e_42_original, e_60, e_100, e_395, e_500, e_1000, e_1460,
    y_arma_3_100, y_residual_arma_3_p3d0q3_100,
    y_streamflow_100, y_streamflow_395, y_residual_streamflow_395, y_residual_2_streamflow_395,
    y_streamflow_1460, y_residual_streamflow_1460,
)

class Ystl(object):
    def __init__(self):
        self.datasource = CamelsYstl()
        self.basin = ["1000",]
        self.time_range = ["1990-01-01","1994-01-01"]
        self.var_list = ["streamflow", "discharge_vol1", "discharge_vol2", "discharge_vol3",]
        self.pet_list = ["pet"]
        self.prcp_list = ["prcp"]
        self.streamflow = None
        self.prcp = None
        self.pet = None
        self.read_streamflow()
        # self.read_prcp()
        # self.read_pet()

    def read_streamflow(self):
        data = self.datasource.read_ts_xrdataset(
            self.basin,
            self.time_range,
            self.var_list,
        )
        data1 = data.streamflow.to_dataframe()
        # data2 = data.discharge_vol1.to_dataframe()
        # data3 = data.discharge_vol2.to_dataframe()
        # data4 = data.discharge_vol3.to_dataframe()
        # data1.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data2.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data3.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data4.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data1 = data1.values[:, 0]
        # data2 = data2.values[:, 0]
        # data3 = data3.values[:, 0]
        # data4 = data4.values[:, 0]
        data_ = data1.tolist()  # + data2.tolist() + data3.tolist() + data4.tolist()
        self.streamflow = data_  # + data_

def test_cov():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    cov_xy = arch.cov(x, y)
    print(cov_xy)
# 112.0

def test_correlation_coefficient():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    cf_xy = arch.correlation_coefficient(x, y)
    print(cf_xy)
# 1.0

def test_autocorrelation_coefficient():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    acf_x = arch.autocorrelation_coefficient(x, 0)
    acf_y = arch.autocorrelation_coefficient(y, 0)
    print("acf_x")
    print(acf_x)
    print("acf_y")
    print(acf_y)
# acf_x  p=0
# 1.0
# acf_y
# 1.0
# acf_x  p=1
# 0.7692307692307692
# acf_y
# 0.7692307692307692
# acf_x  p=2
# 0.543956043956044
# acf_y
# 0.543956043956044

def test_autocorrelation_function():
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]  # 13
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(y)
    acf_y = arch.autocorrelation_function(y_streamflow_1460, 500)
    print("acf_y")
    print(acf_y)
# acf_y_non_stationary
# [1.0, 0.9093852426253098, 0.8585818210888161, 0.7690862578943162, 0.7184427212407067, 0.6307058917579343,
#  0.5808617795187465, 0.4955232232792389, 0.4471180749860101, 0.3648173315213047, 0.31849068670557196,
#  0.23986729554720607, 0.19625869374050686, 0.1219521944200176, 0.0817011751538892, 0.012351107202813977,
#  -0.023902789991206336, -0.08765688704133025, -0.11927412263170517, -0.1767927092493405, -0.20313374370453277,
#  -0.2537772803581421, -0.2742025741466144, -0.3173315213046607, -0.3312015348948757, -0.36617635302582147,
#  -0.3728515468862419, -0.39903269645854983, -0.3978735310576385, -0.4146214725397714, -0.4049884083459909,
#  -0.41166360220641146]
# acf_y  y_streamflow_100
# [1.0, 0.4890217866079111, 0.3730435325796203, 0.30943171756125193, 0.2903743490414458, 0.2527380292429242,
#  0.22716180864275232, 0.201260054027222, 0.17799776823752736, 0.161526129486014, 0.15922140814570662,
#  0.16479811526698018, 0.14814069021275406, 0.10396022090655761, 0.10756174327598879, 0.1159200114033717,
#  0.09532994462046454, 0.0737327012245338, 0.0607135930433197, 0.04689502511205941, 0.04358534730555633,
#  0.05028332135152962, 0.06620434569109297, 0.08901400134251614, 0.12600021297823052, 0.1497104874726196,
#  0.14870136607406342, 0.08687728972936505, -0.02465822041046203, -0.035884808206033784, -0.04764973197177684,
#  -0.060146343023873776, -0.07080382545122141, -0.07734197898525726, -0.07731508598397653, -0.07019732141743823,
#  -0.060750990224451414, -0.06066294530597317, -0.0572185180396532, -0.04266840328598805, -0.03843981978902132,
#  -0.04537584163326208, -0.055028190390885426, -0.06126381760750669, -0.06359274253763472, -0.05978966182367262,
#  -0.055868205441495414, -0.057661770678519936, -0.05435524208488426, -0.020390510188813268, 0.0695531457689958,
#  0.15828655265323596, -0.002858335965718018, -0.09195051913397304, -0.10091445816022428, -0.09354964960831892,
#  -0.08774669254716466, -0.08653614399035475, -0.09262396398096126, -0.10651991047714839, -0.112897773677954,
#  -0.11353825607086294, -0.11371448284625305, -0.11159937429155692, -0.10999820143057237, -0.10632281858930692,
#  -0.1008519196022209, -0.09532138652502058, -0.0935769126031454, -0.10788807665553737, -0.1248659979494118,
#  -0.12465016794812338, -0.12351870226452377, -0.11683269270392024, -0.10821073552044914, -0.10173997072560591,
#  -0.09709867000494606]

def test_partial_autocorrelation_coefficient():
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]  # 13
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(y)
    r_k = [1, 0.909385243, 0.858581821, 0.769086258, 0.718442721, 0.630705892, 0.58086178, 0.495523223, 0.447118075,
           0.364817332, 0.318490687, 0.239867296, 0.196258694, 0.121952194, 0.081701175, 0.012351107, -0.02390279,
           -0.087656887, -0.119274123, -0.176792709, -0.203133744, -0.25377728, -0.274202574, -0.317331521,
           -0.331201535, -0.366176353, -0.372851547, -0.399032696, -0.397873531, -0.414621473, -0.404988408,
           -0.411663602]
    r_k_1 = r_k[:1]
    pacc_k = arch.partial_autocorrelation_coefficient(r_k_1)
    print("pacc_k")
    print(pacc_k)
# pacc_k k=1
# 0.909385243

def test_partial_autocorrelation_function():
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]  # 13
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(y)
    pacf_y= arch.partial_autocorrelation_function(y_streamflow_1460, 500)
    print("pacf_y")
    print(pacf_y)
# pacf_y  y_streamflow_100
# [ 1.00000000e+00  4.89021787e-01  1.75987213e-01  9.31707703e-02
#   8.74213878e-02  3.96493886e-02  3.02744689e-02  1.69247427e-02
#   8.81097249e-03  9.87713548e-03  2.16151652e-02  3.02773406e-02
#   5.53302329e-03 -3.16597373e-02  1.09679441e-02  1.98711211e-02
#  -9.17391470e-03 -1.33746584e-02 -8.30007167e-03 -1.01007508e-02
#   3.86111484e-04  1.13989368e-02  2.30387193e-02  3.45720381e-02
#   5.33592269e-02  4.25830310e-02  1.37520316e-02 -5.80584156e-02
#  -1.24166931e-01 -3.17693461e-02 -2.09489384e-02 -1.47528068e-02
#  -7.93819775e-03 -6.81790754e-03 -1.80482597e-03  3.00300090e-03
#   5.91434517e-03  1.65269969e-03  8.79113146e-03  2.04966292e-02
#   6.34297204e-03 -8.28148541e-03 -5.38688499e-03 -2.81345233e-03
#  -5.72683777e-03 -4.44123033e-03 -7.22476478e-03 -1.49303173e-02
#  -9.40180699e-03  2.39935568e-02  9.07354248e-02  1.19926563e-01
#  -1.32628916e-01 -8.55978421e-02 -1.62353922e-02 -7.76425574e-03
#  -2.53344343e-03 -1.62209507e-03 -9.26597998e-03 -2.16341430e-02
#  -2.37341242e-02 -2.28490757e-02 -1.42089767e-02  4.89734415e-03
#   7.52019068e-03 -7.86979126e-03 -3.42187775e-04  1.67428851e-02
#   1.19367100e-02 -1.16136354e-02 -2.12515114e-02 -1.37671123e-02
#  -1.77814042e-02 -1.53637871e-02 -1.58891374e-02 -1.69086598e-02
#  -5.92238178e-04]

def test_autocorrelation_function_streamflow():
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(y)
    acf_y = arch.autocorrelation_function(y)
    print("acf_y")
    print(acf_y)
# acf_y_60
# [1.0, 0.8572761620454818, 0.6385768912931514, 0.5050825841013289, 0.44653638403995016, 0.4185441902455531,
#  0.3865704425932139, 0.33706325563399486, 0.2718288785083308, 0.20527471190164556, 0.14627775907318724,
#  0.090195274986454, 0.040649454864340455, 0.020467989378790626, 0.01871623720512344, 0.02399900366360696,
#  0.027130568269475144, 0.015336252842722938, -0.021977685513096576, -0.06831296879203817, -0.09906441374961863,
#  -0.11806218551925013, -0.132441375577407, -0.14502085223578084, -0.1573314825368771, -0.16912342792631613,
#  -0.17980271594051625, -0.1887652012662332, -0.19558386433073563, -0.19946329936429272, -0.19970940673656967,
#  -0.1975305617182452, -0.19417913728434713, -0.19175009440569452, -0.18961722932044892, -0.18499561862816008,
#  -0.17966357456806203, -0.17630856571184267, -0.17379043482347045, -0.17116897410859383, -0.16708284501733178,
#  -0.1610971603858868, -0.15233855973691007, -0.13961232833549037, -0.12670635326968843, -0.11743191106285727,
#  -0.10899764449240897]

def test_partial_autocorrelation_function_streamflow():
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(y)
    pacf_y = arch.partial_autocorrelation_function(y)
    print("pacf_y")
    print(pacf_y)
# pacf_y_60
# [ 1.10101109e+00 -4.31313671e-01  1.26547726e-01  2.45816853e-02
#   1.82020813e-02 -2.64601338e-03 -1.96984572e-02 -3.09167709e-02
#  -2.65835641e-02 -2.47081339e-02 -2.86656256e-02 -1.95726960e-02
#   5.13427860e-03 -2.90367630e-03 -9.03609942e-04 -6.41873025e-03
#  -2.09019051e-02 -3.68201230e-02 -2.96501411e-02 -1.67478226e-02
#  -1.96007478e-02 -1.56092095e-02 -1.28515601e-02 -1.27453238e-02
#  -1.30679890e-02 -1.46077210e-02 -1.58518908e-02 -1.67253944e-02
#  -1.67478264e-02 -1.57891337e-02 -1.48459537e-02 -1.34477497e-02
#  -1.38717939e-02 -1.29526467e-02 -1.16996186e-02 -1.42725254e-02
#  -1.63146338e-02 -1.55790375e-02 -1.56192771e-02 -1.43930304e-02
#  -1.34924621e-02 -1.17067379e-02 -9.75973446e-03 -1.20831188e-02
#  -1.43523232e-02 -1.26349573e-02]
# pacf_y
# [ 1.          0.85727616 -0.36346162  0.14466159  0.03550953  0.02535685
#   0.00402063 -0.01184719 -0.02137158 -0.01608567 -0.01363453 -0.01709839
#  -0.0078693   0.01670959  0.00863855  0.01060163  0.00506393 -0.00937222
#  -0.02521926 -0.01812237 -0.00528659 -0.0082928  -0.00440002 -0.00168579
#  -0.00162665 -0.00201446 -0.00368665 -0.00513423 -0.00627972 -0.00661231
#  -0.00595238 -0.00528904 -0.0041184  -0.00481954 -0.00415041 -0.00309347
#  -0.00606696 -0.00870686 -0.0085929  -0.00935203 -0.00885177 -0.00871088
#  -0.00762783 -0.00628375 -0.00953454 -0.01308311 -0.01263496]

def test_ar_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 17
    y_42 = [1, 1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881, 2.357947691, 2.59374246,
            2.853116706, 3.138428377, 3.452271214, 3.797498336, 4.177248169, 4.594972986, 5.054470285, 5.559917313,
            6.115909045, 6.727499949, 7.400249944, 8.140274939, 8.954302433, 9.849732676, 10.83470594, 11.91817654,
            13.10999419, 14.42099361, 15.86309297, 17.44940227, 19.1943425, 21.11377675, 23.22515442, 25.54766986,
            28.10243685, 30.91268053, 34.00394859, 37.40434344, 41.14477779, 45.25925557, 49.78518112]
    arch = Arch(x)
    phi = arch.ar_least_squares_estimation(y_42, 1)
    print("phi")
    print(phi)
# phi
# (array([1.1]), 1.0000000000000004)

def test_adf_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 17
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    arch = Arch(x)
    rho, s_rho = arch.adf_least_squares_estimation(dy2_c, 3)
    print("rho")
    print(rho)
    print("s_rho")
    print(s_rho)
# rho
# -3.1784358068686576
# s_rho
# 0.40833351710609556

def test_tau_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 19
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    arch = Arch(x)
    t_y = arch.tau_statistic(dy2_c, 3)
    print("t_y")
    print(t_y)
# t_y
# -7.7839209217861445

def test_get_tau_critical():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    case = "case 2"
    p = 0.05
    n_sample = 42
    tau_critical = arch.get_tau_critical(case, n_sample, p)
    print("tau_critical")
    print(tau_critical)
# tau_critical
# -1.95
# tau_critical
# -2.9524

def test_adf_test():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    dx_c_42 = [-8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0,
               -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0,
               -8.0, 8.0, -8.0, 8.0]
    arch = Arch(x)
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(y_streamflow_1460, 3, case, significance_level)
    print("b_stability")
    print(b_stability)
# b_stability
# True
# b_stability  e_100
# True
# b_stability  e_60
# True
# b_stability  e_42
# True
# b_stability  y_streamflow_100
# False
# b_stability  y_streamflow_395
# False
# b_stability  y_streamflow_1460
# True

def test_integrated_one_degree():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(x)
    y_integrated, y_trend = arch.integrate_one_degree(y_non_stationary)
    p = 4
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(y_integrated, p, case, significance_level)
    print("y_integrated")
    print(y_integrated)
    print("y_trend")
    print(y_trend)
    print("b_stability")
    print(b_stability)
# y_integrated
# [-1.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6.
#  -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6.
#  -2.  6. -2.  6. -2.  6.]
# y_trend
# [ 0. -1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31.
#  37. 35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67.
#  73. 71. 77. 75. 81. 79.]
# b_stability
# False
# y_integrated
# [ 6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.
#   6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.
#   6. -2.  6. -2.  6.]
# y_trend
# [-1. -1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31.
#  37. 35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67.
#  73. 71. 77. 75. 81. 79.]
# b_stability
# False

def test_integrate_d_degree():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_non_stationary_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49,
                        47, 53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(x)
    y_integrated, y_trend = arch.integrate_d_degree(y_non_stationary_42, 2)
    p = 1
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(y_integrated, p, case, significance_level)
    print("y_integrated")
    print(y_integrated)
    print("y_trend")
    print(y_trend)
    print("b_stability")
    print(b_stability)
# y_non_stationary_42 p=1
# y_integrated
# [-8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8.
#  -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8.
#  -8.  8. -8.  8.]
# y_trend
# [-1.  5. 11.  1. 15.  5. 19.  9. 23. 13. 27. 17. 31. 21. 35. 25. 39. 29.
#  43. 33. 47. 37. 51. 41. 55. 45. 59. 49. 63. 53. 67. 57. 71. 61. 75. 65.
#  79. 69. 83. 73. 87. 77.]
# b_stability
# False

def test_integration_streamflow():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    d = 3
    y_integrated, y_trend = arch.integration(x=y_streamflow_395, d=d)
    p = 1
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(y_integrated, p, case, significance_level)
    print("y_integrated")
    print(y_integrated)
    print("y_trend")
    print(y_trend)
    print("b_stability")
    print(b_stability)

def test_ar_one_step():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    x = [-1, 5, 3]
    phi = [1,  1, -1]
    y_ar = arch.ar_one_step(x, phi)
    print("y_ar")
    print(y_ar)
# y_ar
# 1.0

def test_ma_one_step():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    theta = [0.5, 0.5]
    e_ = [0.2, -0.6, 0.4]
    y_ma = arch.ma_one_step(e_, theta)
    print("y_ma")
    print(y_ma)
# y_ma
# 0.20000000000000004

def test_arma():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_ar = [1, 1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881, 2.357947691, 2.59374246,
            2.853116706, 3.138428377, 3.452271214, 3.797498336, 4.177248169, 4.594972986, 5.054470285, 5.559917313,
            6.115909045, 6.727499949, 7.400249944, 8.140274939, 8.954302433, 9.849732676, 10.83470594, 11.91817654,
            13.10999419, 14.42099361, 15.86309297, 17.44940227, 19.1943425, 21.11377675, 23.22515442, 25.54766986,
            28.10243685, 30.91268053, 34.00394859, 37.40434344, 41.14477779, 45.25925557, 49.78518112]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_ma = [1.7353783, -1.36841262, -0.166777075, -0.753366275, 1.45740841, -2.678726045, 2.95109758, -1.57809631,
            0.75515902, -0.35337346, 1.6423096, -2.73567821, 0.763169625, -0.16732928, 1.381313085, -1.61125952,
            0.433033895, -0.736127845, 0.53665943, 0.617224805, -1.336510315, 1.75054977, 0.384745335, 0.10721545,
            0.70512525, -1.078639365, 0.27449017, -0.818807845, 0.255513105, 0.71981598, -0.901322015, 0.004593315,
            -0.433279465, -0.44610282, -0.19312684, 0.378474935, -1.05546158, 0.848587345, 1.5981108, -0.03234046,
            -0.50734116, -0.736194715]
    y_ma_3 = [1.7353783, -0.50072347, -0.41713881, -0.910187173, 1.398521383, -2.249336914, 2.413901882,
              -0.866470275, 0.473005864, -0.32290873, 1.5936451, -2.43638975, 0.072553639, 0.022901334,
              1.563896432, -1.286556336, 0.013603894, -0.675115471, 0.494459221, 0.807378766, -1.151707475,
              1.398538223, 0.764429098, 0.157547476, 0.499730309, -1.100229409, -0.10377932, -0.807829208,
              0.150206757, 0.854577979, -0.659199656, -0.224124415, -0.438436862, -0.446123873, -0.196161369,
              0.470880813, -0.850328004, 0.683679514, 1.858619176, 0.353364577, -0.725437628, -1.100054169]
    y_arma_ = [1, -0.26841262, -0.462030957, -1.261600327, 0.06964805, -2.60211319, 0.088773071, -1.480445931,
              -0.873331504, -1.314038115, 0.196867674, -2.519123769, -2.00786652, -2.375982452, -1.232267612,
              -2.966753893, -2.830395388, -3.849562771, -3.697859618, -3.450420775, -5.131973167, -3.894620714,
              -3.89933745, -4.182055745, -3.89513607, -5.363289042, -5.625127776, -7.006448398, -7.451580133,
              -7.476922166, -9.125936397, -10.03393672, -11.47060986, -13.06377366, -14.56327787, -15.64113072,
              -18.26070538, -19.23818857, -19.56389662, -21.55262675, -24.21523058, -27.37294835]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    y_arma_3 = [1.7353783, -0.50072347, -0.41713881, -0.92181951, 0.36780299, -1.743817484, 0.237778149, -0.182590216,
                -0.1241625, -0.375413807, 1.169004369, -1.100234682, -1.446588147, -1.114497817, 0.407219526,
                -0.905032923, -1.28627579, -1.82756835, -1.43961739, -0.667941851, -1.964033703, -0.916233958,
                0.015790115, -0.034643347, 0.275217813, -0.787403122, -1.031894986, -1.730389506, -1.704323326,
                -0.880478776, -1.632939545, -2.185126825, -2.691584215, -3.296429054, -3.72094185, -3.501186254,
                -4.616730324, -4.438674962, -2.800814468, -2.76314241, -4.092466378, -5.609301596]
    arch = Arch(x)
    phi = [1.1, -0.2, 0.2]
    theta = [0.3, 0.2, 0.1]
    # phi = [1.1]
    # theta = [0.5]
    p = 3
    q = 3
    y_arma = arch.arma(x=y_arma_3, e=e, phi=phi, theta=theta, p=p, q=q)
    error = np.array(y_arma_3) - y_arma
    print("y_arma")
    print(y_arma)
    print("error")
    print(error)
# y_ar
# [ 1.          1.1         1.21        1.331       1.4641      1.61051
#   1.771561    1.9487171   2.14358881  2.35794769  2.59374246  2.85311671
#   3.13842838  3.45227121  3.79749834  4.17724817  4.59497299  5.05447028
#   5.55991731  6.11590904  6.72749995  7.40024994  8.14027494  8.95430243
#   9.84973268 10.83470594 11.91817653 13.10999419 14.42099361 15.86309297
#  17.44940227 19.1943425  21.11377675 23.22515443 25.54766986 28.10243685
#  30.91268054 34.00394858 37.40434345 41.14477778 45.25925557 49.78518113]
# error
# [ 0.00000000e+00  0.00000000e+00 -2.22044605e-16  0.00000000e+00
#  -2.22044605e-16  0.00000000e+00 -2.22044605e-16  0.00000000e+00
#  -4.44089210e-16  0.00000000e+00 -1.00000452e-10 -4.44089210e-16
#   4.00000033e-10 -7.00000058e-10  5.99999606e-10 -6.00000050e-10
#   9.99991201e-11  3.99999145e-10 -5.00000930e-10  7.00000058e-10
#  -5.00000930e-10  9.99991201e-11  5.99998273e-10  1.00000008e-10
#  -3.00001801e-10 -3.60000207e-09  5.99999872e-09 -4.00000033e-09
#   9.99998306e-10 -1.00000186e-09  3.00000025e-09  3.00000025e-09
#  -3.55271368e-15 -5.00000397e-09 -2.00000017e-09  4.00000033e-09
#  -5.00000397e-09  6.99999703e-09 -9.00000430e-09  6.00000050e-09
#   9.99996530e-10 -7.00000413e-09]
# y_ma  p=0,q=1
# [ 1.7353783  -1.36841262 -0.16677708 -0.75336627  1.45740841 -2.67872605
#   2.95109758 -1.57809631  0.75515902 -0.35337346  1.6423096  -2.73567821
#   0.76316962 -0.16732928  1.38131309 -1.61125952  0.4330339  -0.73612784
#   0.53665943  0.6172248  -1.33651031  1.75054977  0.38474534  0.10721545
#   0.70512525 -1.07863936  0.27449017 -0.81880785  0.25551311  0.71981598
#  -0.90132201  0.00459331 -0.43327947 -0.44610282 -0.19312684  0.37847494
#  -1.05546158  0.84858734  1.5981108  -0.03234046 -0.50734116 -0.73619472]
# error
# [ 0.00000000e+00  0.00000000e+00  5.55111512e-17  0.00000000e+00
#   0.00000000e+00  4.44089210e-16  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  5.55111512e-17  0.00000000e+00 -4.44089210e-16
#   0.00000000e+00  2.77555756e-17 -2.22044605e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  1.11022302e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00 -5.55111512e-17  1.38777878e-17
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  1.30104261e-17
#   5.55111512e-17  0.00000000e+00  2.77555756e-17  0.00000000e+00
#   0.00000000e+00  0.00000000e+00 -2.22044605e-16  1.38777878e-17
#   0.00000000e+00  1.11022302e-16]
# y_arma  p=1,q=1
# [  1.          -0.26841262  -0.46203096  -1.26160033   0.06964805
#   -2.60211319   0.08877307  -1.48044593  -0.8733315   -1.31403811
#    0.19686767  -2.51912377  -2.00786652  -2.37598245  -1.23226761
#   -2.96675389  -2.83039539  -3.84956277  -3.69785962  -3.45042077
#   -5.13197317  -3.89462071  -3.89933745  -4.18205575  -3.89513607
#   -5.36328904  -5.62512778  -7.0064484   -7.45158013  -7.47692217
#   -9.1259364  -10.03393672 -11.47060986 -13.06377367 -14.56327787
#  -15.64113072 -18.26070537 -19.23818857 -19.56389663 -21.55262674
#  -24.21523059 -27.37294835]
# error
# [ 0.00000000e+00 -1.11022302e-16  5.55111512e-17  7.00000058e-10
#  -2.99999872e-10  4.44089210e-16  1.24900090e-16  9.00000074e-10
#   1.00000008e-10 -5.99999828e-10  5.00000097e-10 -4.00000477e-10
#   9.00000519e-10  0.00000000e+00  2.00000017e-10  2.00000017e-10
#  -6.99999614e-10  8.00000066e-10  1.00000452e-10 -2.00000461e-10
#   5.00000041e-10 -3.00000025e-10  4.00000921e-10  0.00000000e+00
#  -4.99998709e-10  0.00000000e+00  2.00000017e-10  6.00000938e-10
#  -2.00000017e-10  3.00001801e-10  6.00000050e-10  1.70000192e-09
#  -2.99999847e-09  6.00000050e-09 -3.99999855e-09  2.00000372e-09
#  -8.00000066e-09  3.00000735e-09  6.99999703e-09 -7.99999711e-09
#   5.00000397e-09  3.00000025e-09]
# y_42 p=3,q=0
# [-1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31. 37.
#  35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67. 73.
#  71. 77. 75. 81. 79. 85.]
# error
# [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
#  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
# y_ma_3  p=0,q=3
# [ 1.7353783  -0.50072347 -0.41713881 -0.91018717  1.39852138 -2.24933691
#   2.41390188 -0.86647027  0.47300586 -0.32290873  1.5936451  -2.43638975
#   0.07255364  0.02290133  1.56389643 -1.28655634  0.01360389 -0.67511547
#   0.49445922  0.80737877 -1.15170747  1.39853822  0.7644291   0.15754748
#   0.49973031 -1.10022941 -0.10377932 -0.80782921  0.15020676  0.85457798
#  -0.65919966 -0.22412442 -0.43843686 -0.44612387 -0.19616137  0.47088081
#  -0.850328    0.68367951  1.85861918  0.35336458 -0.72543763 -1.10005417]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   5.55111512e-17  5.89805982e-17 -2.22044605e-16  0.00000000e+00
#   5.03069808e-17  0.00000000e+00  5.55111512e-17  0.00000000e+00
#  -2.22044605e-16  2.22044605e-16 -1.11022302e-16  2.77555756e-17
#  -5.55111512e-17  0.00000000e+00  1.38777878e-17  0.00000000e+00
#   2.77555756e-17 -1.11022302e-16  0.00000000e+00  2.77555756e-17
#   0.00000000e+00  0.00000000e+00  2.77555756e-17 -5.55111512e-17
#   1.11022302e-16  0.00000000e+00 -2.22044605e-16  5.55111512e-17
#   1.11022302e-16  0.00000000e+00]
# y_arma  p=3,q=3
# [ 1.7353783  -0.50072347 -0.41713881 -0.92181951  0.36780299 -1.74381749
#   0.23777815 -0.18259022 -0.1241625  -0.37541381  1.16900437 -1.10023468
#  -1.44658815 -1.11449782  0.40721953 -0.90503292 -1.28627579 -1.82756835
#  -1.43961739 -0.66794185 -1.9640337  -0.91623396  0.01579011 -0.03464335
#   0.27521781 -0.78740312 -1.03189499 -1.73038951 -1.70432333 -0.88047878
#  -1.63293955 -2.18512682 -2.69158422 -3.29642905 -3.72094185 -3.50118625
#  -4.61673032 -4.43867496 -2.80081447 -2.76314241 -4.09246638 -5.6093016 ]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.11022302e-16
#   2.77555756e-16  1.00000008e-09 -5.99999994e-10  2.99999942e-10
#   2.00000086e-10  0.00000000e+00 -1.00000008e-10  6.99999836e-10
#  -5.99999828e-10  5.00000041e-10 -3.00000025e-10  4.00000033e-10
#  -1.00000008e-10  2.00000239e-10  6.00000050e-10 -1.11022302e-16
#   1.00000008e-10  1.00000563e-10  3.99999874e-10 -4.99999993e-10
#   2.99999969e-10  3.00000025e-10  2.00000239e-10 -3.99999811e-10
#   8.00000066e-10 -3.99999922e-10  6.00000272e-10 -5.00000041e-10
#   7.00000502e-10 -5.00000041e-10  4.00000033e-10  2.00000017e-10
#   2.00000905e-10 -4.00000033e-10  2.00000461e-10  2.00000461e-10
#  -2.00000017e-10  4.00000921e-10]

def test_integration():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_42_e = [2.62434536, 1.30041627, 0.375950045, -0.006054495, 1.79302332, -0.258324885, 2.36560341, 2.05991608,
              2.08202446, 2.268096861, 3.93116521, 1.524029966, 1.785940822, 2.907008264, 4.739240601, 3.644241619,
              3.872599141, 4.09039776, 5.163201853, 6.71983113, 5.918288374, 7.994664064, 9.614227514, 9.907592133,
              11.0018358, 10.60140606, 11.45342238, 12.11277965, 13.68522082, 16.2595044, 17.02291925, 18.45175859,
              20.22822728, 22.03636243, 24.45382091, 27.75414918, 29.78903788, 33.67970911, 39.18135347, 42.71672304,
              45.4384421, 48.80163439]
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    dy2_center = 0.117178035
    ty2 = [2.62434536, 1.30041627, -0.02351282, -0.54851618, -0.388059035, 3.592101135, -2.30967309, 4.989531705,
           1.75422875, 2.10413284, 2.454169262, 5.594233559, -0.883105278, 2.047851677, 4.028075707, 6.571472937,
           2.549242638, 4.100956663, 4.308196379, 6.236005947, 8.276460406, 5.116745619, 10.07103975, 11.23379096,
           10.20095675, 12.09607946, 10.20097632, 12.3054387, 12.77213692, 15.25766198, 18.83378799, 17.78633411,
           19.88059793, 22.00469597, 23.84449758, 26.87127939, 31.05447745, 31.82392658, 37.57038034, 44.68299784,
           46.2520926, 48.16016116]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    arch = Arch(x)
    d = 2
    dx_c, mean_dx, tx = arch.integration(x=y_42, d=d)
    # error_dx_c = np.array(dy2_c) - dx_c
    # error_tx = np.array(ty2) - tx
    print("dx_c")
    print(dx_c)
    # print("error_dx_c")
    # print(error_dx_c)
    print("tx")
    print(tx)
    # print("error_tx")
    # print(error_tx)
    print("mean_dx")
    print(mean_dx)
# dx_c
# [0.28228483050000025, 0.4252836505000001, 2.0639043205000003, -3.9676040545, 4.5580984655, -3.0467936594999996,
#  0.21061767550000038, 0.04678598650000014, 1.3598179135000001, -4.187381627500001, 2.5518680655000003,
#  0.7419785515000002, 0.5939868604999999, -3.044409353499999, 1.2061784694999993, -0.1277369374999991,
#  0.7378274395000001, 0.3666471494999998, -2.4753500674999995, 2.7607404115, -0.5739902745000004, -1.443376865499999,
#  0.6837010135000007, -1.6118514415000003, 1.135268025499999, -0.30983708449999764, 0.7959058654999985,
#  0.884664375500002, -1.9280467645000008, 0.5482464554999996, 0.23045131549999848, -0.08551157449999598,
#  0.4921452954999989, 0.7656917554999975, -1.3826176044999978, 1.7386044954999993, 1.4937950955000017,
#  -2.0834528244999997, -0.930828544499995, 0.5242951954999885]
# error_dx_c
# [-5.00000263e-10 -5.00000097e-10 -5.00000485e-10 -4.99999597e-10
#  -5.00000041e-10 -5.00000485e-10 -5.00000374e-10 -5.00000139e-10
#   4.99999819e-10 -4.99999153e-10 -5.00000485e-10  1.49999979e-09
#  -1.49999990e-09  1.49999879e-09 -4.99999375e-10 -5.00000902e-10
#   4.99999930e-10 -1.49999985e-09  1.49999968e-09 -5.00000041e-10
#  -4.99999597e-10  4.99998931e-10 -3.50000062e-09  6.50000032e-09
#  -3.49999896e-09 -5.00002373e-10  5.00001485e-10  6.49999798e-09
#  -3.49999918e-09 -5.49999957e-09  2.50000151e-09 -5.00004024e-10
#   2.50000110e-09 -4.99997488e-10 -1.50000212e-09 -1.49999924e-09
#   5.49999823e-09 -9.50000034e-09  4.49999493e-09  2.50001153e-09]
# tx
# [ 2.62434536e+00  1.30041627e+00 -2.35128200e-02 -5.48516180e-01
#  -3.88059035e-01  3.59210114e+00 -2.30967309e+00  4.98953170e+00
#   1.75422875e+00  2.10413284e+00  2.45416926e+00  5.59423356e+00
#  -8.83105278e-01  2.04785168e+00  4.02807571e+00  6.57147294e+00
#   2.54924264e+00  4.10095666e+00  4.30819638e+00  6.23600595e+00
#   8.27646041e+00  5.11674562e+00  1.00710398e+01  1.12337910e+01
#   1.02009568e+01  1.20960795e+01  1.02009763e+01  1.23054387e+01
#   1.27721369e+01  1.52576620e+01  1.88337880e+01  1.77863341e+01
#   1.98805979e+01  2.20046960e+01  2.38444976e+01  2.68712794e+01
#   3.10544774e+01  3.18239266e+01  3.75703803e+01  4.46829978e+01
#   4.62520926e+01  4.81601612e+01]
# error_tx
# [ 0.00000000e+00  0.00000000e+00  1.00613962e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  8.88178420e-16
#   2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00
#  -1.11022302e-16 -9.99999639e-10  1.00000008e-09 -9.99999195e-10
#   9.99999195e-10  0.00000000e+00  0.00000000e+00  9.99999195e-10
#  -1.00000008e-09  9.99999195e-10 -4.00000033e-09 -3.99999855e-09
#  -2.00000017e-09 -7.00000058e-09  0.00000000e+00  1.77635684e-15
#  -1.77635684e-15 -9.99999905e-09  9.99999727e-09  9.99999727e-09
#   0.00000000e+00  3.55271368e-15 -3.55271368e-15  0.00000000e+00
#   3.55271368e-15  0.00000000e+00  0.00000000e+00  1.00000008e-08
#  -1.00000008e-08 -7.10542736e-15]
# mean_dx
# 0.11717803449999982
# dx_c
# [-8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0,
#  8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0]
# tx
# [-1.  5. 11.  1. 15.  5. 19.  9. 23. 13. 27. 17. 31. 21. 35. 25. 39. 29.
#  43. 33. 47. 37. 51. 41. 55. 45. 59. 49. 63. 53. 67. 57. 71. 61. 75. 65.
#  79. 69. 83. 73. 87. 77.]
# mean_dx
# 0.0

def test_generate_white_noise():
    np.random.seed(1)
    e = np.random.standard_normal(size=1460)
    # e = e.tolist()
    np.savetxt(r'D:\minio\waterism\datasets-origin\camels\camels_ystl\arch\e.txt', e)
    # print("e")
    # print(e)

def test_streamflow():
    ystl = Ystl()
    y_streamflow = ystl.streamflow
    print("y_streamflow")
    print(y_streamflow)


def test_Q_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    m = 6
    arch = Arch(x)
    Q = arch.Q_statistic(x=e, m=m)
    print("e")
    print(e)
    print("Q")
    print(Q)
# Q
# 3.407046110144282
# Q  m=1
# 0.17031960620512743

def test_white_noise_test():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    m = 6
    significant = 0.05
    arch = Arch(x)
    b_white_noise = arch.white_noise_test(x=e_100, m=m, significance_level=significant)
    print("b_white_noise")
    print(b_white_noise)
# b_white_noise  m=1
# True
# b_white_noise  m=6
# True
# b_white_noise  m=12
# True
# b_white_noise  m=18
# True
# b_white_noise  m=6  e_1000
# True
# b_white_noise  m=6  e_42
# False
# b_white_noise  m=6  e_60
# False
# b_white_noise  m=6  e_100
# True

def test_arima():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_ar = [1, 1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881, 2.357947691, 2.59374246,
              2.853116706, 3.138428377, 3.452271214, 3.797498336, 4.177248169, 4.594972986, 5.054470285,
              5.559917313, 6.115909045, 6.727499949, 7.400249944, 8.140274939, 8.954302433, 9.849732676,
              10.83470594, 11.91817654, 13.10999419, 14.42099361, 15.86309297, 17.44940227, 19.1943425,
              21.11377675, 23.22515442, 25.54766986, 28.10243685, 30.91268053, 34.00394859, 37.40434344,
              41.14477779, 45.25925557, 49.78518112]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_ma = [1.7353783, -1.36841262, -0.166777075, -0.753366275, 1.45740841, -2.678726045, 2.95109758, -1.57809631,
            0.75515902, -0.35337346, 1.6423096, -2.73567821, 0.763169625, -0.16732928, 1.381313085, -1.61125952,
            0.433033895, -0.736127845, 0.53665943, 0.617224805, -1.336510315, 1.75054977, 0.384745335, 0.10721545,
            0.70512525, -1.078639365, 0.27449017, -0.818807845, 0.255513105, 0.71981598, -0.901322015, 0.004593315,
            -0.433279465, -0.44610282, -0.19312684, 0.378474935, -1.05546158, 0.848587345, 1.5981108, -0.03234046,
            -0.50734116, -0.736194715]
    y_ma_3 = [1.7353783, -0.50072347, -0.41713881, -0.910187173, 1.398521383, -2.249336914, 2.413901882,
              -0.866470275, 0.473005864, -0.32290873, 1.5936451, -2.43638975, 0.072553639, 0.022901334,
              1.563896432, -1.286556336, 0.013603894, -0.675115471, 0.494459221, 0.807378766, -1.151707475,
              1.398538223, 0.764429098, 0.157547476, 0.499730309, -1.100229409, -0.10377932, -0.807829208,
              0.150206757, 0.854577979, -0.659199656, -0.224124415, -0.438436862, -0.446123873, -0.196161369,
              0.470880813, -0.850328004, 0.683679514, 1.858619176, 0.353364577, -0.725437628, -1.100054169]
    y_arma = [1, -0.26841262, -0.462030957, -1.261600327, 0.06964805, -2.60211319, 0.088773071, -1.480445931,
              -0.873331504, -1.314038115, 0.196867674, -2.519123769, -2.00786652, -2.375982452, -1.232267612,
              -2.966753893, -2.830395388, -3.849562771, -3.697859618, -3.450420775, -5.131973167, -3.894620714,
              -3.89933745, -4.182055745, -3.89513607, -5.363289042, -5.625127776, -7.006448398, -7.451580133,
              -7.476922166, -9.125936397, -10.03393672, -11.47060986, -13.06377366, -14.56327787, -15.64113072,
              -18.26070538, -19.23818857, -19.56389662, -21.55262675, -24.21523058, -27.37294835]
    y_arma_3 = [1.7353783, -0.50072347, -0.41713881, -0.92181951, 0.36780299, -1.743817484, 0.237778149, -0.182590216,
                -0.1241625, -0.375413807, 1.169004369, -1.100234682, -1.446588147, -1.114497817, 0.407219526,
                -0.905032923, -1.28627579, -1.82756835, -1.43961739, -0.667941851, -1.964033703, -0.916233958,
                0.015790115, -0.034643347, 0.275217813, -0.787403122, -1.031894986, -1.730389506, -1.704323326,
                -0.880478776, -1.632939545, -2.185126825, -2.691584215, -3.296429054, -3.72094185, -3.501186254,
                -4.616730324, -4.438674962, -2.800814468, -2.76314241, -4.092466378, -5.609301596]
    # i
    y_42_e = [2.62434536, 1.30041627, 0.375950045, -0.006054495, 1.79302332, -0.258324885, 2.36560341, 2.05991608,
              2.08202446, 2.268096861, 3.93116521, 1.524029966, 1.785940822, 2.907008264, 4.739240601, 3.644241619,
              3.872599141, 4.09039776, 5.163201853, 6.71983113, 5.918288374, 7.994664064, 9.614227514, 9.907592133,
              11.0018358, 10.60140606, 11.45342238, 12.11277965, 13.68522082, 16.2595044, 17.02291925, 18.45175859,
              20.22822728, 22.03636243, 24.45382091, 27.75414918, 29.78903788, 33.67970911, 39.18135347, 42.71672304,
              45.4384421, 48.80163439]
    dy2_c = [0.28228483, 0.42528365, 2.06390432, -3.967604055, 4.558098465, -3.04679366, 0.210617675, 0.046785986,
             1.359817914, -4.187381628, 2.551868065, 0.741978553, 0.593986859, -3.044409352, 1.206178469, -0.127736938,
             0.73782744, 0.366647148, -2.475350066, 2.760740411, -0.573990275, -1.443376865, 0.68370101, -1.611851435,
             1.135268022, -0.309837085, 0.795905866, 0.884664382, -1.928046768, 0.54824645, 0.230451318, -0.085511575,
             0.492145298, 0.765691755, -1.382617606, 1.738604494, 1.493795101, -2.083452834, -0.93082854, 0.524295198]
    dy2_center = 0.117178035
    ty2 = [2.62434536, 1.30041627, -0.02351282, -0.54851618, -0.388059035, 3.592101135, -2.30967309, 4.989531705,
           1.75422875, 2.10413284, 2.454169262, 5.594233559, -0.883105278, 2.047851677, 4.028075707, 6.571472937,
           2.549242638, 4.100956663, 4.308196379, 6.236005947, 8.276460406, 5.116745619, 10.07103975, 11.23379096,
           10.20095675, 12.09607946, 10.20097632, 12.3054387, 12.77213692, 15.25766198, 18.83378799, 17.78633411,
           19.88059793, 22.00469597, 23.84449758, 26.87127939, 31.05447745, 31.82392658, 37.57038034, 44.68299784,
           46.2520926, 48.16016116]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    y_arima_ = [-1, 3.63158738, 2.833222925, 8.246633725, 8.45740841, 10.32127396, 13.95109758, 15.42190369,
               15.75515902, 20.64662654, 20.6423096, 22.26432179, 23.76316963, 28.83267072, 28.38131309,
               31.38874048, 31.4330339, 36.26387216, 35.53665943, 41.61722481, 37.66348969, 46.75054977,
               43.38474534, 49.10721545, 47.70512525, 51.92136064, 51.27449017, 56.18119216, 55.25551311,
               61.71981598, 58.09867799, 65.00459332, 62.56672054, 68.55389718, 66.80687316, 73.37847494,
               69.94453842, 77.84858735, 76.5981108, 80.96765954, 78.49265884, 84.26380529]
    y_ima_p0d2q1 = [1.7353783, 2.102343981, 2.302532586, 1.749354917, 2.653585657, 0.879090353, 2.055692629, 1.654198595,
             2.007863581, 2.008155108, 3.650756234, 2.557679151, 2.227771692, 1.730534954, 2.614611301, 1.887428128,
             1.59327885, 0.563001728, 0.069384035, 0.192991147, -1.019912055, -0.482265487, 0.440126416, 1.469733769,
             3.204466372, 3.86055961, 4.791143018, 4.902918582, 5.27020725, 6.357311899, 6.543094533, 6.733470482,
             6.490566966, 5.80156063, 4.919427454, 4.415769214, 2.856649393, 2.146116918, 3.033695243, 3.888933107,
             4.236829812, 3.848531803]
    arch = Arch(x)
    phi = []
    theta = [0.5]
    # theta = [0.3, 0.2, 0.1]
    p = 0
    d = 2
    q = 1
    y_arima = arch.arima(x=y_ima_p0d2q1, e=e, phi=None, theta=theta, p=p, d=d, q=q)
    error = np.array(y_ima_p0d2q1) - y_arima
    print("y_arima")
    print(y_arima)
    print("error")
    print(error)
    # dx_c, mean_dx, tx = arch.arima(x=y_42_e, e=None, phi=None, theta=None, p=p, d=d, q=q)
    # error_dx_c = np.array(dy2_c) - dx_c
    # error_tx = np.array(ty2) - tx
    # print("dx_c")
    # print(dx_c)
    # print("error_dx_c")
    # print(error_dx_c)
    # print("tx")
    # print(tx)
    # print("error_tx")
    # print(error_tx)
    # print("mean_dx")
    # print(mean_dx)
# y_ar
# [ 1.          1.1         1.21        1.331       1.4641      1.61051
#   1.771561    1.9487171   2.14358881  2.35794769  2.59374246  2.85311671
#   3.13842838  3.45227121  3.79749834  4.17724817  4.59497299  5.05447028
#   5.55991731  6.11590904  6.72749995  7.40024994  8.14027494  8.95430243
#   9.84973268 10.83470594 11.91817653 13.10999419 14.42099361 15.86309297
#  17.44940227 19.1943425  21.11377675 23.22515443 25.54766986 28.10243685
#  30.91268054 34.00394858 37.40434345 41.14477778 45.25925557 49.78518113]
# error
# [ 0.00000000e+00  0.00000000e+00 -2.22044605e-16  0.00000000e+00
#  -2.22044605e-16  0.00000000e+00 -2.22044605e-16  0.00000000e+00
#  -4.44089210e-16  0.00000000e+00 -1.00000452e-10 -4.44089210e-16
#   4.00000033e-10 -7.00000058e-10  5.99999606e-10 -6.00000050e-10
#   9.99991201e-11  3.99999145e-10 -5.00000930e-10  7.00000058e-10
#  -5.00000930e-10  9.99991201e-11  5.99998273e-10  1.00000008e-10
#  -3.00001801e-10 -3.60000207e-09  5.99999872e-09 -4.00000033e-09
#   9.99998306e-10 -1.00000186e-09  3.00000025e-09  3.00000025e-09
#  -3.55271368e-15 -5.00000397e-09 -2.00000017e-09  4.00000033e-09
#  -5.00000397e-09  6.99999703e-09 -9.00000430e-09  6.00000050e-09
#   9.99996530e-10 -7.00000413e-09]
# y_ma
# [ 1.7353783  -1.36841262 -0.16677708 -0.75336627  1.45740841 -2.67872605
#   2.95109758 -1.57809631  0.75515902 -0.35337346  1.6423096  -2.73567821
#   0.76316962 -0.16732928  1.38131309 -1.61125952  0.4330339  -0.73612784
#   0.53665943  0.6172248  -1.33651031  1.75054977  0.38474534  0.10721545
#   0.70512525 -1.07863936  0.27449017 -0.81880785  0.25551311  0.71981598
#  -0.90132201  0.00459331 -0.43327947 -0.44610282 -0.19312684  0.37847494
#  -1.05546158  0.84858734  1.5981108  -0.03234046 -0.50734116 -0.73619472]
# error
# [ 0.00000000e+00  0.00000000e+00  5.55111512e-17  0.00000000e+00
#   0.00000000e+00  4.44089210e-16  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  5.55111512e-17  0.00000000e+00 -4.44089210e-16
#   0.00000000e+00  2.77555756e-17 -2.22044605e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  1.11022302e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00 -5.55111512e-17  1.38777878e-17
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  1.30104261e-17
#   5.55111512e-17  0.00000000e+00  2.77555756e-17  0.00000000e+00
#   0.00000000e+00  0.00000000e+00 -2.22044605e-16  1.38777878e-17
#   0.00000000e+00  1.11022302e-16]
# dx_c  p=0,d=2,q=0
# [0.28228483050000025, 0.4252836505000001, 2.0639043205000003, -3.9676040545, 4.5580984655, -3.0467936594999996,
#  0.21061767550000038, 0.04678598650000014, 1.3598179135000001, -4.187381627500001, 2.5518680655000003,
#  0.7419785515000002, 0.5939868604999999, -3.044409353499999, 1.2061784694999993, -0.1277369374999991,
#  0.7378274395000001, 0.3666471494999998, -2.4753500674999995, 2.7607404115, -0.5739902745000004, -1.443376865499999,
#  0.6837010135000007, -1.6118514415000003, 1.135268025499999, -0.30983708449999764, 0.7959058654999985,
#  0.884664375500002, -1.9280467645000008, 0.5482464554999996, 0.23045131549999848, -0.08551157449999598,
#  0.4921452954999989, 0.7656917554999975, -1.3826176044999978, 1.7386044954999993, 1.4937950955000017,
#  -2.0834528244999997, -0.930828544499995, 0.5242951954999885]
# error_dx_c
# [-5.00000263e-10 -5.00000097e-10 -5.00000485e-10 -4.99999597e-10
#  -5.00000041e-10 -5.00000485e-10 -5.00000374e-10 -5.00000139e-10
#   4.99999819e-10 -4.99999153e-10 -5.00000485e-10  1.49999979e-09
#  -1.49999990e-09  1.49999879e-09 -4.99999375e-10 -5.00000902e-10
#   4.99999930e-10 -1.49999985e-09  1.49999968e-09 -5.00000041e-10
#  -4.99999597e-10  4.99998931e-10 -3.50000062e-09  6.50000032e-09
#  -3.49999896e-09 -5.00002373e-10  5.00001485e-10  6.49999798e-09
#  -3.49999918e-09 -5.49999957e-09  2.50000151e-09 -5.00004024e-10
#   2.50000110e-09 -4.99997488e-10 -1.50000212e-09 -1.49999924e-09
#   5.49999823e-09 -9.50000034e-09  4.49999493e-09  2.50001153e-09]
# tx
# [ 2.62434536e+00  1.30041627e+00 -2.35128200e-02 -5.48516180e-01
#  -3.88059035e-01  3.59210114e+00 -2.30967309e+00  4.98953170e+00
#   1.75422875e+00  2.10413284e+00  2.45416926e+00  5.59423356e+00
#  -8.83105278e-01  2.04785168e+00  4.02807571e+00  6.57147294e+00
#   2.54924264e+00  4.10095666e+00  4.30819638e+00  6.23600595e+00
#   8.27646041e+00  5.11674562e+00  1.00710398e+01  1.12337910e+01
#   1.02009568e+01  1.20960795e+01  1.02009763e+01  1.23054387e+01
#   1.27721369e+01  1.52576620e+01  1.88337880e+01  1.77863341e+01
#   1.98805979e+01  2.20046960e+01  2.38444976e+01  2.68712794e+01
#   3.10544774e+01  3.18239266e+01  3.75703803e+01  4.46829978e+01
#   4.62520926e+01  4.81601612e+01]
# error_tx
# [ 0.00000000e+00  0.00000000e+00  1.00613962e-16  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  8.88178420e-16
#   2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00
#  -1.11022302e-16 -9.99999639e-10  1.00000008e-09 -9.99999195e-10
#   9.99999195e-10  0.00000000e+00  0.00000000e+00  9.99999195e-10
#  -1.00000008e-09  9.99999195e-10 -4.00000033e-09 -3.99999855e-09
#  -2.00000017e-09 -7.00000058e-09  0.00000000e+00  1.77635684e-15
#  -1.77635684e-15 -9.99999905e-09  9.99999727e-09  9.99999727e-09
#   0.00000000e+00  3.55271368e-15 -3.55271368e-15  0.00000000e+00
#   3.55271368e-15  0.00000000e+00  0.00000000e+00  1.00000008e-08
#  -1.00000008e-08 -7.10542736e-15]
# mean_dx
# 0.11717803449999982
# y_arima
# [  1.          -0.26841262  -0.46203096  -0.22201859  -1.26558416
#    1.07079317  -6.72136417   7.10519854  -6.97589844   1.7790995
#   -1.260315     1.12359216  -9.11680928   1.89075827  -2.32537254
#   -0.03207518  -7.42950425  -1.3675122   -5.59842594  -1.63625081
#   -4.42945973  -7.18014288   0.94299567  -5.15839158  -4.06072724
#   -4.05553073  -8.48280849  -5.37410543  -9.35896273  -6.14236485
#   -7.93709428 -12.55167347 -10.55537795 -13.93020266 -15.01748076
#  -15.57655833 -17.30590539 -21.72286342 -16.80653708 -19.20026921
#  -25.87329907 -28.35056693]
# error
# [ 0.00000000e+00 -1.11022302e-16 -1.66533454e-16 -1.03958173e+00
#   1.33523221e+00 -3.67290636e+00  6.81013724e+00 -8.58564447e+00
#   6.10256694e+00 -3.09313761e+00  1.45718268e+00 -3.64271592e+00
#   7.10894276e+00 -4.26674073e+00  1.09310492e+00 -2.93467871e+00
#   4.59910886e+00 -2.48205057e+00  1.90056632e+00 -1.81416997e+00
#  -7.02513442e-01  3.28552217e+00 -4.84233312e+00  9.76335836e-01
#   1.65591172e-01 -1.30775831e+00  2.85768072e+00 -1.63234297e+00
#   1.90738260e+00 -1.33455732e+00 -1.18884212e+00  2.51773675e+00
#  -9.15231914e-01  8.66428996e-01  4.54202893e-01 -6.45723869e-02
#  -9.54799989e-01  2.48467485e+00 -2.75735954e+00 -2.35235754e+00
#   1.65806849e+00  9.77618582e-01]
# y_arima p=3 q=0
# [-1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31. 37.
#  35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67. 73.
#  71. 77. 75. 81. 79. 85.]
# error
# [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
#  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
# y_ma_3  p=0,q=3
# [ 1.7353783  -0.50072347 -0.41713881 -0.91018717  1.39852138 -2.24933691
#   2.41390188 -0.86647027  0.47300586 -0.32290873  1.5936451  -2.43638975
#   0.07255364  0.02290133  1.56389643 -1.28655634  0.01360389 -0.67511547
#   0.49445922  0.80737877 -1.15170747  1.39853822  0.7644291   0.15754748
#   0.49973031 -1.10022941 -0.10377932 -0.80782921  0.15020676  0.85457798
#  -0.65919966 -0.22412442 -0.43843686 -0.44612387 -0.19616137  0.47088081
#  -0.850328    0.68367951  1.85861918  0.35336458 -0.72543763 -1.10005417]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   2.22044605e-16  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  0.00000000e+00
#   5.55111512e-17  5.89805982e-17 -2.22044605e-16  0.00000000e+00
#   5.03069808e-17  0.00000000e+00  5.55111512e-17  0.00000000e+00
#  -2.22044605e-16  2.22044605e-16 -1.11022302e-16  2.77555756e-17
#  -5.55111512e-17  0.00000000e+00  1.38777878e-17  0.00000000e+00
#   2.77555756e-17 -1.11022302e-16  0.00000000e+00  2.77555756e-17
#   0.00000000e+00  0.00000000e+00  2.77555756e-17 -5.55111512e-17
#   1.11022302e-16  0.00000000e+00 -2.22044605e-16  5.55111512e-17
#   1.11022302e-16  0.00000000e+00]
# y_arima  p=3,q=3
# [ 1.7353783  -0.50072347 -0.41713881 -0.92181951  0.36780299 -1.74381749
#   0.23777815 -0.18259022 -0.1241625  -0.37541381  1.16900437 -1.10023468
#  -1.44658815 -1.11449782  0.40721953 -0.90503292 -1.28627579 -1.82756835
#  -1.43961739 -0.66794185 -1.9640337  -0.91623396  0.01579011 -0.03464335
#   0.27521781 -0.78740312 -1.03189499 -1.73038951 -1.70432333 -0.88047878
#  -1.63293955 -2.18512682 -2.69158422 -3.29642905 -3.72094185 -3.50118625
#  -4.61673032 -4.43867496 -2.80081447 -2.76314241 -4.09246638 -5.6093016 ]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.11022302e-16
#   2.77555756e-16  1.00000008e-09 -5.99999994e-10  2.99999942e-10
#   2.00000086e-10  0.00000000e+00 -1.00000008e-10  6.99999836e-10
#  -5.99999828e-10  5.00000041e-10 -3.00000025e-10  4.00000033e-10
#  -1.00000008e-10  2.00000239e-10  6.00000050e-10 -1.11022302e-16
#   1.00000008e-10  1.00000563e-10  3.99999874e-10 -4.99999993e-10
#   2.99999969e-10  3.00000025e-10  2.00000239e-10 -3.99999811e-10
#   8.00000066e-10 -3.99999922e-10  6.00000272e-10 -5.00000041e-10
#   7.00000502e-10 -5.00000041e-10  4.00000033e-10  2.00000017e-10
#   2.00000905e-10 -4.00000033e-10  2.00000461e-10  2.00000461e-10
#  -2.00000017e-10  4.00000921e-10]
# y_arima_ p=1,d=2,q=1
# [-1.          3.63158738  2.83322292  6.76842198  8.96265563 11.24907112
#  13.54012418 14.29384477 19.86386428 16.92956962 22.67916942 22.85507686
#  23.08015243 25.27483049 31.7698096  31.89653261 31.4273947  33.7613114
#  36.90180296 41.04170045 39.61047972 45.55158279 43.23853794 52.63599882
#  46.50351422 52.40593395 50.85073856 54.72889567 55.84681275 60.93900903
#  59.94979287 64.62455213 61.00715382 69.083511   65.97987551 73.22950269
#  70.63296729 77.4217055  76.06973958 84.52679722 79.26681978 82.18299082]
# error
# [ 0.00000000e+00  0.00000000e+00  4.44089210e-16  1.47821174e+00
#  -5.05247224e-01 -9.27797159e-01  4.10973402e-01  1.12805892e+00
#  -4.10870526e+00  3.71705692e+00 -2.03685982e+00 -5.90755073e-01
#   6.83017202e-01  3.55784023e+00 -3.38849651e+00 -5.07792133e-01
#   5.63920150e-03  2.50256076e+00 -1.36514353e+00  5.75524362e-01
#  -1.94699003e+00  1.19896698e+00  1.46207402e-01 -3.52878337e+00
#   1.20161103e+00 -4.84573308e-01  4.23751606e-01  1.45229649e+00
#  -5.91299638e-01  7.80806947e-01 -1.85111488e+00  3.80041191e-01
#   1.55956672e+00 -5.29613823e-01  8.26997646e-01  1.48972251e-01
#  -6.88428873e-01  4.26881851e-01  5.28371217e-01 -3.55913768e+00
#  -7.74160943e-01  2.08081447e+00]
# y_ima_p0d2q1
# [ 1.7353783   2.10234398  2.30253259  1.74935492  2.65358566  0.87909035
#   2.05569263  1.6541986   2.00786358  2.00815511  3.65075623  2.55767915
#   2.22777169  1.73053495  2.6146113   1.88742813  1.59327885  0.56300173
#   0.06938404  0.19299115 -1.01991206 -0.48226549  0.44012642  1.46973377
#   3.20446637  3.86055961  4.79114302  4.90291858  5.27020725  6.3573119
#   6.54309453  6.73347048  6.49056697  5.80156063  4.91942745  4.41576921
#   2.85664939  2.14611692  3.03369524  3.88893311  4.23682981  3.8485318 ]
# error
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.00000030e-09
#  -1.00000008e-09  1.00000053e-09  0.00000000e+00 -2.22044605e-16
#   4.44089210e-16  9.99999639e-10 -9.99999639e-10  9.99999639e-10
#  -9.99999195e-10  9.99999639e-10  0.00000000e+00 -2.22044605e-16
#   0.00000000e+00  1.00000019e-09 -1.00000021e-09  2.77555756e-17
#   9.99999861e-10  4.99600361e-16 -5.55111512e-17  0.00000000e+00
#   0.00000000e+00  0.00000000e+00  0.00000000e+00  1.00000097e-09
#  -1.00000008e-09  9.99999195e-10  0.00000000e+00  8.88178420e-16
#  -8.88178420e-16  0.00000000e+00  0.00000000e+00  1.00000008e-09
#  -9.99999639e-10  1.00000008e-09 -4.44089210e-16 -9.99999639e-10
#   9.99999195e-10  1.00000008e-09]

def test_arma_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    y_ar = [1, 1.1, 1.21, 1.331, 1.4641, 1.61051, 1.771561, 1.9487171, 2.14358881, 2.357947691, 2.59374246,
              2.853116706, 3.138428377, 3.452271214, 3.797498336, 4.177248169, 4.594972986, 5.054470285,
              5.559917313, 6.115909045, 6.727499949, 7.400249944, 8.140274939, 8.954302433, 9.849732676,
              10.83470594, 11.91817654, 13.10999419, 14.42099361, 15.86309297, 17.44940227, 19.1943425,
              21.11377675, 23.22515442, 25.54766986, 28.10243685, 30.91268053, 34.00394859, 37.40434344,
              41.14477779, 45.25925557, 49.78518112]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_ma = [1.7353783, -1.36841262, -0.166777075, -0.753366275, 1.45740841, -2.678726045, 2.95109758, -1.57809631,
            0.75515902, -0.35337346, 1.6423096, -2.73567821, 0.763169625, -0.16732928, 1.381313085, -1.61125952,
            0.433033895, -0.736127845, 0.53665943, 0.617224805, -1.336510315, 1.75054977, 0.384745335, 0.10721545,
            0.70512525, -1.078639365, 0.27449017, -0.818807845, 0.255513105, 0.71981598, -0.901322015, 0.004593315,
            -0.433279465, -0.44610282, -0.19312684, 0.378474935, -1.05546158, 0.848587345, 1.5981108, -0.03234046,
            -0.50734116, -0.736194715]
    y_arma = [1, -0.26841262, -0.462030957, -1.261600327, 0.06964805, -2.60211319, 0.088773071, -1.480445931,
              -0.873331504, -1.314038115, 0.196867674, -2.519123769, -2.00786652, -2.375982452, -1.232267612,
              -2.966753893, -2.830395388, -3.849562771, -3.697859618, -3.450420775, -5.131973167, -3.894620714,
              -3.89933745, -4.182055745, -3.89513607, -5.363289042, -5.625127776, -7.006448398, -7.451580133,
              -7.476922166, -9.125936397, -10.03393672, -11.47060986, -13.06377366, -14.56327787, -15.64113072,
              -18.26070538, -19.23818857, -19.56389662, -21.55262675, -24.21523058, -27.37294835]
    y_arma_3 = [1.7353783, -0.50072347, -0.41713881, -0.92181951, 0.36780299, -1.743817484, 0.237778149, -0.182590216,
                -0.1241625, -0.375413807, 1.169004369, -1.100234682, -1.446588147, -1.114497817, 0.407219526,
                -0.905032923, -1.28627579, -1.82756835, -1.43961739, -0.667941851, -1.964033703, -0.916233958,
                0.015790115, -0.034643347, 0.275217813, -0.787403122, -1.031894986, -1.730389506, -1.704323326,
                -0.880478776, -1.632939545, -2.185126825, -2.691584215, -3.296429054, -3.72094185, -3.501186254,
                -4.616730324, -4.438674962, -2.800814468, -2.76314241, -4.092466378, -5.609301596]
    dx_c_42 = [-8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0,
               -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0, -8.0, 8.0,
               -8.0, 8.0, -8.0, 8.0]
    arch = Arch(x)
    p = 1
    q = 0
    phi, theat, R_2, B_1 = arch.arma_least_squares_estimation(dx_c_42, e=e, p=p, q=q)
    print("phi")
    print(phi)
    print("theat")
    print(theat)
    print("R_2")
    print(R_2)
# phi
# [1.1]
# theat
# []
# R_2
# 1.0000000000000004
# phi
# []
# theat
# [0.5]
# R_2
# 1.0000000000000004
# phi
# [1.1]
# theat
# [0.5]
# R_2
# 0.9999999999999996

# y_42
# phi
# [ 1.  1. -1.]
# theat
# []
# R_2
# 1.0000000000000004

# y_arma_3
# phi
# [ 1.1 -0.2  0.2]
# theat
# [0.3 0.2 0.1]
# R_2
# 1.0000000000000004

# dx_c_42
# phi
# [-1.]
# theat
# []
# R_2
# 1.0

def test_x_residual():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_42 = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35, 41, 39, 45, 43, 49, 47,
            53, 51, 57, 55, 61, 59, 65, 63, 69, 67, 73, 71, 77, 75, 81, 79, 85]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_arma = [1, -0.26841262, -0.462030957, -1.261600327, 0.06964805, -2.60211319, 0.088773071, -1.480445931,
              -0.873331504, -1.314038115, 0.196867674, -2.519123769, -2.00786652, -2.375982452, -1.232267612,
              -2.966753893, -2.830395388, -3.849562771, -3.697859618, -3.450420775, -5.131973167, -3.894620714,
              -3.89933745, -4.182055745, -3.89513607, -5.363289042, -5.625127776, -7.006448398, -7.451580133,
              -7.476922166, -9.125936397, -10.03393672, -11.47060986, -13.06377366, -14.56327787, -15.64113072,
              -18.26070538, -19.23818857, -19.56389662, -21.55262675, -24.21523058, -27.37294835]
    y_arma_3 = [1.7353783, -0.50072347, -0.41713881, -0.92181951, 0.36780299, -1.743817484, 0.237778149, -0.182590216,
                -0.1241625, -0.375413807, 1.169004369, -1.100234682, -1.446588147, -1.114497817, 0.407219526,
                -0.905032923, -1.28627579, -1.82756835, -1.43961739, -0.667941851, -1.964033703, -0.916233958,
                0.015790115, -0.034643347, 0.275217813, -0.787403122, -1.031894986, -1.730389506, -1.704323326,
                -0.880478776, -1.632939545, -2.185126825, -2.691584215, -3.296429054, -3.72094185, -3.501186254,
                -4.616730324, -4.438674962, -2.800814468, -2.76314241, -4.092466378, -5.609301596]
    y_arima_ = [-1, 3.63158738, 2.833222925, 8.246633725, 8.45740841, 10.32127396, 13.95109758, 15.42190369,
               15.75515902, 20.64662654, 20.6423096, 22.26432179, 23.76316963, 28.83267072, 28.38131309,
               31.38874048, 31.4330339, 36.26387216, 35.53665943, 41.61722481, 37.66348969, 46.75054977,
               43.38474534, 49.10721545, 47.70512525, 51.92136064, 51.27449017, 56.18119216, 55.25551311,
               61.71981598, 58.09867799, 65.00459332, 62.56672054, 68.55389718, 66.80687316, 73.37847494,
               69.94453842, 77.84858735, 76.5981108, 80.96765954, 78.49265884, 84.26380529]
    arch = Arch(x)
    p = 3
    d = 0
    q = 3
    x_residual, y_t, R_2, phi, theta, se_beta = arch.x_residual(y_arma_3_100, e_100, p, d, q)
    print("x_residual")
    print(x_residual)
    print("y_t")
    print(y_t)
    print("R_2")
    print(R_2)
    print("phi")
    print(phi)
    print("theta")
    print(theta)
    print("se_beta")
    print(se_beta)
# x_residual
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  4.13844514e-11
#   1.56662294e-10  7.87194754e-10 -1.77807047e-10 -2.26987956e-10
#   5.21301516e-10 -1.11195664e-10 -1.12275078e-10  4.90903318e-10
#  -1.61525904e-10  2.20385710e-10 -3.22448512e-10  2.88028601e-10
#   1.70512715e-10  4.63185046e-12  6.24862828e-10 -1.06068154e-10
#   8.88311646e-12  2.75892309e-10  1.98695019e-11 -5.22870115e-10
#   3.20349025e-10  1.27309052e-10  3.13661319e-10 -5.37479616e-10
#   8.55849835e-10 -4.94138064e-10  4.74455808e-10 -3.66128017e-10
#   5.77501602e-10 -5.54486235e-10  3.70079523e-10  1.00500497e-10
#   3.07363024e-11 -3.61678687e-10 -1.22156951e-10 -1.31422873e-10
#  -2.18366658e-10  2.72983414e-10]
# y_arma_3
# [ 1.7353783  -0.50072347 -0.41713881 -0.92181951  0.36780299 -1.74381748
#   0.23777815 -0.18259022 -0.1241625  -0.37541381  1.16900437 -1.10023468
#  -1.44658815 -1.11449782  0.40721953 -0.90503292 -1.28627579 -1.82756835
#  -1.43961739 -0.66794185 -1.9640337  -0.91623396  0.01579011 -0.03464335
#   0.27521781 -0.78740312 -1.03189499 -1.73038951 -1.70432333 -0.88047878
#  -1.63293955 -2.18512682 -2.69158422 -3.29642905 -3.72094185 -3.50118625
#  -4.61673032 -4.43867496 -2.80081447 -2.76314241 -4.09246638 -5.6093016 ]
# R_2
# 1.0000000000000004
# x_residual
# [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
#  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
# y_42
# [-1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31. 37.
#  35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67. 73.
#  71. 77. 75. 81. 79. 85.]
# R_2
# 1.0
# a_diagonal
# [0.00040064]
# x_residual
# [ 0.          0.          0.          0.79397652 -0.51466611  1.725641
#  -1.13232029 -0.00205007 -0.03471921 -0.21012213 -1.28683611  1.3571145
#   0.88347822  0.06122573 -0.92980285  0.46681841  0.52890566  0.52307427
#   0.26695905 -0.98332938  1.09859177 -1.30175444 -1.02333415 -1.08610094
#  -0.88577079  0.10027781  0.39070302  0.57043108  0.58939896 -0.86480166
#   0.70081002  0.15259318  0.89384488  0.6000891   0.97346217 -0.23584514
#   1.24215142 -0.38789033 -1.58760219 -1.48718962  0.15588401  0.53697959]
# y_42
# [-1.          5.          3.          8.20602348  7.51466611 11.274359
#  12.13232029 17.00205007 15.03471921 21.21012213 20.28683611 23.6428855
#  22.11652178 28.93877427 27.92980285 32.53318159 30.47109434 36.47692573
#  34.73304095 41.98332938 37.90140823 46.30175444 44.02333415 50.08610094
#  47.88577079 52.89972219 50.60929698 56.42956892 54.41060104 61.86480166
#  58.29918998 64.84740682 62.10615512 68.3999109  66.02653783 73.23584514
#  69.75784858 77.38789033 76.58760219 82.48718962 78.84411599 84.46302041]
# R_2
# 0.9893443873943417
# phi
# [-1.03210395]
# theta
# [-0.21305252]
# a_diagonal
# [0.00044262 0.0325121]
# x_residual
# [ 0.00000000e+00  0.00000000e+00  4.44089210e-16  1.40331335e+00
#  -8.17717294e-01 -4.99646601e-01 -3.29780729e-01  1.84984922e+00
#  -4.27926446e+00  3.93349275e+00 -2.04579485e+00  5.20593307e-02
#   2.96326628e-02  3.53882280e+00 -3.44268153e+00  1.84931853e-02
#  -3.06962969e-01  2.54767613e+00 -1.60210167e+00  7.07292812e-01
#  -1.66289830e+00  9.33161702e-01  6.11715380e-01 -3.06226425e+00
#   1.44870941e+00 -3.69034572e-02  2.54079400e-01  1.52194864e+00
#  -8.51870393e-01  8.01416393e-01 -1.58802027e+00  2.62271187e-01
#   1.47652842e+00 -6.48347871e-01  5.89154885e-01  3.03825909e-02
#  -6.24899347e-01  1.54941652e-01  6.70700736e-01 -2.82999462e+00
#  -4.28358225e-01  2.13245049e+00]
# y_arima_
# [-1.          3.63158738  2.83322292  6.84332038  9.2751257  10.82092056
#  14.28087831 13.57205447 20.03442348 16.71313379 22.68810445 22.21226246
#  23.73353697 25.29384792 31.82399462 31.37024729 31.73999687 33.71619603
#  37.1387611  40.909932   39.32638799 45.81738807 42.77302996 52.1694797
#  46.25641584 51.9582641  51.02041077 54.65924352 56.1073835  60.91839959
#  59.68669826 64.74232213 61.09019212 69.20224505 66.21771828 73.34809235
#  70.56943777 77.6936457  75.92741006 83.79765416 78.92101707 82.1313548 ]
# R_2
# 0.9430946447793861
# phi
# [-0.99651228]
# theta
# [0.86154508]
# se_beta
# [0.03930439469615502, 0.29713902184498536]
# x_residual  p=1,d=2,q=0
# [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
#  0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
# y_42
# [-1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31. 37.
#  35. 41. 39. 45. 43. 49. 47. 53. 51. 57. 55. 61. 59. 65. 63. 69. 67. 73.
#  71. 77. 75. 81. 79. 85.]
# R_2
# 1.0
# phi
# [-1.]
# theta
# []
# se_beta
# [nan]
# x_residual  p=1,d=2,q=1
# [ 0.          0.          0.          0.79397652 -0.51466611  1.725641
#  -1.13232029 -0.00205007 -0.03471921 -0.21012213 -1.28683611  1.3571145
#   0.88347822  0.06122573 -0.92980285  0.46681841  0.52890566  0.52307427
#   0.26695905 -0.98332938  1.09859177 -1.30175444 -1.02333415 -1.08610094
#  -0.88577079  0.10027781  0.39070302  0.57043108  0.58939896 -0.86480166
#   0.70081002  0.15259318  0.89384488  0.6000891   0.97346217 -0.23584514
#   1.24215142 -0.38789033 -1.58760219 -1.48718962  0.15588401  0.53697959]
# y_42
# [-1.          5.          3.          8.20602348  7.51466611 11.274359
#  12.13232029 17.00205007 15.03471921 21.21012213 20.28683611 23.6428855
#  22.11652178 28.93877427 27.92980285 32.53318159 30.47109434 36.47692573
#  34.73304095 41.98332938 37.90140823 46.30175444 44.02333415 50.08610094
#  47.88577079 52.89972219 50.60929698 56.42956892 54.41060104 61.86480166
#  58.29918998 64.84740682 62.10615512 68.3999109  66.02653783 73.23584514
#  69.75784858 77.38789033 76.58760219 82.48718962 78.84411599 84.46302041]
# R_2
# 0.9893443873943417
# phi
# [-1.03210395]
# theta
# [-0.21305252]
# se_beta
# [0.018171873517133032, 0.15570320780260488]
# x_residual  p=3,d=0,q=3
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  4.13844514e-11
#   1.56662294e-10  7.87194754e-10 -1.77807047e-10 -2.26987956e-10
#   5.21301516e-10 -1.11195664e-10 -1.12275078e-10  4.90903318e-10
#  -1.61525904e-10  2.20385710e-10 -3.22448512e-10  2.88028601e-10
#   1.70512715e-10  4.63185046e-12  6.24862828e-10 -1.06068154e-10
#   8.88311646e-12  2.75892309e-10  1.98695019e-11 -5.22870115e-10
#   3.20349025e-10  1.27309052e-10  3.13661319e-10 -5.37479616e-10
#   8.55849835e-10 -4.94138064e-10  4.74455808e-10 -3.66128017e-10
#   5.77501602e-10 -5.54486235e-10  3.70079523e-10  1.00500497e-10
#   3.07363024e-11 -3.61678687e-10 -1.22156951e-10 -1.31422873e-10
#  -2.18366658e-10  2.72983414e-10]
# y_arma_3
# [ 1.7353783  -0.50072347 -0.41713881 -0.92181951  0.36780299 -1.74381748
#   0.23777815 -0.18259022 -0.1241625  -0.37541381  1.16900437 -1.10023468
#  -1.44658815 -1.11449782  0.40721953 -0.90503292 -1.28627579 -1.82756835
#  -1.43961739 -0.66794185 -1.9640337  -0.91623396  0.01579011 -0.03464335
#   0.27521781 -0.78740312 -1.03189499 -1.73038951 -1.70432333 -0.88047878
#  -1.63293955 -2.18512682 -2.69158422 -3.29642905 -3.72094185 -3.50118625
#  -4.61673032 -4.43867496 -2.80081447 -2.76314241 -4.09246638 -5.6093016 ]
# R_2
# 1.0000000000000004
# phi
# [ 1.1 -0.2  0.2]
# theta
# [0.3 0.2 0.1]
# se_beta
# [3.526733475186766e-10, 3.718670773606283e-10, 1.7479428215457548e-10, 3.5304111238549773e-10, 1.746122221821107e-10, 1.4576179032287249e-10]
# x_residual
# [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  7.07850714e-06
#  -1.84118727e-05 -4.96932612e-05  1.18716461e-05 -3.45149134e-06
#   4.65827736e-05  1.32450478e-05 -5.69784772e-06 -4.83891361e-05
#  -1.44751510e-05  5.08497398e-05 -3.52324284e-05  1.16367642e-05
#  -3.19466688e-05  4.71479075e-05  4.69608181e-06  2.38304425e-06
#  -2.82728804e-05  2.06828106e-05 -1.24679889e-05  2.06018725e-06
#  -4.17025513e-05 -7.57017405e-06  2.76334732e-05  3.51475450e-05
#   9.44212707e-07 -5.93816667e-05  4.89211652e-05  3.96426060e-05
#   5.80358517e-06 -2.94243875e-05 -6.02725046e-05  4.26012989e-05
#  -1.31698825e-05  1.08831058e-05 -6.79371946e-06  4.91008551e-05
#  -4.64820912e-05 -2.83401571e-05  5.04359283e-05 -5.28636854e-05
#   2.05063723e-05  9.30135202e-06  1.16044390e-05 -4.99421408e-05
#  -2.21851146e-05  2.55310521e-05 -1.76202885e-05 -3.26287740e-05
#   5.26421105e-07 -3.04370898e-05  2.32499499e-05  2.98514539e-05
#  -2.08165477e-05  5.23228914e-06 -8.29142066e-06  4.84658205e-05
#  -4.48634019e-06 -4.06970031e-05  3.65988431e-05  9.69915780e-06
#   9.85261234e-06  1.96547155e-05  1.73363361e-05  2.57153700e-06
#  -3.05401396e-05  1.45208560e-05 -1.37019611e-05  3.01767995e-05
#   2.68286250e-05 -5.04675319e-05  3.36811815e-05 -8.07250391e-06
#  -1.66324701e-05 -3.36405515e-05  6.25814663e-06  1.63090716e-05
#  -2.76136645e-05  4.89030316e-05 -5.02545686e-05 -4.32614681e-05
#   1.73518778e-05  2.10010653e-05  3.84374669e-05 -5.37038865e-05
#   2.13003387e-05 -1.98064147e-05  2.26983042e-05 -4.32221757e-05
#   2.57885543e-05 -3.18221212e-05 -3.23785397e-07  4.36212759e-05
#   3.58994701e-05 -3.06695927e-05 -1.69359348e-05  2.24804636e-05]
# y_t
# [  1.62434536  -0.61175641  -0.52817175  -1.06196741   0.22235134
#   -1.95349311   0.06139824  -0.41122424  -0.40623355  -0.6993039
#    0.81397429  -1.56746678  -1.92038785  -1.56168838  -0.04962349
#   -1.45487576  -1.86078043  -2.3923877   -1.98072659  -1.21048914
#   -2.54942721  -1.47687092  -0.56287061  -0.69241604  -0.45446928
#   -1.59596536  -1.8715723   -2.58910705  -2.55761851  -1.73176882
#   -2.52837223  -3.08847458  -3.5664135   -4.12321339  -4.47432467
#   -4.16031213  -5.19278259  -4.87600318  -3.09907387  -3.00849309
#   -4.28405284  -5.66087063  -6.2055702   -4.12707152  -4.44331102
#   -5.99715648  -6.03117575  -3.85660223  -4.52706032  -5.04635171
#   -5.28358672  -6.02166065  -7.43392046  -7.62412203  -7.5633008
#   -7.07001295  -6.69592684  -6.54643732  -7.16875479  -7.02780661
#   -8.42484333  -7.60064992  -7.50190897  -8.66891275  -8.77204848
#   -9.19105565  -8.54357146  -7.7403444   -6.74596309  -9.71324556
#  -12.0120102  -12.02969779 -11.43157002 -10.92607879 -11.52087084
#  -14.50608293 -14.96272487 -13.82108157 -14.17568387 -14.55479482
#  -15.79132526 -16.81462056 -17.1928818  -17.43142398 -18.16933812
#  -19.07124851 -20.66428661 -20.98189476 -21.58167932 -21.51269005
#  -21.67047407 -23.18031821 -25.09142083 -26.72701895 -27.00954144
#  -27.91736499 -29.64460666 -30.8562772  -32.62569962 -33.10497916]
# R_2
# 0.9999999999871758
# phi
# [ 1.05000148 -0.19999837  0.19999655]
# theta
# [0.30000549 0.2000049  0.0999975 ]
# se_beta
# [2.330751891026416e-05, 2.5574868559214998e-05, 8.828379847179134e-06, 2.3583773354609526e-05, 1.1762251886041388e-05, 9.797838306742823e-06]

def test_x_residual_streamflow():
    x = [1, 2]
    arch = Arch(x)
    p = 2
    d = 0
    q = 0
    x_residual, y_t, R_2, phi, theta, se_beta = arch.x_residual(y_streamflow_1460, e_100, p, d, q)
    np.savetxt(r'D:\minio\waterism\datasets-origin\camels\camels_ystl\arch\x_residual.txt', x_residual)
    np.savetxt(r'D:\minio\waterism\datasets-origin\camels\camels_ystl\arch\y_t.txt', y_t)
    print("R_2")
    print(R_2)
    print("phi")
    print(phi)
    print("theta")
    print(theta)
    print("se_beta")
    print(se_beta)
# y_residual_streamflow_1460  p=2
# R_2
# 0.9207290207522015
# phi
# [ 1.5331421  -0.61353046]
# theta
# []
# se_beta
# [0.02077505901306154, 0.020776326740508087]
# y_residual_streamflow_1460  p=3
# R_2
# 0.9344269048513744
# phi
# [ 1.80161201 -1.28440015  0.43756275]
# theta
# []
# se_beta
# [0.02400366981844562, 0.040984491020285965, 0.024005252043346952]

def test_LB_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0, 0, -0.65798056, 1.20741142, -0.99820696, 2.40876836, -1.85362018, 0.85126399, -0.45792635,
                  0.36726925, -1.61099009, 2.1557183, 0.20889489, 0.51447928, -1.28002155, 1.20188049, 0.04015461,
                  1.00535443, -0.17882309, -0.45951062, 0.93548651, -0.99910244, -1.07769606, -0.39597124, -1.06442015]
    y_residual_42 = [0, 0, 0, 1.07296862, -0.86540763, 2.3015387, -1.74481176, 0.7612069, -0.3190391, 0.24937038,
                     -1.46210794, 2.06014071, 0.3224172, 0.38405435, -1.13376944, 1.09989127, 0.17242821, 0.87785842,
                     -0.04221375, -0.58281521, 1.10061918, -1.14472371, -0.90159072, -0.50249434, -0.90085595,
                     0.68372786, 0.12289023, 0.93576943, 0.26788808, -0.53035547, 0.69166075, 0.39675353, 0.6871727,
                     0.84520564, 0.67124613, 0.0126646, 1.11731035, -0.2344157, -1.65980218, -0.74204416, 0.19183555,
                     0.88762896]
    e_42 = [1.62434536, -0.61175641, -0.52817175, -1.07296862, 0.86540763, -2.3015387, 1.74481176, -0.7612069,
            0.3190391, -0.24937038, 1.46210794, -2.06014071, -0.3224172, -0.38405435, 1.13376944, -1.09989127,
            -0.17242821, -0.87785842, 0.04221375, 0.58281521, -1.10061918, 1.14472371, 0.90159072, 0.50249434,
            0.90085595, -0.68372786, -0.12289023, -0.93576943, -0.26788808, 0.53035547, -0.69166075, -0.39675353,
            -0.6871727, -0.84520564, -0.67124613, -0.0126646, -1.11731035, 0.2344157, 1.65980218, 0.74204416,
            -0.19183555, -0.88762896]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_arma_3_residual = [0.00E+00, 0.00E+00, 0.00E+00, 4.14E-11, 1.57E-10, 7.87E-10, -1.78E-10, -2.27E-10, 5.21E-10,
                         -1.11E-10, -1.12E-10, 4.91E-10, -1.62E-10, 2.20E-10, -3.22E-10, 2.88E-10, 1.71E-10, 4.63E-12,
                         6.25E-10, -1.06E-10, 8.88E-12, 2.76E-10, 1.99E-11, -5.23E-10, 3.20E-10, 1.27E-10, 3.14E-10,
                         -5.37E-10, 8.56E-10, -4.94E-10, 4.74E-10, -3.66E-10, 5.78E-10, -5.54E-10, 3.70E-10, 1.01E-10,
                         3.07E-11, -3.62E-10, -1.22E-10, -1.31E-10, -2.18E-10, 2.73E-10]
    y_residual_42_p1d2 = [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    y_residual_arima_p1d2q1 = [0.0000, 0.0000, 0.0000, 0.7940, -0.5147, 1.7256, -1.1323, -0.0021, -0.0347, -0.2101,
                               -1.2868, 1.3571, 0.8835, 0.0612, -0.9298, 0.4668, 0.5289, 0.5231, 0.2670, -0.9833,
                               1.0986, -1.3018, -1.0233, -1.0861, -0.8858, 0.1003, 0.3907, 0.5704, 0.5894, -0.8648,
                               0.7008, 0.1526, 0.8938, 0.6001, 0.9735, -0.2358, 1.2422, -0.3879, -1.5876, -1.4872,
                               0.1559, 0.5370]
    arch = Arch(x)
    m = 1
    LB, acf = arch.LB_statistic(e, m)
    print("LB")
    print(LB)
    print("acf")
    print(acf)
# LB
# 27.829265039808767
# acf
# [-0.28481598529511254, 0.18435464616999242, -0.2735880527973914, 0.19595639700086842, -0.3141998549392499,
#  0.15981852447176298, -0.20192173274245087, 0.11507419162945515, -0.0962735984624025, 0.1350466929485835,
#  -0.2528406547808198, -0.049099378738369524, -0.05686051624781958, 0.08785513043231927, 0.12662767453208082,
#  0.09301925304520033, -0.014631827266700313, -0.03579969070491006]
# LB
# 3.6563421669841074
# acf
# [-0.28481598529511254]

def test_get_chi_critical():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    m = 1
    p = 0.05
    chi_critical = arch.get_chi_critical(m, p)
    print("chi_critical")
    print(chi_critical)
# chi_critical
# 9.39
# chi_critical
# 0.004

def test_test_arima():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_residual_42 = [0, 0, 0, 1.07296862, -0.86540763, 2.3015387, -1.74481176, 0.7612069, -0.3190391, 0.24937038,
                     -1.46210794, 2.06014071, 0.3224172, 0.38405435, -1.13376944, 1.09989127, 0.17242821, 0.87785842,
                     -0.04221375, -0.58281521, 1.10061918, -1.14472371, -0.90159072, -0.50249434, -0.90085595,
                     0.68372786, 0.12289023, 0.93576943, 0.26788808, -0.53035547, 0.69166075, 0.39675353, 0.6871727,
                     0.84520564, 0.67124613, 0.0126646, 1.11731035, -0.2344157, -1.65980218, -0.74204416, 0.19183555,
                     0.88762896]
    y_arma_3_residual = [0.00E+00, 0.00E+00, 0.00E+00, 4.14E-11, 1.57E-10, 7.87E-10, -1.78E-10, -2.27E-10, 5.21E-10,
                         -1.11E-10, -1.12E-10, 4.91E-10, -1.62E-10, 2.20E-10, -3.22E-10, 2.88E-10, 1.71E-10, 4.63E-12,
                         6.25E-10, -1.06E-10, 8.88E-12, 2.76E-10, 1.99E-11, -5.23E-10, 3.20E-10, 1.27E-10, 3.14E-10,
                         -5.37E-10, 8.56E-10, -4.94E-10, 4.74E-10, -3.66E-10, 5.78E-10, -5.54E-10, 3.70E-10, 1.01E-10,
                         3.07E-11, -3.62E-10, -1.22E-10, -1.31E-10, -2.18E-10, 2.73E-10]
    y_residual_arima_p1d2q1 = [0.0000, 0.0000, 0.0000, 0.7940, -0.5147, 1.7256, -1.1323, -0.0021, -0.0347, -0.2101,
                               -1.2868, 1.3571, 0.8835, 0.0612, -0.9298, 0.4668, 0.5289, 0.5231, 0.2670, -0.9833,
                               1.0986, -1.3018, -1.0233, -1.0861, -0.8858, 0.1003, 0.3907, 0.5704, 0.5894, -0.8648,
                               0.7008, 0.1526, 0.8938, 0.6001, 0.9735, -0.2358, 1.2422, -0.3879, -1.5876, -1.4872,
                               0.1559, 0.5370]
    y_residual_arma_3_p3d0q3 = [0.00E+00, 0.00E+00, 0.00E+00, 4.14E-11, 1.57E-10, 7.87E-10, -1.78E-10, -2.27E-10,
                                5.21E-10, -1.11E-10, -1.12E-10, 4.91E-10, -1.62E-10, 2.20E-10, -3.22E-10, 2.88E-10,
                                1.71E-10, 4.63E-12, 6.25E-10, -1.06E-10, 8.88E-12, 2.76E-10, 1.99E-11, -5.23E-10,
                                3.20E-10, 1.27E-10, 3.14E-10, -5.37E-10, 8.56E-10, -4.94E-10, 4.74E-10, -3.66E-10,
                                5.78E-10, -5.54E-10, 3.70E-10, 1.01E-10, 3.07E-11, -3.62E-10, -1.22E-10, -1.31E-10,
                                -2.18E-10, 2.73E-10]
    arch = Arch(x)
    m = 6
    p = 0.05
    b_significant = arch.test_arima(y_residual_streamflow_1460, m, p)
    print("b_significant")
    print(b_significant)
# b_significant
# False
# b_significant  m=1
# True
# b_significant  m=2
# False
# b_significant  m=6 y_residual_arima_p1d2q1
# True
# b_significant  y_residual_arma_3_p3d0q3
# False
# b_significant e_1000
# True
# b_significant  y_residual_arma_3_p3d0q3_100 m=6
# False
# b_significant  e_42 m=6
# False
# b_significant  y_residual_streamflow_1460 m=6  p=3
# False

def test_t_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0,  0,  -7.00148942,  2.81307703,  -0.86616938,  2.35613508,  -1.19714684,  0.4232423,  -0.4589695,
                  0.54786256,  -1.83051924,  1.84837348,  0.76232344,  0.96888897,  -1.44205859,  1.03469247,
                  0.18368458,  1.3957388,  -0.13007158]
    y_residual_42_p1d2 = [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                          0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    y_residual_arima_p1d2q1 = [0.0000, 0.0000, 0.0000, 0.7940, -0.5147, 1.7256, -1.1323, -0.0021, -0.0347, -0.2101,
                               -1.2868, 1.3571, 0.8835, 0.0612, -0.9298, 0.4668, 0.5289, 0.5231, 0.2670, -0.9833,
                               1.0986, -1.3018, -1.0233, -1.0861, -0.8858, 0.1003, 0.3907, 0.5704, 0.5894, -0.8648,
                               0.7008, 0.1526, 0.8938, 0.6001, 0.9735, -0.2358, 1.2422, -0.3879, -1.5876, -1.4872,
                               0.1559, 0.5370]
    y_residual_arma_3_p3d0q3 = [0.00E+00, 0.00E+00, 0.00E+00, 4.14E-11, 1.57E-10, 7.87E-10, -1.78E-10, -2.27E-10,
                                5.21E-10, -1.11E-10, -1.12E-10, 4.91E-10, -1.62E-10, 2.20E-10, -3.22E-10, 2.88E-10,
                                1.71E-10, 4.63E-12, 6.25E-10, -1.06E-10, 8.88E-12, 2.76E-10, 1.99E-11, -5.23E-10,
                                3.20E-10, 1.27E-10, 3.14E-10, -5.37E-10, 8.56E-10, -4.94E-10, 4.74E-10, -3.66E-10,
                                5.78E-10, -5.54E-10, 3.70E-10, 1.01E-10, 3.07E-11, -3.62E-10, -1.22E-10, -1.31E-10,
                                -2.18E-10, 2.73E-10]
    arch = Arch(x)
    phi = [1.1, -0.2, 0.2]
    theta = [0.3, 0.2, 0.1]
    se_beta = [3.526733475186766e-10, 3.718670773606283e-10, 1.7479428215457548e-10, 3.5304111238549773e-10, 1.746122221821107e-10, 1.4576179032287249e-10]
    t_statistic = arch.t_statistic(y_residual_arma_3_p3d0q3, phi, theta, se_beta)
    print("t_statistic")
    print(t_statistic)
# t_statistic
# [-57.54816672  -1.3860782 ]
# t_statistic
# [ 3.11903354e+09 -5.37826584e+08  1.14420219e+09  8.49759389e+08
#   1.14539519e+09  6.86050849e+08]

def test_get_t_critical():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    m = 18
    p = 0.05
    t_critical = arch.get_t_critical(42-m, p)
    print("t_critical")
    print(t_critical)
# t_critical
# 1.711

def test_test_parameters():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual_arima_p1d2q1 = [0.0000, 0.0000, 0.0000, 0.7940, -0.5147, 1.7256, -1.1323, -0.0021, -0.0347, -0.2101,
                               -1.2868, 1.3571, 0.8835, 0.0612, -0.9298, 0.4668, 0.5289, 0.5231, 0.2670, -0.9833,
                               1.0986, -1.3018, -1.0233, -1.0861, -0.8858, 0.1003, 0.3907, 0.5704, 0.5894, -0.8648,
                               0.7008, 0.1526, 0.8938, 0.6001, 0.9735, -0.2358, 1.2422, -0.3879, -1.5876, -1.4872,
                               0.1559, 0.5370]
    y_residual_arma_3_p3d0q3 = [0.00E+00, 0.00E+00, 0.00E+00, 4.14E-11, 1.57E-10, 7.87E-10, -1.78E-10, -2.27E-10,
                                5.21E-10, -1.11E-10, -1.12E-10, 4.91E-10, -1.62E-10, 2.20E-10, -3.22E-10, 2.88E-10,
                                1.71E-10, 4.63E-12, 6.25E-10, -1.06E-10, 8.88E-12, 2.76E-10, 1.99E-11, -5.23E-10,
                                3.20E-10, 1.27E-10, 3.14E-10, -5.37E-10, 8.56E-10, -4.94E-10, 4.74E-10, -3.66E-10,
                                5.78E-10, -5.54E-10, 3.70E-10, 1.01E-10, 3.07E-11, -3.62E-10, -1.22E-10, -1.31E-10,
                                -2.18E-10, 2.73E-10]
    arch = Arch(x)
    # phi = [1.1, -0.2, 0.2]
    # theta = [0.3, 0.2, 0.1]
    # se_beta = [3.526733475186766e-10, 3.718670773606283e-10, 1.7479428215457548e-10, 3.5304111238549773e-10, 1.746122221821107e-10, 1.4576179032287249e-10]
    # phi = [1.05000148, -0.19999837, 0.19999655]
    # theta = [0.30000549, 0.2000049, 0.0999975 ]
    # se_beta = [2.330751891026416e-05, 2.5574868559214998e-05, 8.828379847179134e-06, 2.3583773354609526e-05, 1.1762251886041388e-05, 9.797838306742823e-06]
    # phi = [1.86818005, -0.87194949]
    # theta = []
    # se_beta = [0.027635877526645366, 0.02762854656367414]
    phi = [1.80161201, -1.28440015, 0.43756275]
    theta = []
    se_beta = [0.02400366981844562, 0.040984491020285965, 0.024005252043346952]
    m = 6
    significance_level = 0.05
    b_significant = arch.test_parameters(y_residual_streamflow_1460, phi, theta, se_beta, m, significance_level)
    print("b_significant")
    print(b_significant)
# b_significant  m=6
# [True, False]
# b_significant  m=12
# [True, False]
# b_significant  m=18
# [True, False]
# b_significant  m=6 y_residual_arma_3_p3d0q3
# [True, True, True, True, True, True]
# b_significant  m=6 y_residual_arma_3_p3d0q3_100
# [True, True, True, True, True, True]
# b_significant  m=6 y_residual_streamflow_395
# [True, True]
# b_significant  m=6 y_residual_streamflow_1460
# [True, True, True]

def test_LM_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    q = 3
    y_residual_2 = np.power(y_residual, 2)
    y_residual_2 = y_residual_2.tolist()
    a, R_2 = arch.ar_least_squares_estimation(y_residual_2_streamflow_395, q)
    residual_2_fit = arch.arma(y_residual_2_streamflow_395, e=None, phi=a, theta=None, p=q, q=0)  # ar model
    e = y_residual_2_streamflow_395 - residual_2_fit
    e_2 = np.power(e, 2)
    LM = arch.LM_statistic(y_residual_2_streamflow_395, q, e_2)
    print("LM")
    print(LM)
# LM
# 0.6707065303253715
# LM
# -129.27344400589584

def test_F_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    R_2 = 0
    k = 0
    n = 0
    F_statistic = arch.F_statistic(R_2, k, n)
    print("F_statistic")
    print(F_statistic)

def test_BPtest_LM_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    R_2 = 0
    n = 0
    BPtest_LM_statistic = arch.BPtest_LM_statistic(R_2, n)
    print("BPtest_LM_statistic")
    print(BPtest_LM_statistic)

def test_get_F_critical():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    fd_n = 0
    fd_d = 0
    significance_level = 0.05
    F_critical = arch.get_F_critical(fd_n, fd_d, significance_level)
    print("F_critical")
    print(F_critical)

def test_arch_test():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    q = 6
    significance_level = 0.05
    b_arch_Q, b_arch_LM = arch.arch_test(y_residual_streamflow_1460, q, significance_level)
    print("b_arch_Q")
    print(b_arch_Q)
    print("b_arch_LM")
    print(b_arch_LM)
# b_arch_Q, b_arch_LM
# (True, True)
# b_arch_Q, b_arch_LM  q=2  y_residual_streamflow_395
# (True, False)
# b_arch_Q, b_arch_LM  q=3  y_residual_streamflow_395
# (True, False)
# b_arch_Q, b_arch_LM  q=6  y_residual_streamflow_395
# (True, False)
# b_arch_Q, b_arch_LM  q=6  y_residual_streamflow_1460
# (False, False)

def test_arch_one_step():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    q = 3
    y_residual_2 = np.power(y_residual, 2)
    y_residual_2_ = y_residual_2[2:2+q]
    alpha = [1, 0.5, -0.5]
    epsilon_t = arch.arch_one_step(y_residual_2_, alpha, e[2+q-1])
    print("epsilon_t")
    print(epsilon_t)
# epsilon_t
# 7.0818825770004645

def test_arch():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    y_residual_2 = np.power(y_residual, 2)
    y_residual_2 = y_residual_2.tolist()
    alpha = [-0.83992955, 0.99515675, 8.27269624]  # omega
    q = 2
    epsilon = arch.arch(y_residual_2_streamflow_395, e_395, alpha, q)
    print("epsilon")
    print(epsilon)
# epsilon
# [  0.           0.           7.00148942  -4.85853011   5.30047417
#  -11.96630872   5.28427529  -1.43442452   0.92057858  -0.19125989
#    1.82441633  -3.33679254  -0.45009062  -0.59027021   2.31820296
#   -1.65459017  -0.10712434  -1.23454872   0.24357103]

def test_arch_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    e_ = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    y_residual_2 = np.power(y_residual, 2)
    y_residual_2 = y_residual_2.tolist()
    q = 3
    e_2 = np.power(e_395, 2)
    a, R_2 = arch.arch_least_squares_estimation(y_residual_2_streamflow_395, e_2, q)
    print("a")
    print(a)
    print("R_2")
    print(R_2)
# a  y_residual_2_streamflow_395  q=3
# [ 5.37474523e+01 -5.26041074e+01  9.55464424e+00  2.15040052e+04]
# R_2
# 0.0011974949973335661

def test_garch_one_step():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    h = [1, 2]
    arch = Arch(x)
    y_residual_2 = np.power(y_residual, 2)
    eta = [0.5, 0.5]
    alpha = [1.1, 0.5, -0.5]
    epsilon_t, h_t = arch.garch_one_step(h, y_residual_2, eta, alpha, e)
    print("epsilon_t")
    print(epsilon_t)
    print("h_t")
    print(h_t)

def test_garch():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    y_residual_2 = np.power(y_residual, 2)
    p = 2
    q = 2
    eta = [0.5, 0.5]
    alpha = [1.1, 0.5, -0.5]
    epsilon_t = arch.garch(y_residual_2, e, eta, alpha, p, q)
    print("epsilon_t")
    print(epsilon_t)

def test_garch_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    e = [1.7353783, -0.50072347, -0.41713881, -0.96193568, 0.97644057, -2.19050576, 1.8558447, -0.65017396,
         0.43007204, -0.13833744, 1.57314088, -1.94910777, -0.21138426, -0.27302141, 1.24480238, -0.98885833,
         -0.06139527, -0.76682548, 0.15324669, 0.69384815, -0.98958624, 1.25575665, 1.01262366, 0.61352728,
         1.01188889, -0.57269492, -0.01185729, -0.82473649, -0.15685514, 0.64138841, -0.58062781, -0.28572059,
         -0.57613976, -0.7341727, -0.56021319, 0.09836834, -1.00627741, 0.34544864, 1.77083512, 0.8530771,
         -0.08080261, -0.77659602]
    y_residual = [0, 0, -7.00148942, 2.81307703, -0.86616938, 2.35613508, -1.19714684, 0.4232423, -0.4589695,
                  0.54786256, -1.83051924, 1.84837348, 0.76232344, 0.96888897, -1.44205859, 1.03469247,
                  0.18368458, 1.3957388, -0.13007158]
    arch = Arch(x)
    h = [1, 1]
    y_residual_2 = np.power(y_residual, 2)
    y_residual_2 = y_residual_2.tolist()
    p = 2
    q = 2
    a, R_2 = arch.garch_least_squares_estimation(h, y_residual_2, e, p, q)
    print("a")
    print(a)
    print("R_2")
    print(R_2)
