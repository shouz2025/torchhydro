import numpy as np
from hydrodataset import CamelsYstl
from torchhydro.datasets.arch import Arch


class Ystl(object):
    def __init__(self):
        self.datasource = CamelsYstl()
        self.basin = ["1000",]
        self.time_range = ["1990-01-01","1994-01-01"]
        self.var_list = ["streamflow", "discharge_vol1", "discharge_vol2", "discharge_vol3",]
        self.pet_list = ["pet"]
        self.prcp_list = ["prcp"]
        self.streamflow = None
        self.prcp = None
        self.pet = None
        self.read_streamflow()
        # self.read_prcp()
        # self.read_pet()

    def read_streamflow(self):
        data = self.datasource.read_ts_xrdataset(
            self.basin,
            self.time_range,
            self.var_list,
        )
        data1 = data.streamflow.to_dataframe()
        # data2 = data.discharge_vol1.to_dataframe()
        # data3 = data.discharge_vol2.to_dataframe()
        # data4 = data.discharge_vol3.to_dataframe()
        # data1.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data2.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data3.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        # data4.drop(axis=0, index=("1000", "1992-02-29"), inplace=True)
        data1 = data1.values[:, 0]
        # data2 = data2.values[:, 0]
        # data3 = data3.values[:, 0]
        # data4 = data4.values[:, 0]
        data_ = data1.tolist()  # + data2.tolist() + data3.tolist() + data4.tolist()
        self.streamflow = data_  # + data_

def test_cov():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    cov_xy = arch.cov(x, y)
    print(cov_xy)
# 112.0

def test_correlation_coefficient():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    cf_xy = arch.correlation_coefficient(x, y)
    print(cf_xy)
# 1.0

def test_autocorrelation_coefficient():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(x)
    acf_x = arch.autocorrelation_coefficient(x, 2)
    acf_y = arch.autocorrelation_coefficient(y, 2)
    print("acf_x")
    print(acf_x)
    print("acf_y")
    print(acf_y)
# acf_x
# 0.8181818181818182
# acf_y
# 0.8181818181818182

def test_autocorrelation_function():
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]  # 13
    arch = Arch(y)
    acf_y = arch.autocorrelation_function(y)
    print("acf_y")
    print(acf_y)
# acf_y
# [1.0, 0.9589041095890409, 0.8181818181818182, 0.5714285714285714, 0.25, -0.08695652173913043, -0.3846153846153847,
# -0.6153846153846154, -0.7777777777777779, -0.8837209302325582]

def test_partial_autocorrelation_function():
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]  # 13
    arch = Arch(y)
    pacf_y, R = arch.partial_autocorrelation_function(y)
    print("pacf_y")
    print(pacf_y)
# pacf_y
# [2.13300176e+00, -1.29124067e+00,  1.88629892e-03,  5.42913276e-02,  4.33732729e-02,  1.46429609e-02, -7.39995569e-03,
#  -1.48360034e-02,  -1.28126285e-02]
# R
# [1.        ,0.95890411,0.81818182,0.57142857,0.25      ,-0.08695652,-0.38461538,-0.61538462,-0.77777778],
# [0.95890411,1.        ,0.81818182,0.57142857,0.25      ,-0.08695652,-0.38461538,-0.61538462,-0.77777778],
# [0.81818182,0.95890411,1.        ,0.57142857,0.25      ,-0.08695652,-0.38461538,-0.61538462,-0.77777778],
# [0.57142857,0.81818182,0.95890411,1.        ,0.25      ,-0.08695652,-0.38461538,-0.61538462,-0.77777778],
# [0.25      ,0.57142857,0.81818182,0.95890411,1.        ,-0.08695652,-0.38461538,-0.61538462,-0.77777778],
# [-0.08695652,0.25      ,0.57142857,0.81818182,0.95890411,1.        ,-0.38461538,-0.61538462,-0.77777778],
# [-0.38461538,-0.08695652,0.25      ,0.57142857,0.81818182,0.95890411,1.        ,-0.61538462,-0.77777778],
# [-0.61538462,-0.38461538,-0.08695652,0.25      ,0.57142857,0.81818182,0.95890411,1.        ,-0.77777778],
# [-0.77777778,-0.61538462,-0.38461538,-0.08695652,0.25      ,0.57142857,0.81818182,0.95890411,1.        ]

def test_autocorrelation_function_streamflow():
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(y)
    acf_y = arch.autocorrelation_function(y)
    print("acf_y")
    print(acf_y)
# acf_y
# [1.0, 0.4721557737807292, 0.3192437543514526, 0.26045831328856206, 0.18151885726257555, 0.15911596131811492,
#  0.13708377315348166, 0.1236200204052219, 0.11461652416194103, 0.10057368482830863, 0.1351144515035927,
#  0.21322178485283755, 0.13277504391705014, 0.1264648118105023, 0.11478249084388586, 0.10210881356555156,
#  0.1277336488348275, 0.18129403888021298, 0.13298615619923201, 0.1599865048093435, 0.1930135934549702,
#  0.14850777467651513, 0.16711799552916076, 0.1549964463617687, 0.1304573128912555, 0.12211271126017632,
#  0.12102992850577496, 0.19194037998906263, 0.38515725260538874, 0.2520487607821916, 0.2840151604215048,
#  0.2122097168902612, 0.11695047099034922, 0.09100104324809086, 0.08569321772431798, 0.17535680891896116,
#  0.15508789613125895, 0.07356788831396116, 0.04429063768933152, 0.03961363861898935, 0.04708737730379165,
#  0.03448534721649931, 0.01737949760814229, 0.012999180459048633, 0.015073307264324898, 0.02836945778791176,
#  0.06627547567105546, 0.09270044214928538, 0.13233727845537, 0.1895995043570024, 0.13076409717288154,
#  0.12762490707984275, 0.1821318215819341, 0.08866104998526689, 0.02758178062123509, 0.021597328052176533,
#  0.02856517047970773, 0.05319163313970071, 0.06288304213753036, 0.07331328010895899, 0.09703135547487376,
#  0.03605908378509748, 0.03645691257379889, 0.09714955109607282, 0.0572511634279095, 0.016215231576123274,
#  0.011970091488727243, -0.009906648551894609, -0.02255000058635276, -0.015887622180753628, 0.00658365830272132,
#  0.02797918187975077, 0.04464880601425547, -0.01163308748101708, -0.015612264227678427, -0.008819342026507079,
#  0.012246456421599024, 0.04787460104087659, 0.012881043294745721, 0.03965320639994027, 0.0684116513000135,
#  0.017698248680601294, 0.013749642339188566, 0.007490536342535053, -0.033724745801940334, -0.049992559268973946,
#  -0.04829409446227241, -0.03847487205517248, -0.03453257701483237, -0.05751773488669389, -0.06441074303926493,
#  -0.07074771424173416, -0.07007632066838958, -0.07080260317266318, -0.06732873102252658, -0.0690877014407455,
#  -0.068657840492394, -0.06602414515008692, -0.05622780409240676, -0.05080147625812134, -0.0479031775049682,
#  -0.07651192162790109, -0.07553864692084884, -0.08412984352803715, -0.10062143142050316, -0.1092382551548397,
#  -0.11439091775703235, -0.11585911611550267, -0.11166291344525028, -0.10238402328203576, -0.09743298056381129,
#  -0.09750123816766108, -0.09362981438396238, -0.08032667258520103, -0.08666313959551057, -0.09385135229395873,
#  -0.10067448673059426, -0.10521236074682522, -0.10547537042341706, -0.09926306886446691, -0.08721257899841667,
#  -0.08966865101922947, -0.07426660956339656, -0.04823491559211001, -0.05652458484825117, -0.07857393949571576,
#  -0.08969208507832799, -0.09367699261452406, -0.10248594276836864, -0.10594526817106421, -0.10857364871429014,
#  -0.11943442088108246, -0.1240503758151283, -0.12297141737239013, -0.1227558189336615, -0.13136064729635952,
#  -0.1367903561591106, -0.13908705622876016, -0.13726811508368242, -0.13045261201146605, -0.1128351189497122,
#  -0.09096701375960285, -0.11000555898190616, -0.1184808120536269, -0.1237469176303782, -0.1271886727188584,
#  -0.12819811626923955, -0.12861961864784685, -0.12551255572758552, -0.12042263910170346, -0.1112889986901606,
#  -0.10033403782498428, -0.10533737023477513, -0.10741647012270428, -0.11235468042843337, -0.12123874848864528,
#  -0.13120537203285276, -0.1388800295958453, -0.14154423992764983, -0.14048495895838536, -0.13886389798411433,
#  -0.13846672004889524, -0.13893313916512368, -0.13582930208877753, -0.1357517445491866, -0.13410194134727701,
#  -0.1299399612662522, -0.1264061476027007, -0.11988798933910197, -0.11495146180260542, -0.11522284833143985,
#  -0.11376096563161256, -0.1521478033153051, -0.16108543980015913, -0.16836939558421973, -0.16392363596367432,
#  -0.14703838058464572, -0.15078858929352232, -0.16405341146909558, -0.17024965410404916, -0.17439711474692587,
#  -0.17881900996991307, -0.1787793859603608, -0.1783234883263054, -0.17587471186827924, -0.17519702813726082,
#  -0.17222243908368914, -0.16709435817203644, -0.15632580406095695, -0.13909566218469488, -0.12263313654297302,
#  -0.12252012495507508, -0.1122707717913355, -0.10006765156151777, -0.11987874050325319, -0.135312345845197,
#  -0.14465759790806226, -0.15464348885307852, -0.16000261800985438, -0.15853187621472867, -0.18047359478036884,
#  -0.1703045052764572, -0.1819620151576914, -0.19958453201141066, -0.1991888543855143, -0.1987573528647253,
#  -0.1991203165639163, -0.19983442850356814, -0.20231581190796122, -0.20223277091306385, -0.19533824345886994,
#  -0.18045919061751708, -0.15886938593355662, -0.13952946910115394, -0.15189684915935653, -0.1611349103410998,
#  -0.16245956697018715, -0.16623526878605444, -0.16985384260013386, -0.1755820366868454, -0.1799249186363535,
#  -0.17091627368906173, -0.15434254721476673, -0.13346412849081987, -0.1171466339940981, -0.11658371770454853,
#  -0.11951726556777789, -0.11969254241203629, -0.1135656010067439, -0.08513566386218965, -0.06728633474183388,
#  -0.07423192620800512, -0.07961914345163382, -0.08213079442471471, -0.08118756102658177, -0.07679377194964267,
#  -0.07155345093446414, -0.0652945836211073, -0.05724888300363546, -0.04916488827303404, -0.04240697747607863,
#  -0.030321420891027167, 0.007431903029298834]

# acf_y_60
# [1.0, 0.8587438388522092, 0.6416783213389374, 0.5101205712766372, 0.45446785417267394, 0.430136263420801,
#  0.40207725891080465, 0.3553080988720061, 0.29041602390598137, 0.2233874067489399, 0.1651394837984072,
#  0.11652331741896974, 0.08489477047685076, 0.04841780532413019, 0.04439226046375843, 0.05716602994126686,
#  0.06483641215798262, 0.03676010713699499, -0.05285223387201344, -0.16489815537171662, -0.24111416440613276,
#  -0.29087634911272925, -0.3306303690042141, -0.36718441828290577, -0.4036542738362469, -0.4393005539852559,
#  -0.47170272478876923, -0.4989340667328899, -0.5202596908149623, -0.534099030073374, -0.5427060986296321,
#  -0.5540356636611177, -0.5631954697088963, -0.5764546808338563, -0.5923837065483771, -0.6019117691033438,
#  -0.6099829841667701, -0.6260829563514713, -0.6471880429275858, -0.669294567128286, -0.6871166446146172,
#  -0.6971315510286307, -0.6927374725950876, -0.6705063891033126, -0.6431867233068411, -0.6335700068917359]

def test_mean_value_function():
    # ystl = Ystl()
    # y = ystl.streamflow[:60]
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    arch = Arch(y)
    y_t = arch.mean_value_function(y, x)
    print("y_t")
    print(y_t)

def test_std_function():
    x = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    y = [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51]
    w = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
    std = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    arch = Arch(y)
    std_t = arch.std_function(w, y, std)
    print("std_t")
    print(std_t)

def test_partial_autocorrelation_function_streamflow():
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(y)
    pacf_y, R = arch.partial_autocorrelation_function(y)
    print("pacf_y")
    print(pacf_y)
    # print(pacf_y[:500])
    # print(pacf_y[500:1000])
    # print(pacf_y[1000:1124])
    # print("R")
    # print(R)
# R
# 1	0.85874384	0.64167832	0.51012057	0.45446785	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.85874384	1	0.64167832	0.51012057	0.45446785	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.64167832	0.85874384	1	0.51012057	0.45446785	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.51012057	0.64167832	0.85874384	1	0.45446785	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.45446785	0.51012057	0.64167832	0.85874384	1	0.43013626	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.40207726	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.3553081	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.29041602	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.22338741	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.16513948	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.11652332	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.08489477	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.04841781	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.04439226	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.05716603	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.06483641	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	0.03676011	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# 0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.05285223	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.16489816	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.24111416	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.29087635	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.33063037	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.36718442	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.40365427	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.43930055	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.47170272	-0.49893407	-0.52025969	-0.53409903
# -0.47170272	-0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.49893407	-0.52025969	-0.53409903
# -0.49893407	-0.47170272	-0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.52025969	-0.53409903
# -0.52025969	-0.49893407	-0.47170272	-0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1	-0.53409903
# -0.53409903	-0.52025969	-0.49893407	-0.47170272	-0.43930055	-0.40365427	-0.36718442	-0.33063037	-0.29087635	-0.24111416	-0.16489816	-0.05285223	0.03676011	0.06483641	0.05716603	0.04439226	0.04841781	0.08489477	0.11652332	0.16513948	0.22338741	0.29041602	0.3553081	0.40207726	0.43013626	0.45446785	0.51012057	0.64167832	0.85874384	1
# pacf_y
# [ 1.00000000e+00 -2.25785102e-17 -1.33194237e-16 -7.77101907e-17
#   2.00333456e-16 -4.95480393e-17  6.47810798e-18  3.38271078e-17
#  -8.67361738e-18 -7.72765098e-17 -4.99275100e-17 -7.74662452e-17
#   3.36102673e-17 -2.19550940e-17 -1.61112443e-16  4.73254248e-17
#   4.72170046e-17  2.00387667e-16 -4.97919848e-17  6.12845278e-17
#   3.36644775e-17 -2.15485182e-17 -7.76830857e-17  1.99926881e-16
#   1.95427442e-17 -1.32191350e-16 -4.93854090e-17  8.99616753e-17
#  -2.16569384e-17  3.27700107e-17  9.00158854e-17  2.14129929e-16
#   7.51081055e-17 -8.29414662e-18  5.48064198e-17  8.91214186e-17
#   8.90943135e-17  3.70526092e-17 -8.05020113e-18  6.53502859e-17
#  -7.84149221e-17  4.71085844e-17 -2.54787511e-17  1.98137947e-17
#  -2.21719344e-17  5.10388173e-17  9.57350518e-17 -1.47993597e-17
#  -4.11996826e-18  3.31765865e-17  6.15826834e-17  5.85469173e-18
#  -3.54805161e-17  1.24683250e-17  4.09557371e-17  3.27971157e-17
#   3.40439482e-17 -2.53974359e-17 -2.89481980e-17  4.04949511e-17
#  -2.86500424e-17 -4.94125140e-17 -8.59230222e-18 -8.21283146e-18
#   7.13947131e-17 -5.64056180e-17  6.17995238e-18 -3.26615904e-17
#  -2.88668828e-17  3.67544536e-17  1.13841228e-17  1.98951099e-17
#   6.09863722e-18 -5.65411433e-17 -2.22532496e-17  7.51623156e-17
#  -1.78893358e-18  5.69748242e-17 -1.32814766e-18  6.34800372e-17
#  -7.18554990e-17 -5.70019292e-17 -8.29414662e-18 -7.05544564e-17
#   3.93565389e-17 -1.00288701e-18  7.55688914e-17 -5.71103494e-17
#   5.43727390e-17  2.66713734e-17 -4.24465151e-17  1.98951099e-17
#  -5.00630353e-17  7.56231015e-17 -9.13169280e-17 -7.76288755e-17
#   5.33969570e-18 -4.95480393e-17 -2.48282297e-17 -1.87973552e-16
#   6.06340065e-17  3.37457926e-17 -4.97919848e-17  3.36102673e-17
#  -9.13982431e-17 -3.52907807e-17 -7.69783542e-18 -1.33302657e-16
#  -4.98732999e-17  1.44686780e-16 -6.35884574e-17 -3.56431464e-17
#   6.04442711e-18  8.22638398e-17 -2.20364092e-17  4.72712147e-17
#   1.96240593e-17  1.16768574e-16 -1.04408669e-16  1.92445886e-17
#   1.99764250e-17  5.58364119e-18  6.15826834e-17 -2.89753031e-17
#  -3.49384150e-17 -2.22532496e-17 -4.98732999e-17 -1.51517254e-17
#  -4.26091454e-17  4.75964754e-17  3.39355280e-17 -4.95751443e-17
#   1.98680048e-17 -7.73849301e-17  1.97324795e-17  1.92987987e-17
#  -6.33174069e-17  3.36644775e-17  6.39679282e-18 -2.22261445e-17
#  -3.61581425e-17 -7.77915059e-17  6.08237419e-17  1.44903620e-16
#  -1.04842350e-16 -6.34529321e-17 -7.75475604e-17  1.04164724e-16
#   8.90129984e-17 -2.03152382e-16  6.07153217e-18  1.44903620e-16
#   7.45660044e-17  1.25496401e-17  1.32001615e-16 -1.46773869e-16
#   1.02511315e-16 -1.88624073e-16  7.93635990e-17 -1.06604179e-16
#   3.32687437e-16 -1.31351093e-16 -2.68936349e-16  1.41515489e-16
#   3.55699628e-16 -3.95516953e-16  3.35560572e-17 -4.83418644e-16
#   1.97785581e-16  9.52200558e-17 -1.80194401e-16  1.15548847e-16
#   2.78531538e-16 -1.29155584e-16 -6.42660838e-17  2.52754631e-16
#  -3.76489204e-17  9.02056208e-17 -1.30863202e-16 -1.06089183e-16
#   9.00972005e-17  1.17337780e-16 -2.82353351e-16  1.01643954e-16
#  -4.67047191e-16  1.95969543e-17  3.64590086e-16  1.74908915e-16
#  -2.12639151e-16  1.82633856e-16  1.92716936e-17 -1.78486783e-16
#   2.45869948e-16  1.35606587e-16 -2.57877487e-16  2.17572271e-16
#  -1.48698328e-16 -1.07498645e-16 -2.72161850e-16  1.93611403e-16
#  -1.11157828e-16 -7.88486030e-17 -2.44623115e-16  1.93231932e-16
#   4.83852325e-16 -1.73553663e-16 -1.68213967e-16  1.96240593e-16
#   2.34296089e-16 -4.92715677e-16  6.19350491e-17  9.83642421e-17
#   1.88271707e-16 -2.51778850e-16  1.96864009e-16 -2.68123197e-16
#  -8.11254276e-17  2.49502025e-16  6.85215773e-17  3.29326410e-17
#  -2.26896410e-16  1.22514845e-17 -8.18843691e-17  8.76577456e-17
#   1.86536984e-16 -3.22821197e-17 -3.21194894e-17 -2.92273801e-16
#   4.61870125e-17  6.76542156e-17  1.45364406e-16 -5.53485209e-17
#   3.92074611e-16 -9.26721807e-17 -4.44441576e-16  1.68186862e-16
#  -1.31730564e-16  1.82145965e-16  6.15555783e-17 -5.27193306e-17
#  -1.38777878e-17 -1.73472348e-17 -7.97972799e-17]

# pacf_y_60
# [ 1.00000000e+00  1.31838984e-16  4.37150316e-16  1.04083409e-16
#  -5.13478149e-16  2.35922393e-16  1.59594560e-16  4.16333634e-17
#   7.63278329e-17  3.46944695e-17  4.16333634e-17 -7.63278329e-17
#   2.08166817e-17  0.00000000e+00  6.93889390e-18 -3.46944695e-17
#  -2.77555756e-17  2.08166817e-17  6.24500451e-17 -6.93889390e-17
#   9.02056208e-17  6.93889390e-18  7.63278329e-17 -1.17961196e-16
#  -1.31838984e-16  2.98372438e-16 -6.93889390e-17 -3.46944695e-17
#   1.52655666e-16 -1.38777878e-17  3.12250226e-16 -1.52655666e-16
#   1.94289029e-16 -2.08166817e-16  1.17961196e-16 -2.15105711e-16
#  -9.71445147e-17  8.32667268e-17  1.38777878e-16  3.46944695e-17
#  -1.24900090e-16  6.93889390e-18 -9.71445147e-17  4.16333634e-17
#   1.11022302e-16  1.60461922e-17]

def test_p_check():
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(y)
    p_check = arch.pcheck(y)
    print("p_check")
    print(p_check)

def test_ar_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 17
    # y = [1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31]  # 17
    y = [1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1]  # 17
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  #
    y_non_stationary_integrated = [-1.,  7., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.]
    arch = Arch(x)
    fi = arch.ar_least_squares_estimation(y_non_stationary_integrated, 2)
    print("fi")
    print(fi)
# fi
# [0.42583249 0.3259334 ]
# fi_y_non_stationary
# [0.15244528 1.01185391]
# fi_y_non_stationary_integrated
# (array([-1.30116329, -0.30504093]), 0.9671246321660794)
# fi_y_non_stationary
# (array([0.19959267, 0.96037771]), 0.9953614579053824)
# fi_y_non_stationary_integrated
# (array([-1.16254939, -0.16365151]), 0.9999781529381598)

def test_adf_least_squares():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 17
    y_stationary = [1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1]  # 17
    y_non_stationary = [1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  #
    ystl = Ystl()
    y = ystl.streamflow[:365]
    arch = Arch(x)
    # a, R_2, s_a0 = arch.adf_least_squares_estimation(y_stationary, 3)
    a, R_2, s_a0 = arch.adf_least_squares_estimation(y_non_stationary, 3)
    # a, R_2, s_a0 = arch.adf_least_squares_estimation(y, 3)
    # print("rho_y_stationary")
    # print(rho_y_stationary)
    # print("rho_y_non_stationary")
    # print(rhoy_non_stationary)
    # print("rhoy_y_365")
    # print(rhoy_y)
    print("a")
    print(a)
    print("R_2")
    print(R_2)
    print("s_a0")
    print(s_a0)
# rho_y_stationary
# [ 6.9388939e-17 -1.0000000e+00 -1.0000000e+00]
# rho_y_non_stationary
# [-0.00983053  0.05893195  1.078081  ]
# rhoy_y
# [-0.02074667  0.26622862 -0.23479098]
# rhoy_y_365
# [-0.2669443  -0.27469861 -0.14828769]

# y_365
# a
# [-0.2669443  -0.27469861 -0.14828769]
# R_2
# 0.27029118414274617
# s_a0
# 0.06013027324388966

# y_stationary
# a
# [ 6.9388939e-17 -1.0000000e+00 -1.0000000e+00]
# R_2
# 1.0
# s_a0
# 2.953942840327311e-16

# y_non_stationary
# a
# [-0.00983053  0.05893195  1.078081  ]
# R_2
# 0.9859178299393451
# s_a0
# 0.014193263300194653


def test_t_statistic():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]  # 19
    y_stationary = [1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1]  # 19
    y_non_stationary = [1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  # 19
    ystl = Ystl()
    y = ystl.streamflow[:365]
    arch = Arch(x)
    t_y = arch.t_statistic(y_non_stationary, 3)
    print("t_y")
    print(t_y)
# t_y
# -4.439432624698465
# t_y_stationary
# 0.2349027817727971
# t_y_non_stationary
# -0.6926191407014809

def test_get_t_critical():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    arch = Arch(x)
    case = "case 1"
    p = 0.05
    n_sample = 365
    t_critical = arch.get_t_critical(case, n_sample, p)
    print("t_critical")
    print(t_critical)
# t_critical
# -1.95

def test_adf_test():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_stationary = [1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1]  # 19
    y_non_stationary = [1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  # 19
    ystl = Ystl()
    y = ystl.streamflow
    arch = Arch(x)
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(y, 3, case, significance_level)
    print("b_stability")
    print(b_stability)
# y_365
# b_stability
# True
# y_stationary
# b_stability
# False
# y_non_stationary
# b_stability
# False
# y_1461
# b_stability
# True
# y_31
# b_stability
# False
# y_60
# b_stability
# False
# y_1461
# b_stability
# True

def test_integrate_d_degree():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_stationary = [1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1]  # 19
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  # 19
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(x)
    y_integrated, y_trend = arch.integrate_d_degree(y_non_stationary, 2)
    p = 3
    case = "case 1"
    significance_level = 0.05
    b_stability = arch.adf_test(y_integrated, p, case, significance_level)
    print("y_integrated")
    print(y_integrated)
    print("y_trend")
    print(y_trend)
    print("b_stability")
    print(b_stability)
# y_stationary   d=1
# y_integrated
# [ 0.  4. -2. -2.  4. -2. -2.  4. -2. -2.  4. -2. -2.  4. -2. -2.  4. -2. -2.]
# b_stability
# True

# y_stationary   d=2
# y_integrated
# [ 0.  0. -6.  0.  6. -6.  0.  6. -6.  0.  6. -6.  0.  6. -6.  0.  6. -6. 0.]

# y_non_stationary  d=1
# y_integrated
# [ 0.  4. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.]
# b_stability
# False

# y_non_stationary  d=2
# y_integrated
# [ 0.  0. -6.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.]
# b_stability
# True

# y_60 d=1
# y_integrated
# [ 0.000e+00 -2.600e+00 -4.400e+00 -2.600e+00  0.000e+00 -8.800e+00
#  -9.600e+00 -3.900e+00 -3.900e+00 -3.100e+00 -7.000e-01 -1.300e+00
#   6.000e-01 -5.000e+00 -5.200e+00  8.000e-01 -8.000e-01 -3.600e+00
#  -2.000e-01 -4.300e+00 -3.000e+00 -2.500e+00 -2.800e+00 -1.600e+00
#  -1.600e+00 -2.200e+00 -1.700e+00 -5.000e-01  0.000e+00  2.300e+00
#   4.120e+01  3.730e+01  1.800e+00 -1.000e+01 -1.380e+01 -1.030e+01
#  -3.900e+00 -3.900e+00  1.400e+00  1.800e+00  1.320e+01  2.730e+01
#   9.600e+00 -1.100e+00 -7.600e+00 -1.010e+01  3.010e+01  2.143e+02
#   3.814e+02 -1.794e+02 -1.887e+02 -6.840e+01 -2.390e+01  2.800e+00
#  -4.000e+00 -1.180e+01 -1.440e+01 -2.210e+01 -2.050e+01 -2.060e+01]
# b_stability
# True

#y_non_stationary
# y_integrated  d=1
# [-1.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.  6. -2.]
# y_trend
# [ 0. -1.  5.  3.  9.  7. 13. 11. 17. 15. 21. 19. 25. 23. 29. 27. 33. 31. 37.]
# b_stability
# False
# y_integrated  d=2
# [-1.  7. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.  8. -8.]
# y_trend
# [ 0. -2. 11.  1. 15.  5. 19.  9. 23. 13. 27. 17. 31. 21. 35. 25. 39. 29. 43.]
# b_stability
# True


def test_arma():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_stationary = [1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1, 5, 3, 1]  # 19
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  # 19
    np.random.seed(1)
    mean = 0
    std_dev = 1
    e = np.random.normal(mean, std_dev, size=19)
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(x)
    phi = [0.19959267, 0.96037771]
    theat = [0.5, 0.5]
    p = 2
    q = 2
    y_arma = [0]*(19-p)
    for i in range(19-p):
        x_ = y_non_stationary[i:i+p]
        e_ = e[i:i+q+1]
        y_arma[i] = arch.arma(x_, e_, phi, theat, p, q)
    print("e")
    print(e)
    print("y_arma")
    print(y_arma)
# e
# [ 1.62434536 -0.61175641 -0.52817175 -1.07296862  0.86540763 -2.3015387
#   1.74481176 -0.7612069   0.3190391  -0.24937038  1.46210794 -2.06014071
#  -0.3224172  -0.38405435  1.13376944 -1.09989127 -0.17242821 -0.87785842
#   0.04221375]
# y_arma
# [-1.0386729179633485, 5.1700604557469525, 5.374256850794067, 9.426263042637945, 9.7570507474459, 15.45059549799259,
#  13.244343865920309, 19.57622938270885, 19.168646140493937, 23.05480747298988, 22.34473066947076, 29.43811733741462,
#  28.604968083174477, 32.882037223677195, 31.863657455057066, 37.99085362469633, 37.26395877713301]

def test_arima():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  # 19
    np.random.seed(1)
    mean = 0
    std_dev = 1
    e = np.random.normal(mean, std_dev, size=19)
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(x)
    phi = [-1.16254939, -0.16365151]
    theat = [0.5, 0.5]
    p = 2
    d = 2
    q = 2
    y_arima = arch.arima(y_non_stationary, e, phi, theat, p, d, q)
    print("y_arima")
    print(y_arima)
# y_arima
# [-1.          5.          1.70468397  8.67936519  7.4607434  12.13203475
#  11.20365577 17.51648569 14.05106737 21.00223805 19.33548813 23.84093462
#  21.87169114 29.58436296 27.49204703 32.38840133 30.11085488 36.85733621
#  34.87127468]

def test_arma_least_squares_estimation():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  # 19
    y_non_stationary_integrated = [-1.,  7., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.]
    np.random.seed(1)
    mean = 0
    std_dev = 1
    e = np.random.normal(mean, std_dev, size=19)
    e = e.tolist()
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(x)
    p = 2
    q = 2
    phi, theat, R_2 = arch.arma_least_squares_estimation(y_non_stationary_integrated, e, p, q)
    print("phi")
    print(phi)
    print("theat")
    print(theat)
    print("R_2")
    print(R_2)
# a
# [-1.16041343 -0.16318757  0.00737651  0.02189101 -0.00159451]
# R_2
# 0.9999814242337502
# phi
# [-1.12697744e+00  6.68924049e-04]
# theat
# [-0.06370455 -0.25621323]
# R_2
# 0.9949408988453096


def test_x_residual():
    x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    y_non_stationary = [-1, 5, 3, 9, 7, 13, 11, 17, 15, 21, 19, 25, 23, 29, 27, 33, 31, 37, 35]  # 19
    y_non_stationary_integrated = [-1.,  7., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.,  8., -8.]
    np.random.seed(1)
    mean = 0
    std_dev = 1
    e = np.random.normal(mean, std_dev, size=19)
    e = e.tolist()
    ystl = Ystl()
    y = ystl.streamflow[:60]
    arch = Arch(x)
    p = 2
    d = 2
    q = 1
    x_residual, y_t, R_2 = arch.x_residual(y_non_stationary, e, p, d, q)
    print("x_residual")
    print(x_residual)
    print("y_t")
    print(y_t)
    print("R_2")
    print(R_2)
# x_residual
# [ 0.          0.         -8.3515942   3.16707861 -1.55885968  3.28175051
#  -2.80516447  2.59388411 -2.06342078  1.57138175 -2.36443152  2.75993179
#  -1.45332172  2.2045375  -1.8497465   2.07393042 -1.4352662   2.19428404
#  -1.06867214]
# y_t
# [-1.          5.         11.3515942   5.83292139  8.55885968  9.71824949
#  13.80516447 14.40611589 17.06342078 19.42861825 21.36443152 22.24006821
#  24.45332172 26.7954625  28.8497465  30.92606958 32.4352662  34.80571596
#  36.06867214]

# x_residual
# [ 0.          0.         -7.00148942  2.81307703 -0.86616938  2.35613508
#  -1.19714684  0.4232423  -0.4589695   0.54786256 -1.83051924  1.84837348
#   0.76232344  0.96888897 -1.44205859  1.03469247  0.18368458  1.3957388
#  -0.13007158]
# y_t
# [-1.          5.         10.00148942  6.18692297  7.86616938 10.64386492
#  12.19714684 16.5767577  15.4589695  20.45213744 20.83051924 23.15162652
#  22.23767656 28.03111103 28.44205859 31.96530753 30.81631542 35.6042612
#  35.13007158]
